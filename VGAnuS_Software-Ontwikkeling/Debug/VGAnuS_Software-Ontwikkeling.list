
VGAnuS_Software-Ontwikkeling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006248  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006648  08006648  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006650  08006650  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ff0  20000090  080066e8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013080  080066e8  00023080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016357  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9c  00000000  00000000  00036417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000391b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00039f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023958  00000000  00000000  0003ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113b2  00000000  00000000  0005e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc7cc  00000000  00000000  0006f92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c0f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004348  00000000  00000000  0013c14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063c0 	.word	0x080063c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080063c0 	.word	0x080063c0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <FL_Parse>:
 */

#include "main.h"

void FL_Parse(char *buf)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0a6      	sub	sp, #152	; 0x98
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	char *token;
	char tokens[10][10];
	int i = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	VGA_Command CMD;

	token = strtok(buf, ",");	 //Find the first word in the sentence which is seperated via the delimiter ","
 80005a6:	4960      	ldr	r1, [pc, #384]	; (8000728 <FL_Parse+0x190>)
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f004 fd39 	bl	8005020 <strtok>
 80005ae:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	sprintf(tokens[i], token);
 80005b2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80005b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	440b      	add	r3, r1
 80005c4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 fd09 	bl	8004fe0 <siprintf>

	while(token != NULL){					 //Find all the other words with the delimiter "," between them
 80005ce:	e018      	b.n	8000602 <FL_Parse+0x6a>
		sprintf(tokens[i], token);
 80005d0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80005d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	440b      	add	r3, r1
 80005e2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fcfa 	bl	8004fe0 <siprintf>
		i++;
 80005ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80005f0:	3301      	adds	r3, #1
 80005f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		token = strtok(NULL, ",");
 80005f6:	494c      	ldr	r1, [pc, #304]	; (8000728 <FL_Parse+0x190>)
 80005f8:	2000      	movs	r0, #0
 80005fa:	f004 fd11 	bl	8005020 <strtok>
 80005fe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	while(token != NULL){					 //Find all the other words with the delimiter "," between them
 8000602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1e2      	bne.n	80005d0 <FL_Parse+0x38>
	}

	if(strcmp(tokens[0], "lijn") == 0)
 800060a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800060e:	4947      	ldr	r1, [pc, #284]	; (800072c <FL_Parse+0x194>)
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fddd 	bl	80001d0 <strcmp>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d105      	bne.n	8000628 <FL_Parse+0x90>
	{
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"lijn command", 12);
 800061c:	220c      	movs	r2, #12
 800061e:	4944      	ldr	r1, [pc, #272]	; (8000730 <FL_Parse+0x198>)
 8000620:	4844      	ldr	r0, [pc, #272]	; (8000734 <FL_Parse+0x19c>)
 8000622:	f003 fd85 	bl	8004130 <HAL_UART_Transmit_DMA>
	else
	{
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Command nvt", 11);

	}
}
 8000626:	e07b      	b.n	8000720 <FL_Parse+0x188>
	else if(strcmp(tokens[0], "rechthoek") == 0)
 8000628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062c:	4942      	ldr	r1, [pc, #264]	; (8000738 <FL_Parse+0x1a0>)
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdce 	bl	80001d0 <strcmp>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d107      	bne.n	800064a <FL_Parse+0xb2>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"rechthoek command", 17);
 800063a:	2211      	movs	r2, #17
 800063c:	493f      	ldr	r1, [pc, #252]	; (800073c <FL_Parse+0x1a4>)
 800063e:	483d      	ldr	r0, [pc, #244]	; (8000734 <FL_Parse+0x19c>)
 8000640:	f003 fd76 	bl	8004130 <HAL_UART_Transmit_DMA>
		CMD.CMD_Type = RECT;
 8000644:	2302      	movs	r3, #2
 8000646:	733b      	strb	r3, [r7, #12]
}
 8000648:	e06a      	b.n	8000720 <FL_Parse+0x188>
	else if(strcmp(tokens[0], "tekst") == 0)
 800064a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064e:	493c      	ldr	r1, [pc, #240]	; (8000740 <FL_Parse+0x1a8>)
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdbd 	bl	80001d0 <strcmp>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d107      	bne.n	800066c <FL_Parse+0xd4>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"tekst command", 13);
 800065c:	220d      	movs	r2, #13
 800065e:	4939      	ldr	r1, [pc, #228]	; (8000744 <FL_Parse+0x1ac>)
 8000660:	4834      	ldr	r0, [pc, #208]	; (8000734 <FL_Parse+0x19c>)
 8000662:	f003 fd65 	bl	8004130 <HAL_UART_Transmit_DMA>
		CMD.CMD_Type = TEXT;
 8000666:	2303      	movs	r3, #3
 8000668:	733b      	strb	r3, [r7, #12]
}
 800066a:	e059      	b.n	8000720 <FL_Parse+0x188>
	else if(strcmp(tokens[0], "bitmap") == 0)
 800066c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000670:	4935      	ldr	r1, [pc, #212]	; (8000748 <FL_Parse+0x1b0>)
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fdac 	bl	80001d0 <strcmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d107      	bne.n	800068e <FL_Parse+0xf6>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"bitmap command", 14);
 800067e:	220e      	movs	r2, #14
 8000680:	4932      	ldr	r1, [pc, #200]	; (800074c <FL_Parse+0x1b4>)
 8000682:	482c      	ldr	r0, [pc, #176]	; (8000734 <FL_Parse+0x19c>)
 8000684:	f003 fd54 	bl	8004130 <HAL_UART_Transmit_DMA>
		CMD.CMD_Type = BITM;
 8000688:	2304      	movs	r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
}
 800068c:	e048      	b.n	8000720 <FL_Parse+0x188>
	else if(strcmp(tokens[0], "clearscherm") == 0)
 800068e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000692:	492f      	ldr	r1, [pc, #188]	; (8000750 <FL_Parse+0x1b8>)
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fd9b 	bl	80001d0 <strcmp>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d107      	bne.n	80006b0 <FL_Parse+0x118>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"clearscherm command", 19);
 80006a0:	2213      	movs	r2, #19
 80006a2:	492c      	ldr	r1, [pc, #176]	; (8000754 <FL_Parse+0x1bc>)
 80006a4:	4823      	ldr	r0, [pc, #140]	; (8000734 <FL_Parse+0x19c>)
 80006a6:	f003 fd43 	bl	8004130 <HAL_UART_Transmit_DMA>
		CMD.CMD_Type = CLRS;
 80006aa:	2305      	movs	r3, #5
 80006ac:	733b      	strb	r3, [r7, #12]
}
 80006ae:	e037      	b.n	8000720 <FL_Parse+0x188>
	else if(strcmp(tokens[0], "wacht") == 0)										//BONUS COMMAND
 80006b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006b4:	4928      	ldr	r1, [pc, #160]	; (8000758 <FL_Parse+0x1c0>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fd8a 	bl	80001d0 <strcmp>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d107      	bne.n	80006d2 <FL_Parse+0x13a>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"wacht command", 13);
 80006c2:	220d      	movs	r2, #13
 80006c4:	4925      	ldr	r1, [pc, #148]	; (800075c <FL_Parse+0x1c4>)
 80006c6:	481b      	ldr	r0, [pc, #108]	; (8000734 <FL_Parse+0x19c>)
 80006c8:	f003 fd32 	bl	8004130 <HAL_UART_Transmit_DMA>
		CMD.CMD_Type = WAIT;
 80006cc:	2306      	movs	r3, #6
 80006ce:	733b      	strb	r3, [r7, #12]
}
 80006d0:	e026      	b.n	8000720 <FL_Parse+0x188>
	else if(strcmp(tokens[0], "cirkel") == 0)										//BONUS COMMAND
 80006d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006d6:	4922      	ldr	r1, [pc, #136]	; (8000760 <FL_Parse+0x1c8>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd79 	bl	80001d0 <strcmp>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d107      	bne.n	80006f4 <FL_Parse+0x15c>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"cirkel command", 14);
 80006e4:	220e      	movs	r2, #14
 80006e6:	491f      	ldr	r1, [pc, #124]	; (8000764 <FL_Parse+0x1cc>)
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <FL_Parse+0x19c>)
 80006ea:	f003 fd21 	bl	8004130 <HAL_UART_Transmit_DMA>
		CMD.CMD_Type = CIRC;
 80006ee:	2307      	movs	r3, #7
 80006f0:	733b      	strb	r3, [r7, #12]
}
 80006f2:	e015      	b.n	8000720 <FL_Parse+0x188>
	else if(strcmp(tokens[0], "figuur") == 0)										//BONUS COMMAND
 80006f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f8:	491b      	ldr	r1, [pc, #108]	; (8000768 <FL_Parse+0x1d0>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd68 	bl	80001d0 <strcmp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d107      	bne.n	8000716 <FL_Parse+0x17e>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"figuur command", 14);
 8000706:	220e      	movs	r2, #14
 8000708:	4918      	ldr	r1, [pc, #96]	; (800076c <FL_Parse+0x1d4>)
 800070a:	480a      	ldr	r0, [pc, #40]	; (8000734 <FL_Parse+0x19c>)
 800070c:	f003 fd10 	bl	8004130 <HAL_UART_Transmit_DMA>
		CMD.CMD_Type = FIGU;
 8000710:	2308      	movs	r3, #8
 8000712:	733b      	strb	r3, [r7, #12]
}
 8000714:	e004      	b.n	8000720 <FL_Parse+0x188>
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)"Command nvt", 11);
 8000716:	220b      	movs	r2, #11
 8000718:	4915      	ldr	r1, [pc, #84]	; (8000770 <FL_Parse+0x1d8>)
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <FL_Parse+0x19c>)
 800071c:	f003 fd08 	bl	8004130 <HAL_UART_Transmit_DMA>
}
 8000720:	bf00      	nop
 8000722:	3798      	adds	r7, #152	; 0x98
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	080063d8 	.word	0x080063d8
 800072c:	080063dc 	.word	0x080063dc
 8000730:	080063e4 	.word	0x080063e4
 8000734:	20013028 	.word	0x20013028
 8000738:	080063f4 	.word	0x080063f4
 800073c:	08006400 	.word	0x08006400
 8000740:	08006414 	.word	0x08006414
 8000744:	0800641c 	.word	0x0800641c
 8000748:	0800642c 	.word	0x0800642c
 800074c:	08006434 	.word	0x08006434
 8000750:	08006444 	.word	0x08006444
 8000754:	08006450 	.word	0x08006450
 8000758:	08006464 	.word	0x08006464
 800075c:	0800646c 	.word	0x0800646c
 8000760:	0800647c 	.word	0x0800647c
 8000764:	08006484 	.word	0x08006484
 8000768:	08006494 	.word	0x08006494
 800076c:	0800649c 	.word	0x0800649c
 8000770:	080064ac 	.word	0x080064ac

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_DMA_Init+0x78>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <MX_DMA_Init+0x78>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_DMA_Init+0x78>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_DMA_Init+0x78>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <MX_DMA_Init+0x78>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_DMA_Init+0x78>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2010      	movs	r0, #16
 80007b8:	f001 f83d 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007bc:	2010      	movs	r0, #16
 80007be:	f001 f856 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2011      	movs	r0, #17
 80007c8:	f001 f835 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007cc:	2011      	movs	r0, #17
 80007ce:	f001 f84e 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2044      	movs	r0, #68	; 0x44
 80007d8:	f001 f82d 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80007dc:	2044      	movs	r0, #68	; 0x44
 80007de:	f001 f846 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_GPIO_Init+0xe4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <MX_GPIO_Init+0xe4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a23      	ldr	r2, [pc, #140]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_GPIO_Init+0xe4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800087c:	4816      	ldr	r0, [pc, #88]	; (80008d8 <MX_GPIO_Init+0xe8>)
 800087e:	f001 fdaf 	bl	80023e0 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000888:	4814      	ldr	r0, [pc, #80]	; (80008dc <MX_GPIO_Init+0xec>)
 800088a:	f001 fda9 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800088e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000892:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_GPIO_Init+0xe8>)
 80008a8:	f001 fbfe 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_GPIO_Init+0xec>)
 80008c6:	f001 fbef 	bl	80020a8 <HAL_GPIO_Init>

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020400 	.word	0x40020400

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fe5a 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f83e 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f7ff ff80 	bl	80007f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f0:	f7ff ff40 	bl	8000774 <MX_DMA_Init>
  MX_TIM1_Init();
 80008f4:	f000 fb24 	bl	8000f40 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008f8:	f000 fb72 	bl	8000fe0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008fc:	f000 fc88 	bl	8001210 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000900:	f000 f8a4 	bl	8000a4c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000904:	20ff      	movs	r0, #255	; 0xff
 8000906:	f000 f8f3 	bl	8000af0 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 800090a:	220a      	movs	r2, #10
 800090c:	210a      	movs	r1, #10
 800090e:	200a      	movs	r0, #10
 8000910:	f000 f912 	bl	8000b38 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,10);
 8000914:	220a      	movs	r2, #10
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f90d 	bl	8000b38 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,10);
 800091e:	220a      	movs	r2, #10
 8000920:	2100      	movs	r1, #0
 8000922:	f240 103f 	movw	r0, #319	; 0x13f
 8000926:	f000 f907 	bl	8000b38 <UB_VGA_SetPixel>

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <main+0x7c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <main+0x7c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f042 0210 	orr.w	r2, r2, #16
 8000938:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RX_BUFSIZE);
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	4908      	ldr	r1, [pc, #32]	; (8000960 <main+0x80>)
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <main+0x7c>)
 8000940:	f003 fc62 	bl	8004208 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart2, US_mess, (uint8_t)strlen((char*)US_mess), 100);
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <main+0x84>)
 8000946:	f7ff fc4d 	bl	80001e4 <strlen>
 800094a:	4603      	mov	r3, r0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	b29a      	uxth	r2, r3
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	4904      	ldr	r1, [pc, #16]	; (8000964 <main+0x84>)
 8000954:	4801      	ldr	r0, [pc, #4]	; (800095c <main+0x7c>)
 8000956:	f003 fb58 	bl	800400a <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095a:	e7fe      	b.n	800095a <main+0x7a>
 800095c:	20013028 	.word	0x20013028
 8000960:	20012ea8 	.word	0x20012ea8
 8000964:	20000000 	.word	0x20000000

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f004 fb2a 	bl	8004fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <SystemClock_Config+0xcc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <SystemClock_Config+0xcc>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <SystemClock_Config+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <SystemClock_Config+0xd0>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009dc:	23a8      	movs	r3, #168	; 0xa8
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fd11 	bl	8002414 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f8:	f000 f820 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2302      	movs	r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2105      	movs	r1, #5
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 ff72 	bl	8002904 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a26:	f000 f809 	bl	8000a3c <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	; 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <UB_VGA_Screen_Init+0x84>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <UB_VGA_Screen_Init+0x84>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <UB_VGA_Screen_Init+0x84>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <UB_VGA_Screen_Init+0x88>)
 8000a64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a68:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8000a6a:	481b      	ldr	r0, [pc, #108]	; (8000ad8 <UB_VGA_Screen_Init+0x8c>)
 8000a6c:	f002 f996 	bl	8002d9c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a70:	210c      	movs	r1, #12
 8000a72:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <UB_VGA_Screen_Init+0x8c>)
 8000a74:	f002 fa4a 	bl	8002f0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000a78:	2108      	movs	r1, #8
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <UB_VGA_Screen_Init+0x8c>)
 8000a7c:	f002 fb0e 	bl	800309c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <UB_VGA_Screen_Init+0x90>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <UB_VGA_Screen_Init+0x90>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a8e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <UB_VGA_Screen_Init+0x90>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <UB_VGA_Screen_Init+0x90>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0201 	orr.w	r2, r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8000aa0:	490f      	ldr	r1, [pc, #60]	; (8000ae0 <UB_VGA_Screen_Init+0x94>)
 8000aa2:	f240 1341 	movw	r3, #321	; 0x141
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <UB_VGA_Screen_Init+0x98>)
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <UB_VGA_Screen_Init+0x9c>)
 8000aaa:	f000 ffa9 	bl	8001a00 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <UB_VGA_Screen_Init+0x9c>)
 8000ab0:	f000 fef8 	bl	80018a4 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <UB_VGA_Screen_Init+0x9c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <UB_VGA_Screen_Init+0x9c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0210 	orr.w	r2, r2, #16
 8000ac2:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <UB_VGA_Screen_Init+0xa0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a01      	ldr	r2, [pc, #4]	; (8000ad0 <UB_VGA_Screen_Init+0x84>)
 8000aca:	6093      	str	r3, [r2, #8]
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000bc 	.word	0x200000bc
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	20012e60 	.word	0x20012e60
 8000adc:	20012db8 	.word	0x20012db8
 8000ae0:	200000c8 	.word	0x200000c8
 8000ae4:	40021015 	.word	0x40021015
 8000ae8:	20012e00 	.word	0x20012e00
 8000aec:	40026488 	.word	0x40026488

08000af0 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	81bb      	strh	r3, [r7, #12]
 8000afe:	e012      	b.n	8000b26 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	81fb      	strh	r3, [r7, #14]
 8000b04:	e008      	b.n	8000b18 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	89b9      	ldrh	r1, [r7, #12]
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f813 	bl	8000b38 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	3301      	adds	r3, #1
 8000b16:	81fb      	strh	r3, [r7, #14]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b1e:	d3f2      	bcc.n	8000b06 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8000b20:	89bb      	ldrh	r3, [r7, #12]
 8000b22:	3301      	adds	r3, #1
 8000b24:	81bb      	strh	r3, [r7, #12]
 8000b26:	89bb      	ldrh	r3, [r7, #12]
 8000b28:	2bef      	cmp	r3, #239	; 0xef
 8000b2a:	d9e9      	bls.n	8000b00 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
 8000b42:	460b      	mov	r3, r1
 8000b44:	80bb      	strh	r3, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b50:	d301      	bcc.n	8000b56 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	2bef      	cmp	r3, #239	; 0xef
 8000b5a:	d901      	bls.n	8000b60 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8000b60:	88ba      	ldrh	r2, [r7, #4]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	441a      	add	r2, r3
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4904      	ldr	r1, [pc, #16]	; (8000b84 <UB_VGA_SetPixel+0x4c>)
 8000b72:	78fa      	ldrb	r2, [r7, #3]
 8000b74:	54ca      	strb	r2, [r1, r3]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000c8 	.word	0x200000c8

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 fd08 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <DMA1_Stream5_IRQHandler+0x10>)
 8000c3a:	f000 ffcb 	bl	8001bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20012f28 	.word	0x20012f28

08000c48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <DMA1_Stream6_IRQHandler+0x10>)
 8000c4e:	f000 ffc1 	bl	8001bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20012f88 	.word	0x20012f88

08000c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c60:	4828      	ldr	r0, [pc, #160]	; (8000d04 <TIM2_IRQHandler+0xa8>)
 8000c62:	f002 fb29 	bl	80032b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <TIM2_IRQHandler+0xa8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f06f 0208 	mvn.w	r2, #8
 8000c6e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000c7a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000c84:	d905      	bls.n	8000c92 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000c8c:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <TIM2_IRQHandler+0xb0>)
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000c90:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d802      	bhi.n	8000ca0 <TIM2_IRQHandler+0x44>
 8000c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c9e:	e001      	b.n	8000ca4 <TIM2_IRQHandler+0x48>
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <TIM2_IRQHandler+0xb4>)
 8000ca6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	2b23      	cmp	r3, #35	; 0x23
 8000cae:	d927      	bls.n	8000d00 <TIM2_IRQHandler+0xa4>
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	f240 2202 	movw	r2, #514	; 0x202
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d821      	bhi.n	8000d00 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <TIM2_IRQHandler+0xb8>)
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <TIM2_IRQHandler+0xb8>)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <TIM2_IRQHandler+0xbc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <TIM2_IRQHandler+0xbc>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <TIM2_IRQHandler+0xc0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <TIM2_IRQHandler+0xc0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0201 	orr.w	r2, r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000cfc:	4a02      	ldr	r2, [pc, #8]	; (8000d08 <TIM2_IRQHandler+0xac>)
 8000cfe:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20012e60 	.word	0x20012e60
 8000d08:	200000bc 	.word	0x200000bc
 8000d0c:	200000c8 	.word	0x200000c8
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40026488 	.word	0x40026488
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	20012e00 	.word	0x20012e00

08000d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <USART2_IRQHandler+0x24>)
 8000d26:	f003 fa9f 	bl	8004268 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <USART2_IRQHandler+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	2b10      	cmp	r3, #16
 8000d36:	d102      	bne.n	8000d3e <USART2_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart2);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <USART2_IRQHandler+0x24>)
 8000d3a:	f000 fb49 	bl	80013d0 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20013028 	.word	0x20013028

08000d48 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  // if (__HAL_DMA_GET_IT_SOURCE(&hdma_tim1_up, DMA_IT_TC)) // not needed?
  // {
    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <DMA2_Stream5_IRQHandler+0x48>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6a1a      	ldr	r2, [r3, #32]
 8000d52:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10f      	bne.n	8000d7c <DMA2_Stream5_IRQHandler+0x34>
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <DMA2_Stream5_IRQHandler+0x48>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6a1a      	ldr	r2, [r3, #32]
 8000d62:	f240 4344 	movw	r3, #1092	; 0x444
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d107      	bne.n	8000d7c <DMA2_Stream5_IRQHandler+0x34>
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <DMA2_Stream5_IRQHandler+0x48>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <DMA2_Stream5_IRQHandler+0x48>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <DMA2_Stream5_IRQHandler+0x4c>)
 8000d7e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000d82:	619a      	str	r2, [r3, #24]
  // }

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <DMA2_Stream5_IRQHandler+0x50>)
 8000d86:	f000 ff25 	bl	8001bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20012db8 	.word	0x20012db8
 8000d94:	40021000 	.word	0x40021000
 8000d98:	20012e00 	.word	0x20012e00

08000d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_kill>:

int _kill(int pid, int sig)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000db6:	f004 f8e1 	bl	8004f7c <__errno>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2216      	movs	r2, #22
 8000dbe:	601a      	str	r2, [r3, #0]
	return -1;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_exit>:

void _exit (int status)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffe7 	bl	8000dac <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dde:	e7fe      	b.n	8000dde <_exit+0x12>

08000de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	e00a      	b.n	8000e08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df2:	f3af 8000 	nop.w
 8000df6:	4601      	mov	r1, r0
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbf0      	blt.n	8000df2 <_read+0x12>
	}

return len;
 8000e10:	687b      	ldr	r3, [r7, #4]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e009      	b.n	8000e40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	60ba      	str	r2, [r7, #8]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf1      	blt.n	8000e2c <_write+0x12>
	}
	return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_close>:

int _close(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_isatty>:

int _isatty(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	return 1;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_sbrk+0x50>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x16>
		heap_end = &end;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <_sbrk+0x50>)
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <_sbrk+0x54>)
 8000ed0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <_sbrk+0x50>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <_sbrk+0x50>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	466a      	mov	r2, sp
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d907      	bls.n	8000ef6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ee6:	f004 f849 	bl	8004f7c <__errno>
 8000eea:	4603      	mov	r3, r0
 8000eec:	220c      	movs	r2, #12
 8000eee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	e006      	b.n	8000f04 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <_sbrk+0x50>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <_sbrk+0x50>)
 8000f00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000ac 	.word	0x200000ac
 8000f10:	20013080 	.word	0x20013080

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <SystemInit+0x28>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <SystemInit+0x28>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SystemInit+0x28>)
 8000f2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <MX_TIM1_Init+0x9c>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f70:	220b      	movs	r2, #11
 8000f72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000f88:	f001 feb8 	bl	8002cfc <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000f92:	f7ff fd53 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000fa4:	f002 fb4e 	bl	8003644 <HAL_TIM_ConfigClockSource>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000fae:	f7ff fd45 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_TIM1_Init+0x98>)
 8000fc0:	f002 ff46 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f7ff fd37 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20012db8 	.word	0x20012db8
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <MX_TIM2_Init+0xcc>)
 8001004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001008:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <MX_TIM2_Init+0xcc>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_TIM2_Init+0xcc>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <MX_TIM2_Init+0xcc>)
 8001018:	f640 226b 	movw	r2, #2667	; 0xa6b
 800101c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_TIM2_Init+0xcc>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_TIM2_Init+0xcc>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800102a:	4820      	ldr	r0, [pc, #128]	; (80010ac <MX_TIM2_Init+0xcc>)
 800102c:	f001 ff1e 	bl	8002e6c <HAL_TIM_PWM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001036:	f7ff fd01 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	4619      	mov	r1, r3
 8001048:	4818      	ldr	r0, [pc, #96]	; (80010ac <MX_TIM2_Init+0xcc>)
 800104a:	f002 ff01 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001054:	f7ff fcf2 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001058:	2360      	movs	r3, #96	; 0x60
 800105a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 800105c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001062:	2302      	movs	r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2208      	movs	r2, #8
 800106e:	4619      	mov	r1, r3
 8001070:	480e      	ldr	r0, [pc, #56]	; (80010ac <MX_TIM2_Init+0xcc>)
 8001072:	f002 fa29 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800107c:	f7ff fcde 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001080:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	220c      	movs	r2, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <MX_TIM2_Init+0xcc>)
 800108e:	f002 fa1b 	bl	80034c8 <HAL_TIM_PWM_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001098:	f7ff fcd0 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <MX_TIM2_Init+0xcc>)
 800109e:	f000 f87f 	bl	80011a0 <HAL_TIM_MspPostInit>

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20012e60 	.word	0x20012e60

080010b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <HAL_TIM_Base_MspInit+0x94>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d13c      	bne.n	800113c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_TIM_Base_MspInit+0x98>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_TIM_Base_MspInit+0x98>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_TIM_Base_MspInit+0x98>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_TIM_Base_MspInit+0xa0>)
 80010e2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010e6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80010ea:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010ee:	2240      	movs	r2, #64	; 0x40
 80010f0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fe:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001114:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001118:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001122:	f000 fbbf 	bl	80018a4 <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 800112c:	f7ff fc86 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001134:	621a      	str	r2, [r3, #32]
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40010000 	.word	0x40010000
 8001148:	40023800 	.word	0x40023800
 800114c:	20012e00 	.word	0x20012e00
 8001150:	40026488 	.word	0x40026488

08001154 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001164:	d115      	bne.n	8001192 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_TIM_PWM_MspInit+0x48>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_TIM_PWM_MspInit+0x48>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_TIM_PWM_MspInit+0x48>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	201c      	movs	r0, #28
 8001188:	f000 fb55 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800118c:	201c      	movs	r0, #28
 800118e:	f000 fb6e 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c0:	d11e      	bne.n	8001200 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_TIM_MspPostInit+0x68>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_TIM_MspPostInit+0x68>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_TIM_MspPostInit+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80011de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <HAL_TIM_MspPostInit+0x6c>)
 80011fc:	f000 ff54 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_USART2_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART2_UART_Init+0x4c>)
 8001248:	f002 fe92 	bl	8003f70 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f7ff fbf3 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20013028 	.word	0x20013028
 8001260:	40004400 	.word	0x40004400

08001264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_UART_MspInit+0x150>)
 8001282:	4293      	cmp	r3, r2
 8001284:	f040 8091 	bne.w	80013aa <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_UART_MspInit+0x154>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a49      	ldr	r2, [pc, #292]	; (80013b8 <HAL_UART_MspInit+0x154>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_UART_MspInit+0x154>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <HAL_UART_MspInit+0x154>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a42      	ldr	r2, [pc, #264]	; (80013b8 <HAL_UART_MspInit+0x154>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <HAL_UART_MspInit+0x154>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c0:	230c      	movs	r3, #12
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d0:	2307      	movs	r3, #7
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4838      	ldr	r0, [pc, #224]	; (80013bc <HAL_UART_MspInit+0x158>)
 80012dc:	f000 fee4 	bl	80020a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012e0:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 80012e2:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_UART_MspInit+0x160>)
 80012e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 80012e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 80012fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001300:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800130e:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 8001310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001314:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001322:	4827      	ldr	r0, [pc, #156]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 8001324:	f000 fabe 	bl	80018a4 <HAL_DMA_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800132e:	f7ff fb85 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <HAL_UART_MspInit+0x15c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_UART_MspInit+0x168>)
 8001342:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001346:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800134a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_UART_MspInit+0x164>)
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_UART_MspInit+0x164>)
 800135a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_UART_MspInit+0x164>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_UART_MspInit+0x164>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001380:	f000 fa90 	bl	80018a4 <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800138a:	f7ff fb57 	bl	8000a3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_UART_MspInit+0x164>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2026      	movs	r0, #38	; 0x26
 80013a0:	f000 fa49 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013a4:	2026      	movs	r0, #38	; 0x26
 80013a6:	f000 fa62 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40004400 	.word	0x40004400
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	20012f28 	.word	0x20012f28
 80013c4:	40026088 	.word	0x40026088
 80013c8:	20012f88 	.word	0x20012f88
 80013cc:	400260a0 	.word	0x400260a0

080013d0 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	f040 8085 	bne.w	80014f2 <HAL_UART_RxCpltCallback+0x122>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);												// clear the interrupt
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4b46      	ldr	r3, [pc, #280]	; (8001508 <HAL_UART_RxCpltCallback+0x138>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HAL_UART_RxCpltCallback+0x138>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
		RxCounter++;																	// increment the Rx Counter
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_UART_RxCpltCallback+0x13c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <HAL_UART_RxCpltCallback+0x13c>)
 8001408:	701a      	strb	r2, [r3, #0]

		uint8_t TxSize = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	753b      	strb	r3, [r7, #20]
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 800140e:	4b40      	ldr	r3, [pc, #256]	; (8001510 <HAL_UART_RxCpltCallback+0x140>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	827b      	strh	r3, [r7, #18]
		RxBfrPos = RX_BUFSIZE - (uint16_t)huart->hdmarx->Instance->NDTR;				// determine actual buffer position
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_UART_RxCpltCallback+0x140>)
 8001428:	701a      	strb	r2, [r3, #0]
		uint16_t len = RX_BUFSIZE;														// init len with max. size
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	82fb      	strh	r3, [r7, #22]
		UART2_txBuffer[0] = '\0';
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_UART_RxCpltCallback+0x144>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

		if(RxRollover < 2)  {
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_UART_RxCpltCallback+0x148>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d81c      	bhi.n	8001476 <HAL_UART_RxCpltCallback+0xa6>
			if(RxRollover) {															// rolled over once
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_UART_RxCpltCallback+0x148>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d011      	beq.n	8001468 <HAL_UART_RxCpltCallback+0x98>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BUFSIZE - start;				// no bytes overwritten
 8001444:	4b32      	ldr	r3, [pc, #200]	; (8001510 <HAL_UART_RxCpltCallback+0x140>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	8a7a      	ldrh	r2, [r7, #18]
 800144c:	429a      	cmp	r2, r3
 800144e:	d308      	bcc.n	8001462 <HAL_UART_RxCpltCallback+0x92>
 8001450:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_UART_RxCpltCallback+0x140>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b29a      	uxth	r2, r3
 8001456:	8a7b      	ldrh	r3, [r7, #18]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	3380      	adds	r3, #128	; 0x80
 800145e:	82fb      	strh	r3, [r7, #22]
 8001460:	e00b      	b.n	800147a <HAL_UART_RxCpltCallback+0xaa>
				else len = RX_BUFSIZE + 1;												// bytes overwritten error
 8001462:	2381      	movs	r3, #129	; 0x81
 8001464:	82fb      	strh	r3, [r7, #22]
 8001466:	e008      	b.n	800147a <HAL_UART_RxCpltCallback+0xaa>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <HAL_UART_RxCpltCallback+0x140>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b29a      	uxth	r2, r3
 800146e:	8a7b      	ldrh	r3, [r7, #18]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	82fb      	strh	r3, [r7, #22]
 8001474:	e001      	b.n	800147a <HAL_UART_RxCpltCallback+0xaa>
			}
		} else {
			len = RX_BUFSIZE + 2;														// dual rollover error
 8001476:	2382      	movs	r3, #130	; 0x82
 8001478:	82fb      	strh	r3, [r7, #22]
		}

		if(len && (len <= RX_BUFSIZE)) {
 800147a:	8afb      	ldrh	r3, [r7, #22]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d025      	beq.n	80014cc <HAL_UART_RxCpltCallback+0xfc>
 8001480:	8afb      	ldrh	r3, [r7, #22]
 8001482:	2b80      	cmp	r3, #128	; 0x80
 8001484:	d822      	bhi.n	80014cc <HAL_UART_RxCpltCallback+0xfc>
				sprintf(UART2_txBuffer, "ACK RxC:%d S:%d L:%d RO:%d RXp:%d >>", RxCounter, start, len, RxRollover, RxBfrPos);

			#else
				//sprintf(UART2_txBuffer, "U heeft ingevoerd:");
			#endif
			TxSize = strlen(UART2_txBuffer);
 8001486:	4823      	ldr	r0, [pc, #140]	; (8001514 <HAL_UART_RxCpltCallback+0x144>)
 8001488:	f7fe feac 	bl	80001e4 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	753b      	strb	r3, [r7, #20]

			// add received bytes to UART2_txBuffer
			uint8_t i;
			for(i = 0; i < len; i++) *(UART2_txBuffer + TxSize + i) = *(UART2_rxBuffer + ((start + i) % RX_BUFSIZE));
 8001490:	2300      	movs	r3, #0
 8001492:	757b      	strb	r3, [r7, #21]
 8001494:	e010      	b.n	80014b8 <HAL_UART_RxCpltCallback+0xe8>
 8001496:	8a7a      	ldrh	r2, [r7, #18]
 8001498:	7d7b      	ldrb	r3, [r7, #21]
 800149a:	4413      	add	r3, r2
 800149c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_UART_RxCpltCallback+0x14c>)
 80014a2:	441a      	add	r2, r3
 80014a4:	7d39      	ldrb	r1, [r7, #20]
 80014a6:	7d7b      	ldrb	r3, [r7, #21]
 80014a8:	440b      	add	r3, r1
 80014aa:	491a      	ldr	r1, [pc, #104]	; (8001514 <HAL_UART_RxCpltCallback+0x144>)
 80014ac:	440b      	add	r3, r1
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	7d7b      	ldrb	r3, [r7, #21]
 80014b4:	3301      	adds	r3, #1
 80014b6:	757b      	strb	r3, [r7, #21]
 80014b8:	7d7b      	ldrb	r3, [r7, #21]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	8afa      	ldrh	r2, [r7, #22]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8e9      	bhi.n	8001496 <HAL_UART_RxCpltCallback+0xc6>
			TxSize += i;
 80014c2:	7d3a      	ldrb	r2, [r7, #20]
 80014c4:	7d7b      	ldrb	r3, [r7, #21]
 80014c6:	4413      	add	r3, r2
 80014c8:	753b      	strb	r3, [r7, #20]
		if(len && (len <= RX_BUFSIZE)) {
 80014ca:	e00b      	b.n	80014e4 <HAL_UART_RxCpltCallback+0x114>
		} else {
			// buffer overflow error:
			sprintf(UART2_txBuffer, "NAK RX BUFFER OVERFLOW ERROR %d\r\n", (len - RX_BUFSIZE));	// Change error message
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	3b80      	subs	r3, #128	; 0x80
 80014d0:	461a      	mov	r2, r3
 80014d2:	4913      	ldr	r1, [pc, #76]	; (8001520 <HAL_UART_RxCpltCallback+0x150>)
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <HAL_UART_RxCpltCallback+0x144>)
 80014d6:	f003 fd83 	bl	8004fe0 <siprintf>
			TxSize = strlen(UART2_txBuffer);
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <HAL_UART_RxCpltCallback+0x144>)
 80014dc:	f7fe fe82 	bl	80001e4 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	753b      	strb	r3, [r7, #20]
		}

		FL_Parse(UART2_txBuffer);
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <HAL_UART_RxCpltCallback+0x144>)
 80014e6:	f7ff f857 	bl	8000598 <FL_Parse>

		//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)UART2_txBuffer, TxSize);						// send a response

		RxRollover = 0;																	// reset the Rollover variable
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_UART_RxCpltCallback+0x148>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
	} else {
		// no idle flag? --> DMA rollover occurred
		RxRollover++;		// increment Rollover Counter
	}
}
 80014f0:	e005      	b.n	80014fe <HAL_UART_RxCpltCallback+0x12e>
		RxRollover++;		// increment Rollover Counter
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_UART_RxCpltCallback+0x148>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_UART_RxCpltCallback+0x148>)
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20013028 	.word	0x20013028
 800150c:	200000b1 	.word	0x200000b1
 8001510:	200000b2 	.word	0x200000b2
 8001514:	20012fe8 	.word	0x20012fe8
 8001518:	200000b0 	.word	0x200000b0
 800151c:	20012ea8 	.word	0x20012ea8
 8001520:	080064b8 	.word	0x080064b8

08001524 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;
	TxCounter++;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_UART_TxCpltCallback+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_UART_TxCpltCallback+0x20>)
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	200000b3 	.word	0x200000b3

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800154c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800154e:	e003      	b.n	8001558 <LoopCopyDataInit>

08001550 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001552:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001554:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001556:	3104      	adds	r1, #4

08001558 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800155c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800155e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001560:	d3f6      	bcc.n	8001550 <CopyDataInit>
  ldr  r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001564:	e002      	b.n	800156c <LoopFillZerobss>

08001566 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001566:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001568:	f842 3b04 	str.w	r3, [r2], #4

0800156c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800156e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001570:	d3f9      	bcc.n	8001566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001572:	f7ff fccf 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f003 fd07 	bl	8004f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff f9b1 	bl	80008e0 <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001580:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001584:	08006658 	.word	0x08006658
  ldr  r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800158c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001590:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001594:	20013080 	.word	0x20013080

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f92b 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f808 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fada 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x54>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_InitTick+0x58>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f943 	bl	800188a <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f90b 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_InitTick+0x5c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000020 	.word	0x20000020
 8001638:	20000028 	.word	0x20000028
 800163c:	20000024 	.word	0x20000024

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	20000028 	.word	0x20000028
 8001664:	2001306c 	.word	0x2001306c

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2001306c 	.word	0x2001306c

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff feda 	bl	8001668 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e099      	b.n	80019f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e0:	e00f      	b.n	8001902 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e2:	f7ff fec1 	bl	8001668 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d908      	bls.n	8001902 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2220      	movs	r2, #32
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2203      	movs	r2, #3
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e078      	b.n	80019f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e8      	bne.n	80018e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_DMA_Init+0x158>)
 800191c:	4013      	ands	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b04      	cmp	r3, #4
 800195a:	d107      	bne.n	800196c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4313      	orrs	r3, r2
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2b04      	cmp	r3, #4
 8001994:	d117      	bne.n	80019c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00e      	beq.n	80019c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fb01 	bl	8001fb0 <DMA_CheckFifoParam>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019c2:	2301      	movs	r3, #1
 80019c4:	e016      	b.n	80019f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fab8 	bl	8001f44 <DMA_CalcBaseAndBitshift>
 80019d4:	4603      	mov	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	223f      	movs	r2, #63	; 0x3f
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	f010803f 	.word	0xf010803f

08001a00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Start_IT+0x26>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e040      	b.n	8001aa8 <HAL_DMA_Start_IT+0xa8>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d12f      	bne.n	8001a9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fa4a 	bl	8001ee8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	223f      	movs	r2, #63	; 0x3f
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0216 	orr.w	r2, r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0208 	orr.w	r2, r2, #8
 8001a86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e005      	b.n	8001aa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001abe:	f7ff fdd3 	bl	8001668 <HAL_GetTick>
 8001ac2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d008      	beq.n	8001ae2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e052      	b.n	8001b88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0216 	bic.w	r2, r2, #22
 8001af0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <HAL_DMA_Abort+0x62>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0208 	bic.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0201 	bic.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b32:	e013      	b.n	8001b5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b34:	f7ff fd98 	bl	8001668 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d90c      	bls.n	8001b5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e015      	b.n	8001b88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e4      	bne.n	8001b34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	223f      	movs	r2, #63	; 0x3f
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d004      	beq.n	8001bae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00c      	b.n	8001bc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be0:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <HAL_DMA_IRQHandler+0x258>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a92      	ldr	r2, [pc, #584]	; (8001e30 <HAL_DMA_IRQHandler+0x25c>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0a9b      	lsrs	r3, r3, #10
 8001bec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2208      	movs	r2, #8
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01a      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0204 	bic.w	r2, r2, #4
 8001c26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2201      	movs	r2, #1
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d012      	beq.n	8001c76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	2201      	movs	r2, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	f043 0202 	orr.w	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d012      	beq.n	8001cac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	2204      	movs	r2, #4
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d043      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03c      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2210      	movs	r2, #16
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d018      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d108      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d024      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
 8001d02:	e01f      	b.n	8001d44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01b      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
 8001d14:	e016      	b.n	8001d44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0208 	bic.w	r2, r2, #8
 8001d32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2220      	movs	r2, #32
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 808e 	beq.w	8001e72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8086 	beq.w	8001e72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d136      	bne.n	8001dec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0216 	bic.w	r2, r2, #22
 8001d8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_DMA_IRQHandler+0x1da>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0208 	bic.w	r2, r2, #8
 8001dbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	223f      	movs	r2, #63	; 0x3f
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d07d      	beq.n	8001ede <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	4798      	blx	r3
        }
        return;
 8001dea:	e078      	b.n	8001ede <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01c      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d030      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	e02b      	b.n	8001e72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d027      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
 8001e2a:	e022      	b.n	8001e72 <HAL_DMA_IRQHandler+0x29e>
 8001e2c:	20000020 	.word	0x20000020
 8001e30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0210 	bic.w	r2, r2, #16
 8001e50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d032      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d022      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2205      	movs	r2, #5
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d307      	bcc.n	8001eba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f2      	bne.n	8001e9e <HAL_DMA_IRQHandler+0x2ca>
 8001eb8:	e000      	b.n	8001ebc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001eba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e000      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ede:	bf00      	nop
    }
  }
}
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop

08001ee8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d108      	bne.n	8001f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f26:	e007      	b.n	8001f38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3b10      	subs	r3, #16
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f5e:	4a13      	ldr	r2, [pc, #76]	; (8001fac <DMA_CalcBaseAndBitshift+0x68>)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d909      	bls.n	8001f86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	1d1a      	adds	r2, r3, #4
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	659a      	str	r2, [r3, #88]	; 0x58
 8001f84:	e007      	b.n	8001f96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	aaaaaaab 	.word	0xaaaaaaab
 8001fac:	080064f4 	.word	0x080064f4

08001fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11f      	bne.n	800200a <DMA_CheckFifoParam+0x5a>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d856      	bhi.n	800207e <DMA_CheckFifoParam+0xce>
 8001fd0:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <DMA_CheckFifoParam+0x28>)
 8001fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd6:	bf00      	nop
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001ffb 	.word	0x08001ffb
 8001fe0:	08001fe9 	.word	0x08001fe9
 8001fe4:	0800207f 	.word	0x0800207f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d046      	beq.n	8002082 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff8:	e043      	b.n	8002082 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002002:	d140      	bne.n	8002086 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002008:	e03d      	b.n	8002086 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002012:	d121      	bne.n	8002058 <DMA_CheckFifoParam+0xa8>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d837      	bhi.n	800208a <DMA_CheckFifoParam+0xda>
 800201a:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <DMA_CheckFifoParam+0x70>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	08002031 	.word	0x08002031
 8002024:	08002037 	.word	0x08002037
 8002028:	08002031 	.word	0x08002031
 800202c:	08002049 	.word	0x08002049
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
      break;
 8002034:	e030      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d025      	beq.n	800208e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002046:	e022      	b.n	800208e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002050:	d11f      	bne.n	8002092 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002056:	e01c      	b.n	8002092 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d903      	bls.n	8002066 <DMA_CheckFifoParam+0xb6>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d003      	beq.n	800206c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002064:	e018      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
      break;
 800206a:	e015      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	e00b      	b.n	8002096 <DMA_CheckFifoParam+0xe6>
      break;
 800207e:	bf00      	nop
 8002080:	e00a      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      break;
 8002082:	bf00      	nop
 8002084:	e008      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      break;
 8002086:	bf00      	nop
 8002088:	e006      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
 800208c:	e004      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
 8002090:	e002      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      break;   
 8002092:	bf00      	nop
 8002094:	e000      	b.n	8002098 <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
    }
  } 
  
  return status; 
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e16b      	b.n	800239c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 815a 	bne.w	8002396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d005      	beq.n	80020fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d130      	bne.n	800215c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 0201 	and.w	r2, r3, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d017      	beq.n	8002198 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80b4 	beq.w	8002396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b60      	ldr	r3, [pc, #384]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a5f      	ldr	r2, [pc, #380]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224a:	4a5b      	ldr	r2, [pc, #364]	; (80023b8 <HAL_GPIO_Init+0x310>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_GPIO_Init+0x314>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02b      	beq.n	80022ce <HAL_GPIO_Init+0x226>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HAL_GPIO_Init+0x318>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d025      	beq.n	80022ca <HAL_GPIO_Init+0x222>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_GPIO_Init+0x31c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x21e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x320>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x21a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4e      	ldr	r2, [pc, #312]	; (80023cc <HAL_GPIO_Init+0x324>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x216>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4d      	ldr	r2, [pc, #308]	; (80023d0 <HAL_GPIO_Init+0x328>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x212>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4c      	ldr	r2, [pc, #304]	; (80023d4 <HAL_GPIO_Init+0x32c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_GPIO_Init+0x330>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x20a>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e00e      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022b2:	2308      	movs	r3, #8
 80022b4:	e00c      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00a      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022be:	2304      	movs	r3, #4
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4935      	ldr	r1, [pc, #212]	; (80023b8 <HAL_GPIO_Init+0x310>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <HAL_GPIO_Init+0x334>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002312:	4a32      	ldr	r2, [pc, #200]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_GPIO_Init+0x334>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233c:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_GPIO_Init+0x334>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_GPIO_Init+0x334>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_GPIO_Init+0x334>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f ae90 	bls.w	80020c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40013800 	.word	0x40013800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020800 	.word	0x40020800
 80023c8:	40020c00 	.word	0x40020c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40021400 	.word	0x40021400
 80023d4:	40021800 	.word	0x40021800
 80023d8:	40021c00 	.word	0x40021c00
 80023dc:	40013c00 	.word	0x40013c00

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	619a      	str	r2, [r3, #24]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e264      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002432:	4ba3      	ldr	r3, [pc, #652]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00c      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002446:	2b08      	cmp	r3, #8
 8002448:	d112      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b9d      	ldr	r3, [pc, #628]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b99      	ldr	r3, [pc, #612]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05b      	beq.n	800251c <HAL_RCC_OscConfig+0x108>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d157      	bne.n	800251c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e23f      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x74>
 800247a:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a90      	ldr	r2, [pc, #576]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a8a      	ldr	r2, [pc, #552]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a87      	ldr	r2, [pc, #540]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 80024ac:	4b84      	ldr	r3, [pc, #528]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a83      	ldr	r2, [pc, #524]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a80      	ldr	r2, [pc, #512]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff f8cc 	bl	8001668 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f8c8 	bl	8001668 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	; 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e204      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xc0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff f8b8 	bl	8001668 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff f8b4 	bl	8001668 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1f0      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b6c      	ldr	r3, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0xe8>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c4      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4952      	ldr	r1, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <HAL_RCC_OscConfig+0x2b0>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7ff f86d 	bl	8001668 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff f869 	bl	8001668 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a5      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4940      	ldr	r1, [pc, #256]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_OscConfig+0x2b0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff f84c 	bl	8001668 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d4:	f7ff f848 	bl	8001668 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e184      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d030      	beq.n	8002660 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_RCC_OscConfig+0x2b4>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff f82c 	bl	8001668 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff f828 	bl	8001668 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e164      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x200>
 8002632:	e015      	b.n	8002660 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x2b4>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7ff f815 	bl	8001668 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002642:	f7ff f811 	bl	8001668 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e14d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a0 	beq.w	80027ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <HAL_RCC_OscConfig+0x2b8>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7fe ffd7 	bl	8001668 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	e011      	b.n	80026e2 <HAL_RCC_OscConfig+0x2ce>
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
 80026cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d0:	f7fe ffca 	bl	8001668 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e106      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b85      	ldr	r3, [pc, #532]	; (80028f8 <HAL_RCC_OscConfig+0x4e4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x2f0>
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a80      	ldr	r2, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x32a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x312>
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b78      	ldr	r3, [pc, #480]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a77      	ldr	r2, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x32a>
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a74      	ldr	r2, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b72      	ldr	r3, [pc, #456]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a71      	ldr	r2, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe ff8f 	bl	8001668 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe ff8b 	bl	8001668 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0c5      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b65      	ldr	r3, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x33a>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe ff79 	bl	8001668 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe ff75 	bl	8001668 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0af      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a55      	ldr	r2, [pc, #340]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 809b 	beq.w	80028ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d05c      	beq.n	800287e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d141      	bne.n	8002850 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d2:	f7fe ff49 	bl	8001668 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe ff45 	bl	8001668 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e081      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	3b01      	subs	r3, #1
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	4937      	ldr	r1, [pc, #220]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe ff1e 	bl	8001668 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe ff1a 	bl	8001668 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e056      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x41c>
 800284e:	e04e      	b.n	80028ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe ff07 	bl	8001668 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe ff03 	bl	8001668 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e03f      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x44a>
 800287c:	e037      	b.n	80028ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e032      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_RCC_OscConfig+0x4e8>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d028      	beq.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d121      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d11a      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ba:	4013      	ands	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40007000 	.word	0x40007000
 80028fc:	40023800 	.word	0x40023800
 8002900:	42470060 	.word	0x42470060

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cc      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90c      	bls.n	8002940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b65      	ldr	r3, [pc, #404]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a58      	ldr	r2, [pc, #352]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d044      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e067      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4934      	ldr	r1, [pc, #208]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fe38 	bl	8001668 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe fe34 	bl	8001668 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	; (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fd98 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080064dc 	.word	0x080064dc
 8002ac8:	20000020 	.word	0x20000020
 8002acc:	20000024 	.word	0x20000024

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d00d      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	f200 80bd 	bhi.w	8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b02:	e0b7      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b06:	60bb      	str	r3, [r7, #8]
       break;
 8002b08:	e0b7      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0a:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b0c:	60bb      	str	r3, [r7, #8]
      break;
 8002b0e:	e0b4      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b10:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1a:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d04d      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b58      	ldr	r3, [pc, #352]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	ea02 0800 	and.w	r8, r2, r0
 8002b3e:	ea03 0901 	and.w	r9, r3, r1
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	014b      	lsls	r3, r1, #5
 8002b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b54:	0142      	lsls	r2, r0, #5
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b5e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	018b      	lsls	r3, r1, #6
 8002b6c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b70:	0182      	lsls	r2, r0, #6
 8002b72:	1a12      	subs	r2, r2, r0
 8002b74:	eb63 0301 	sbc.w	r3, r3, r1
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	00d9      	lsls	r1, r3, #3
 8002b82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b86:	00d0      	lsls	r0, r2, #3
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	eb12 0208 	adds.w	r2, r2, r8
 8002b90:	eb43 0309 	adc.w	r3, r3, r9
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	0259      	lsls	r1, r3, #9
 8002b9e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ba2:	0250      	lsls	r0, r2, #9
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	f7fd fb74 	bl	80002a0 <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e04a      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	ea02 0400 	and.w	r4, r2, r0
 8002bda:	ea03 0501 	and.w	r5, r3, r1
 8002bde:	4620      	mov	r0, r4
 8002be0:	4629      	mov	r1, r5
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	014b      	lsls	r3, r1, #5
 8002bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bf0:	0142      	lsls	r2, r0, #5
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	1b00      	subs	r0, r0, r4
 8002bf8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	018b      	lsls	r3, r1, #6
 8002c06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c0a:	0182      	lsls	r2, r0, #6
 8002c0c:	1a12      	subs	r2, r2, r0
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	00d9      	lsls	r1, r3, #3
 8002c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c20:	00d0      	lsls	r0, r2, #3
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	1912      	adds	r2, r2, r4
 8002c28:	eb45 0303 	adc.w	r3, r5, r3
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0299      	lsls	r1, r3, #10
 8002c36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c3a:	0290      	lsls	r0, r2, #10
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f7fd fb28 	bl	80002a0 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	3301      	adds	r3, #1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c76:	60bb      	str	r3, [r7, #8]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	007a1200 	.word	0x007a1200

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000020 	.word	0x20000020

08002cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb0:	f7ff fff0 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0a9b      	lsrs	r3, r3, #10
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4903      	ldr	r1, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	080064ec 	.word	0x080064ec

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd8:	f7ff ffdc 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0b5b      	lsrs	r3, r3, #13
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	080064ec 	.word	0x080064ec

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e041      	b.n	8002d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe f9c4 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fd78 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e046      	b.n	8002e42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <HAL_TIM_Base_Start+0xb4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d022      	beq.n	8002e0c <HAL_TIM_Base_Start+0x70>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d01d      	beq.n	8002e0c <HAL_TIM_Base_Start+0x70>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <HAL_TIM_Base_Start+0xb8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d018      	beq.n	8002e0c <HAL_TIM_Base_Start+0x70>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_TIM_Base_Start+0xbc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <HAL_TIM_Base_Start+0x70>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <HAL_TIM_Base_Start+0xc0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00e      	beq.n	8002e0c <HAL_TIM_Base_Start+0x70>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <HAL_TIM_Base_Start+0xc4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_TIM_Base_Start+0x70>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_TIM_Base_Start+0xc8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d004      	beq.n	8002e0c <HAL_TIM_Base_Start+0x70>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_TIM_Base_Start+0xcc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d111      	bne.n	8002e30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d010      	beq.n	8002e40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	e007      	b.n	8002e40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40010400 	.word	0x40010400
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40001800 	.word	0x40001800

08002e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e041      	b.n	8002f02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f95e 	bl	8001154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f000 fcc0 	bl	8003830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_TIM_PWM_Start+0x24>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e022      	b.n	8002f76 <HAL_TIM_PWM_Start+0x6a>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d109      	bne.n	8002f4a <HAL_TIM_PWM_Start+0x3e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	bf14      	ite	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	2300      	moveq	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	e015      	b.n	8002f76 <HAL_TIM_PWM_Start+0x6a>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d109      	bne.n	8002f64 <HAL_TIM_PWM_Start+0x58>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e008      	b.n	8002f76 <HAL_TIM_PWM_Start+0x6a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e07c      	b.n	8003078 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x82>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f8c:	e013      	b.n	8002fb6 <HAL_TIM_PWM_Start+0xaa>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d104      	bne.n	8002f9e <HAL_TIM_PWM_Start+0x92>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f9c:	e00b      	b.n	8002fb6 <HAL_TIM_PWM_Start+0xaa>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d104      	bne.n	8002fae <HAL_TIM_PWM_Start+0xa2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fac:	e003      	b.n	8002fb6 <HAL_TIM_PWM_Start+0xaa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	6839      	ldr	r1, [r7, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 ff20 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_TIM_PWM_Start+0x174>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_PWM_Start+0xcc>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <HAL_TIM_PWM_Start+0x178>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIM_PWM_Start+0xd0>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_TIM_PWM_Start+0xd2>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a22      	ldr	r2, [pc, #136]	; (8003080 <HAL_TIM_PWM_Start+0x174>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <HAL_TIM_PWM_Start+0x136>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d01d      	beq.n	8003042 <HAL_TIM_PWM_Start+0x136>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_TIM_PWM_Start+0x17c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d018      	beq.n	8003042 <HAL_TIM_PWM_Start+0x136>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_TIM_PWM_Start+0x180>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_TIM_PWM_Start+0x136>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <HAL_TIM_PWM_Start+0x184>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_TIM_PWM_Start+0x136>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a16      	ldr	r2, [pc, #88]	; (8003084 <HAL_TIM_PWM_Start+0x178>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_TIM_PWM_Start+0x136>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_TIM_PWM_Start+0x188>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_TIM_PWM_Start+0x136>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a16      	ldr	r2, [pc, #88]	; (8003098 <HAL_TIM_PWM_Start+0x18c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d111      	bne.n	8003066 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b06      	cmp	r3, #6
 8003052:	d010      	beq.n	8003076 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003064:	e007      	b.n	8003076 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40010000 	.word	0x40010000
 8003084:	40010400 	.word	0x40010400
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40014000 	.word	0x40014000
 8003098:	40001800 	.word	0x40001800

0800309c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_TIM_PWM_Start_IT+0x24>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e022      	b.n	8003106 <HAL_TIM_PWM_Start_IT+0x6a>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d109      	bne.n	80030da <HAL_TIM_PWM_Start_IT+0x3e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	bf14      	ite	ne
 80030d2:	2301      	movne	r3, #1
 80030d4:	2300      	moveq	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e015      	b.n	8003106 <HAL_TIM_PWM_Start_IT+0x6a>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d109      	bne.n	80030f4 <HAL_TIM_PWM_Start_IT+0x58>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e008      	b.n	8003106 <HAL_TIM_PWM_Start_IT+0x6a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0c2      	b.n	8003294 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <HAL_TIM_PWM_Start_IT+0x82>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	e013      	b.n	8003146 <HAL_TIM_PWM_Start_IT+0xaa>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Start_IT+0x92>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312c:	e00b      	b.n	8003146 <HAL_TIM_PWM_Start_IT+0xaa>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d104      	bne.n	800313e <HAL_TIM_PWM_Start_IT+0xa2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800313c:	e003      	b.n	8003146 <HAL_TIM_PWM_Start_IT+0xaa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d841      	bhi.n	80031d0 <HAL_TIM_PWM_Start_IT+0x134>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <HAL_TIM_PWM_Start_IT+0xb8>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003189 	.word	0x08003189
 8003158:	080031d1 	.word	0x080031d1
 800315c:	080031d1 	.word	0x080031d1
 8003160:	080031d1 	.word	0x080031d1
 8003164:	0800319b 	.word	0x0800319b
 8003168:	080031d1 	.word	0x080031d1
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031d1 	.word	0x080031d1
 8003174:	080031ad 	.word	0x080031ad
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031d1 	.word	0x080031d1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031bf 	.word	0x080031bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0202 	orr.w	r2, r2, #2
 8003196:	60da      	str	r2, [r3, #12]
      break;
 8003198:	e01b      	b.n	80031d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0204 	orr.w	r2, r2, #4
 80031a8:	60da      	str	r2, [r3, #12]
      break;
 80031aa:	e012      	b.n	80031d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0208 	orr.w	r2, r2, #8
 80031ba:	60da      	str	r2, [r3, #12]
      break;
 80031bc:	e009      	b.n	80031d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0210 	orr.w	r2, r2, #16
 80031cc:	60da      	str	r2, [r3, #12]
      break;
 80031ce:	e000      	b.n	80031d2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80031d0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	6839      	ldr	r1, [r7, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fe12 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <HAL_TIM_PWM_Start_IT+0x200>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_TIM_PWM_Start_IT+0x158>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <HAL_TIM_PWM_Start_IT+0x204>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <HAL_TIM_PWM_Start_IT+0x15c>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <HAL_TIM_PWM_Start_IT+0x15e>
 80031f8:	2300      	movs	r3, #0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_TIM_PWM_Start_IT+0x200>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_TIM_PWM_Start_IT+0x1c2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d01d      	beq.n	800325e <HAL_TIM_PWM_Start_IT+0x1c2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_TIM_PWM_Start_IT+0x208>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d018      	beq.n	800325e <HAL_TIM_PWM_Start_IT+0x1c2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <HAL_TIM_PWM_Start_IT+0x20c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_TIM_PWM_Start_IT+0x1c2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <HAL_TIM_PWM_Start_IT+0x210>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00e      	beq.n	800325e <HAL_TIM_PWM_Start_IT+0x1c2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <HAL_TIM_PWM_Start_IT+0x204>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_TIM_PWM_Start_IT+0x1c2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_PWM_Start_IT+0x214>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_TIM_PWM_Start_IT+0x1c2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_TIM_PWM_Start_IT+0x218>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d111      	bne.n	8003282 <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d010      	beq.n	8003292 <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003280:	e007      	b.n	8003292 <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40010000 	.word	0x40010000
 80032a0:	40010400 	.word	0x40010400
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40014000 	.word	0x40014000
 80032b4:	40001800 	.word	0x40001800

080032b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d122      	bne.n	8003314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d11b      	bne.n	8003314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0202 	mvn.w	r2, #2
 80032e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fa7a 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fa6c 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fa7d 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b04      	cmp	r3, #4
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0204 	mvn.w	r2, #4
 8003338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa50 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa42 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fa53 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b08      	cmp	r3, #8
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b08      	cmp	r3, #8
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0208 	mvn.w	r2, #8
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2204      	movs	r2, #4
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa26 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa18 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa29 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0210 	mvn.w	r2, #16
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2208      	movs	r2, #8
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f9fc 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f9ee 	bl	80037e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9ff 	bl	8003808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10e      	bne.n	800343c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d107      	bne.n	800343c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0201 	mvn.w	r2, #1
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f9c8 	bl	80037cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b80      	cmp	r3, #128	; 0x80
 8003448:	d10e      	bne.n	8003468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d107      	bne.n	8003468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fd7a 	bl	8003f5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b40      	cmp	r3, #64	; 0x40
 8003474:	d10e      	bne.n	8003494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d107      	bne.n	8003494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9c4 	bl	800381c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0220 	mvn.w	r2, #32
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fd44 	bl	8003f48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034de:	2302      	movs	r3, #2
 80034e0:	e0ac      	b.n	800363c <HAL_TIM_PWM_ConfigChannel+0x174>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	f200 809f 	bhi.w	8003630 <HAL_TIM_PWM_ConfigChannel+0x168>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800352d 	.word	0x0800352d
 80034fc:	08003631 	.word	0x08003631
 8003500:	08003631 	.word	0x08003631
 8003504:	08003631 	.word	0x08003631
 8003508:	0800356d 	.word	0x0800356d
 800350c:	08003631 	.word	0x08003631
 8003510:	08003631 	.word	0x08003631
 8003514:	08003631 	.word	0x08003631
 8003518:	080035af 	.word	0x080035af
 800351c:	08003631 	.word	0x08003631
 8003520:	08003631 	.word	0x08003631
 8003524:	08003631 	.word	0x08003631
 8003528:	080035ef 	.word	0x080035ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fa1c 	bl	8003970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	619a      	str	r2, [r3, #24]
      break;
 800356a:	e062      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa6c 	bl	8003a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	619a      	str	r2, [r3, #24]
      break;
 80035ac:	e041      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fac1 	bl	8003b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0208 	orr.w	r2, r2, #8
 80035c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0204 	bic.w	r2, r2, #4
 80035d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
      break;
 80035ec:	e021      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fb15 	bl	8003c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	61da      	str	r2, [r3, #28]
      break;
 800362e:	e000      	b.n	8003632 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_TIM_ConfigClockSource+0x18>
 8003658:	2302      	movs	r3, #2
 800365a:	e0b3      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x180>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800367a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003694:	d03e      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0xd0>
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369a:	f200 8087 	bhi.w	80037ac <HAL_TIM_ConfigClockSource+0x168>
 800369e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a2:	f000 8085 	beq.w	80037b0 <HAL_TIM_ConfigClockSource+0x16c>
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	d87f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036ac:	2b70      	cmp	r3, #112	; 0x70
 80036ae:	d01a      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xa2>
 80036b0:	2b70      	cmp	r3, #112	; 0x70
 80036b2:	d87b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d050      	beq.n	800375a <HAL_TIM_ConfigClockSource+0x116>
 80036b8:	2b60      	cmp	r3, #96	; 0x60
 80036ba:	d877      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036bc:	2b50      	cmp	r3, #80	; 0x50
 80036be:	d03c      	beq.n	800373a <HAL_TIM_ConfigClockSource+0xf6>
 80036c0:	2b50      	cmp	r3, #80	; 0x50
 80036c2:	d873      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d058      	beq.n	800377a <HAL_TIM_ConfigClockSource+0x136>
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d86f      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d064      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d86b      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d060      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d867      	bhi.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d05c      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d05a      	beq.n	800379a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036e4:	e062      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6899      	ldr	r1, [r3, #8]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f000 fb65 	bl	8003dc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003708:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	609a      	str	r2, [r3, #8]
      break;
 8003712:	e04e      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6899      	ldr	r1, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f000 fb4e 	bl	8003dc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003736:	609a      	str	r2, [r3, #8]
      break;
 8003738:	e03b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	461a      	mov	r2, r3
 8003748:	f000 fac2 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2150      	movs	r1, #80	; 0x50
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fb1b 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003758:	e02b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	461a      	mov	r2, r3
 8003768:	f000 fae1 	bl	8003d2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2160      	movs	r1, #96	; 0x60
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fb0b 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003778:	e01b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	461a      	mov	r2, r3
 8003788:	f000 faa2 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2140      	movs	r1, #64	; 0x40
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fafb 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003798:	e00b      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f000 faf2 	bl	8003d8e <TIM_ITRx_SetConfig>
        break;
 80037aa:	e002      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <TIM_Base_SetConfig+0x114>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d013      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384e:	d00f      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3d      	ldr	r2, [pc, #244]	; (8003948 <TIM_Base_SetConfig+0x118>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00b      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3c      	ldr	r2, [pc, #240]	; (800394c <TIM_Base_SetConfig+0x11c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d007      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <TIM_Base_SetConfig+0x120>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3a      	ldr	r2, [pc, #232]	; (8003954 <TIM_Base_SetConfig+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d108      	bne.n	8003882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2f      	ldr	r2, [pc, #188]	; (8003944 <TIM_Base_SetConfig+0x114>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d027      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <TIM_Base_SetConfig+0x118>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d023      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2b      	ldr	r2, [pc, #172]	; (800394c <TIM_Base_SetConfig+0x11c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01f      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <TIM_Base_SetConfig+0x120>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <TIM_Base_SetConfig+0x124>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d017      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a28      	ldr	r2, [pc, #160]	; (8003958 <TIM_Base_SetConfig+0x128>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a27      	ldr	r2, [pc, #156]	; (800395c <TIM_Base_SetConfig+0x12c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00f      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a26      	ldr	r2, [pc, #152]	; (8003960 <TIM_Base_SetConfig+0x130>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a25      	ldr	r2, [pc, #148]	; (8003964 <TIM_Base_SetConfig+0x134>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <TIM_Base_SetConfig+0x138>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a23      	ldr	r2, [pc, #140]	; (800396c <TIM_Base_SetConfig+0x13c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <TIM_Base_SetConfig+0x114>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0xf8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d103      	bne.n	8003930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	615a      	str	r2, [r3, #20]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40010400 	.word	0x40010400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800
 8003964:	40001800 	.word	0x40001800
 8003968:	40001c00 	.word	0x40001c00
 800396c:	40002000 	.word	0x40002000

08003970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <TIM_OC1_SetConfig+0xd8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC1_SetConfig+0x64>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <TIM_OC1_SetConfig+0xdc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10c      	bne.n	80039ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0308 	bic.w	r3, r3, #8
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <TIM_OC1_SetConfig+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_OC1_SetConfig+0x8e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <TIM_OC1_SetConfig+0xdc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d111      	bne.n	8003a22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40010400 	.word	0x40010400

08003a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f023 0210 	bic.w	r2, r3, #16
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0320 	bic.w	r3, r3, #32
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <TIM_OC2_SetConfig+0xe4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_OC2_SetConfig+0x68>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <TIM_OC2_SetConfig+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10d      	bne.n	8003ad4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <TIM_OC2_SetConfig+0xe4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_OC2_SetConfig+0x94>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <TIM_OC2_SetConfig+0xe8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d113      	bne.n	8003b0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40010400 	.word	0x40010400

08003b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <TIM_OC3_SetConfig+0xe0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_OC3_SetConfig+0x66>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <TIM_OC3_SetConfig+0xe4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10d      	bne.n	8003bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <TIM_OC3_SetConfig+0xe0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_OC3_SetConfig+0x92>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <TIM_OC3_SetConfig+0xe4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d113      	bne.n	8003bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	40010400 	.word	0x40010400

08003c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	031b      	lsls	r3, r3, #12
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <TIM_OC4_SetConfig+0xa4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_OC4_SetConfig+0x68>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <TIM_OC4_SetConfig+0xa8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d109      	bne.n	8003ca0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f023 0201 	bic.w	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 030a 	bic.w	r3, r3, #10
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f023 0210 	bic.w	r2, r3, #16
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	031b      	lsls	r3, r3, #12
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f043 0307 	orr.w	r3, r3, #7
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	021a      	lsls	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e05a      	b.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a21      	ldr	r2, [pc, #132]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a18      	ldr	r2, [pc, #96]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a17      	ldr	r2, [pc, #92]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10c      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40001800 	.word	0x40001800

08003f48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e03f      	b.n	8004002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd f964 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fe19 	bl	8004bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08a      	sub	sp, #40	; 0x28
 800400e:	af02      	add	r7, sp, #8
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	d17c      	bne.n	8004124 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_Transmit+0x2c>
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e075      	b.n	8004126 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UART_Transmit+0x3e>
 8004044:	2302      	movs	r3, #2
 8004046:	e06e      	b.n	8004126 <HAL_UART_Transmit+0x11c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405e:	f7fd fb03 	bl	8001668 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d108      	bne.n	800408c <HAL_UART_Transmit+0x82>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e003      	b.n	8004094 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800409c:	e02a      	b.n	80040f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	; 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fb9a 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e036      	b.n	8004126 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3302      	adds	r3, #2
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e007      	b.n	80040e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3301      	adds	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1cf      	bne.n	800409e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2140      	movs	r1, #64	; 0x40
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fb6a 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b20      	cmp	r3, #32
 8004148:	d153      	bne.n	80041f2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Transmit_DMA+0x26>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e04c      	b.n	80041f4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UART_Transmit_DMA+0x38>
 8004164:	2302      	movs	r3, #2
 8004166:	e045      	b.n	80041f4 <HAL_UART_Transmit_DMA+0xc4>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_UART_Transmit_DMA+0xcc>)
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_UART_Transmit_DMA+0xd0>)
 800419e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <HAL_UART_Transmit_DMA+0xd4>)
 80041a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	2200      	movs	r2, #0
 80041ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3304      	adds	r3, #4
 80041c4:	461a      	mov	r2, r3
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f7fd fc1a 	bl	8001a00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041ec:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	08004615 	.word	0x08004615
 8004200:	08004667 	.word	0x08004667
 8004204:	0800474f 	.word	0x0800474f

08004208 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d11d      	bne.n	800425e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_UART_Receive_DMA+0x26>
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e016      	b.n	8004260 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_UART_Receive_DMA+0x38>
 800423c:	2302      	movs	r3, #2
 800423e:	e00f      	b.n	8004260 <HAL_UART_Receive_DMA+0x58>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	461a      	mov	r2, r3
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fb0f 	bl	8004878 <UART_Start_Receive_DMA>
 800425a:	4603      	mov	r3, r0
 800425c:	e000      	b.n	8004260 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10d      	bne.n	80042ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_UART_IRQHandler+0x52>
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fc03 	bl	8004abe <UART_Receive_IT>
      return;
 80042b8:	e17c      	b.n	80045b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80b1 	beq.w	8004424 <HAL_UART_IRQHandler+0x1bc>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <HAL_UART_IRQHandler+0x70>
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80a6 	beq.w	8004424 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_UART_IRQHandler+0x90>
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_UART_IRQHandler+0xb0>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f043 0202 	orr.w	r2, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_UART_IRQHandler+0xd0>
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	f043 0204 	orr.w	r2, r3, #4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00f      	beq.n	8004362 <HAL_UART_IRQHandler+0xfa>
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_UART_IRQHandler+0xee>
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f043 0208 	orr.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 811f 	beq.w	80045aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_UART_IRQHandler+0x11e>
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fb9c 	bl	8004abe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <HAL_UART_IRQHandler+0x146>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d031      	beq.n	8004412 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fadc 	bl	800496c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d123      	bne.n	800440a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d013      	beq.n	8004402 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	4a77      	ldr	r2, [pc, #476]	; (80045bc <HAL_UART_IRQHandler+0x354>)
 80043e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd fbd2 	bl	8001b90 <HAL_DMA_Abort_IT>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043fc:	4610      	mov	r0, r2
 80043fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	e00e      	b.n	8004420 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8f0 	bl	80045e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e00a      	b.n	8004420 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8ec 	bl	80045e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e006      	b.n	8004420 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8e8 	bl	80045e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800441e:	e0c4      	b.n	80045aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	bf00      	nop
    return;
 8004422:	e0c2      	b.n	80045aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 80a2 	bne.w	8004572 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 809c 	beq.w	8004572 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 8096 	beq.w	8004572 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d14f      	bne.n	800450a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004474:	8a3b      	ldrh	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 8099 	beq.w	80045ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004480:	8a3a      	ldrh	r2, [r7, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	f080 8093 	bcs.w	80045ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8a3a      	ldrh	r2, [r7, #16]
 800448c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004498:	d02b      	beq.n	80044f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0210 	bic.w	r2, r2, #16
 80044e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fd fadf 	bl	8001ab0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f87a 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004508:	e051      	b.n	80045ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004512:	b29b      	uxth	r3, r3
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d047      	beq.n	80045b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004522:	8a7b      	ldrh	r3, [r7, #18]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d044      	beq.n	80045b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004536:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0210 	bic.w	r2, r2, #16
 8004564:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004566:	8a7b      	ldrh	r3, [r7, #18]
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f846 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004570:	e01f      	b.n	80045b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_UART_IRQHandler+0x326>
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa31 	bl	80049ee <UART_Transmit_IT>
    return;
 800458c:	e012      	b.n	80045b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <HAL_UART_IRQHandler+0x34c>
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fa73 	bl	8004a8e <UART_EndTransmit_IT>
    return;
 80045a8:	e004      	b.n	80045b4 <HAL_UART_IRQHandler+0x34c>
    return;
 80045aa:	bf00      	nop
 80045ac:	e002      	b.n	80045b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80045ae:	bf00      	nop
 80045b0:	e000      	b.n	80045b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80045b2:	bf00      	nop
  }
}
 80045b4:	3728      	adds	r7, #40	; 0x28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	080049c7 	.word	0x080049c7

080045c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d113      	bne.n	8004658 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004644:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004654:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004656:	e002      	b.n	800465e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7fc ff63 	bl	8001524 <HAL_UART_TxCpltCallback>
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ffa3 	bl	80045c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d12a      	bne.n	80046f4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d107      	bne.n	80046f4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0210 	bic.w	r2, r2, #16
 80046f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d106      	bne.n	800470a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004700:	4619      	mov	r1, r3
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff ff7a 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004708:	e002      	b.n	8004710 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7fc fe60 	bl	80013d0 <HAL_UART_RxCpltCallback>
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	2b01      	cmp	r3, #1
 800472c:	d108      	bne.n	8004740 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	b29b      	uxth	r3, r3
 8004736:	4619      	mov	r1, r3
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ff5f 	bl	80045fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800473e:	e002      	b.n	8004746 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff ff47 	bl	80045d4 <HAL_UART_RxHalfCpltCallback>
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b21      	cmp	r3, #33	; 0x21
 8004780:	d108      	bne.n	8004794 <UART_DMAError+0x46>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2200      	movs	r2, #0
 800478c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f000 f8d6 	bl	8004940 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b22      	cmp	r3, #34	; 0x22
 80047b4:	d108      	bne.n	80047c8 <UART_DMAError+0x7a>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2200      	movs	r2, #0
 80047c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047c2:	68b8      	ldr	r0, [r7, #8]
 80047c4:	f000 f8d2 	bl	800496c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d4:	68b8      	ldr	r0, [r7, #8]
 80047d6:	f7ff ff07 	bl	80045e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	e02c      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d028      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0x30>
 8004802:	f7fc ff31 	bl	8001668 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	429a      	cmp	r2, r3
 8004810:	d21d      	bcs.n	800484e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004820:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d0c3      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2222      	movs	r2, #34	; 0x22
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	4a23      	ldr	r2, [pc, #140]	; (8004934 <UART_Start_Receive_DMA+0xbc>)
 80048a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	4a22      	ldr	r2, [pc, #136]	; (8004938 <UART_Start_Receive_DMA+0xc0>)
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	4a21      	ldr	r2, [pc, #132]	; (800493c <UART_Start_Receive_DMA+0xc4>)
 80048b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	2200      	movs	r2, #0
 80048be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	f7fd f892 	bl	8001a00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004908:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004928:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	08004683 	.word	0x08004683
 8004938:	08004719 	.word	0x08004719
 800493c:	0800474f 	.word	0x0800474f

08004940 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004956:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004982:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0210 	bic.w	r2, r2, #16
 80049aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff fe01 	bl	80045e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b21      	cmp	r3, #33	; 0x21
 8004a00:	d13e      	bne.n	8004a80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0a:	d114      	bne.n	8004a36 <UART_Transmit_IT+0x48>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d110      	bne.n	8004a36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	1c9a      	adds	r2, r3, #2
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	621a      	str	r2, [r3, #32]
 8004a34:	e008      	b.n	8004a48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6211      	str	r1, [r2, #32]
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4619      	mov	r1, r3
 8004a56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10f      	bne.n	8004a7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc fd38 	bl	8001524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b22      	cmp	r3, #34	; 0x22
 8004ad0:	f040 8087 	bne.w	8004be2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004adc:	d117      	bne.n	8004b0e <UART_Receive_IT+0x50>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d113      	bne.n	8004b0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	1c9a      	adds	r2, r3, #2
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b0c:	e026      	b.n	8004b5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d007      	beq.n	8004b32 <UART_Receive_IT+0x74>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <UART_Receive_IT+0x82>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	e008      	b.n	8004b52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d136      	bne.n	8004bde <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0220 	bic.w	r2, r2, #32
 8004b7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10e      	bne.n	8004bce <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0210 	bic.w	r2, r2, #16
 8004bbe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff fd18 	bl	80045fc <HAL_UARTEx_RxEventCallback>
 8004bcc:	e002      	b.n	8004bd4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fc fbfe 	bl	80013d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e002      	b.n	8004be4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
  }
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	b09f      	sub	sp, #124	; 0x7c
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	68d9      	ldr	r1, [r3, #12]
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	ea40 0301 	orr.w	r3, r0, r1
 8004c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c30:	f021 010c 	bic.w	r1, r1, #12
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4a:	6999      	ldr	r1, [r3, #24]
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	ea40 0301 	orr.w	r3, r0, r1
 8004c54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4bc5      	ldr	r3, [pc, #788]	; (8004f70 <UART_SetConfig+0x384>)
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d004      	beq.n	8004c6a <UART_SetConfig+0x7e>
 8004c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4bc3      	ldr	r3, [pc, #780]	; (8004f74 <UART_SetConfig+0x388>)
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d103      	bne.n	8004c72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c6a:	f7fe f833 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8004c6e:	6778      	str	r0, [r7, #116]	; 0x74
 8004c70:	e002      	b.n	8004c78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c72:	f7fe f81b 	bl	8002cac <HAL_RCC_GetPCLK1Freq>
 8004c76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	f040 80b6 	bne.w	8004df0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c86:	461c      	mov	r4, r3
 8004c88:	f04f 0500 	mov.w	r5, #0
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	462b      	mov	r3, r5
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	6439      	str	r1, [r7, #64]	; 0x40
 8004c94:	415b      	adcs	r3, r3
 8004c96:	647b      	str	r3, [r7, #68]	; 0x44
 8004c98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c9c:	1912      	adds	r2, r2, r4
 8004c9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	00d9      	lsls	r1, r3, #3
 8004cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cb0:	00d0      	lsls	r0, r2, #3
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	1911      	adds	r1, r2, r4
 8004cb8:	6639      	str	r1, [r7, #96]	; 0x60
 8004cba:	416b      	adcs	r3, r5
 8004cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004cd8:	f7fb fae2 	bl	80002a0 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4ba5      	ldr	r3, [pc, #660]	; (8004f78 <UART_SetConfig+0x38c>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	011e      	lsls	r6, r3, #4
 8004cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cec:	461c      	mov	r4, r3
 8004cee:	f04f 0500 	mov.w	r5, #0
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	1891      	adds	r1, r2, r2
 8004cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cfa:	415b      	adcs	r3, r3
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d02:	1912      	adds	r2, r2, r4
 8004d04:	eb45 0303 	adc.w	r3, r5, r3
 8004d08:	f04f 0000 	mov.w	r0, #0
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	00d9      	lsls	r1, r3, #3
 8004d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d16:	00d0      	lsls	r0, r2, #3
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	1911      	adds	r1, r2, r4
 8004d1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d20:	416b      	adcs	r3, r5
 8004d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	1891      	adds	r1, r2, r2
 8004d30:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d32:	415b      	adcs	r3, r3
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d3e:	f7fb faaf 	bl	80002a0 <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4b8c      	ldr	r3, [pc, #560]	; (8004f78 <UART_SetConfig+0x38c>)
 8004d48:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	2164      	movs	r1, #100	; 0x64
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	3332      	adds	r3, #50	; 0x32
 8004d5a:	4a87      	ldr	r2, [pc, #540]	; (8004f78 <UART_SetConfig+0x38c>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d68:	441e      	add	r6, r3
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	1894      	adds	r4, r2, r2
 8004d78:	623c      	str	r4, [r7, #32]
 8004d7a:	415b      	adcs	r3, r3
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d82:	1812      	adds	r2, r2, r0
 8004d84:	eb41 0303 	adc.w	r3, r1, r3
 8004d88:	f04f 0400 	mov.w	r4, #0
 8004d8c:	f04f 0500 	mov.w	r5, #0
 8004d90:	00dd      	lsls	r5, r3, #3
 8004d92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d96:	00d4      	lsls	r4, r2, #3
 8004d98:	4622      	mov	r2, r4
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	1814      	adds	r4, r2, r0
 8004d9e:	653c      	str	r4, [r7, #80]	; 0x50
 8004da0:	414b      	adcs	r3, r1
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	1891      	adds	r1, r2, r2
 8004db0:	61b9      	str	r1, [r7, #24]
 8004db2:	415b      	adcs	r3, r3
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004dbe:	f7fb fa6f 	bl	80002a0 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4b6c      	ldr	r3, [pc, #432]	; (8004f78 <UART_SetConfig+0x38c>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	; 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	3332      	adds	r3, #50	; 0x32
 8004dda:	4a67      	ldr	r2, [pc, #412]	; (8004f78 <UART_SetConfig+0x38c>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f003 0207 	and.w	r2, r3, #7
 8004de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4432      	add	r2, r6
 8004dec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dee:	e0b9      	b.n	8004f64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df2:	461c      	mov	r4, r3
 8004df4:	f04f 0500 	mov.w	r5, #0
 8004df8:	4622      	mov	r2, r4
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	6139      	str	r1, [r7, #16]
 8004e00:	415b      	adcs	r3, r3
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e08:	1912      	adds	r2, r2, r4
 8004e0a:	eb45 0303 	adc.w	r3, r5, r3
 8004e0e:	f04f 0000 	mov.w	r0, #0
 8004e12:	f04f 0100 	mov.w	r1, #0
 8004e16:	00d9      	lsls	r1, r3, #3
 8004e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e1c:	00d0      	lsls	r0, r2, #3
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	eb12 0804 	adds.w	r8, r2, r4
 8004e26:	eb43 0905 	adc.w	r9, r3, r5
 8004e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	008b      	lsls	r3, r1, #2
 8004e3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e42:	0082      	lsls	r2, r0, #2
 8004e44:	4640      	mov	r0, r8
 8004e46:	4649      	mov	r1, r9
 8004e48:	f7fb fa2a 	bl	80002a0 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4b49      	ldr	r3, [pc, #292]	; (8004f78 <UART_SetConfig+0x38c>)
 8004e52:	fba3 2302 	umull	r2, r3, r3, r2
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	011e      	lsls	r6, r3, #4
 8004e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	1894      	adds	r4, r2, r2
 8004e68:	60bc      	str	r4, [r7, #8]
 8004e6a:	415b      	adcs	r3, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e72:	1812      	adds	r2, r2, r0
 8004e74:	eb41 0303 	adc.w	r3, r1, r3
 8004e78:	f04f 0400 	mov.w	r4, #0
 8004e7c:	f04f 0500 	mov.w	r5, #0
 8004e80:	00dd      	lsls	r5, r3, #3
 8004e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e86:	00d4      	lsls	r4, r2, #3
 8004e88:	4622      	mov	r2, r4
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	1814      	adds	r4, r2, r0
 8004e8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e90:	414b      	adcs	r3, r1
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	008b      	lsls	r3, r1, #2
 8004ea8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004eac:	0082      	lsls	r2, r0, #2
 8004eae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004eb2:	f7fb f9f5 	bl	80002a0 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4b2f      	ldr	r3, [pc, #188]	; (8004f78 <UART_SetConfig+0x38c>)
 8004ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	2164      	movs	r1, #100	; 0x64
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	3332      	adds	r3, #50	; 0x32
 8004ece:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <UART_SetConfig+0x38c>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eda:	441e      	add	r6, r3
 8004edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	1894      	adds	r4, r2, r2
 8004eea:	603c      	str	r4, [r7, #0]
 8004eec:	415b      	adcs	r3, r3
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef4:	1812      	adds	r2, r2, r0
 8004ef6:	eb41 0303 	adc.w	r3, r1, r3
 8004efa:	f04f 0400 	mov.w	r4, #0
 8004efe:	f04f 0500 	mov.w	r5, #0
 8004f02:	00dd      	lsls	r5, r3, #3
 8004f04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f08:	00d4      	lsls	r4, r2, #3
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	eb12 0a00 	adds.w	sl, r2, r0
 8004f12:	eb43 0b01 	adc.w	fp, r3, r1
 8004f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f04f 0100 	mov.w	r1, #0
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	008b      	lsls	r3, r1, #2
 8004f2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f2e:	0082      	lsls	r2, r0, #2
 8004f30:	4650      	mov	r0, sl
 8004f32:	4659      	mov	r1, fp
 8004f34:	f7fb f9b4 	bl	80002a0 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <UART_SetConfig+0x38c>)
 8004f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2164      	movs	r1, #100	; 0x64
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	3332      	adds	r3, #50	; 0x32
 8004f50:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <UART_SetConfig+0x38c>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f003 020f 	and.w	r2, r3, #15
 8004f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4432      	add	r2, r6
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	377c      	adds	r7, #124	; 0x7c
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6e:	bf00      	nop
 8004f70:	40011000 	.word	0x40011000
 8004f74:	40011400 	.word	0x40011400
 8004f78:	51eb851f 	.word	0x51eb851f

08004f7c <__errno>:
 8004f7c:	4b01      	ldr	r3, [pc, #4]	; (8004f84 <__errno+0x8>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000002c 	.word	0x2000002c

08004f88 <__libc_init_array>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4d0d      	ldr	r5, [pc, #52]	; (8004fc0 <__libc_init_array+0x38>)
 8004f8c:	4c0d      	ldr	r4, [pc, #52]	; (8004fc4 <__libc_init_array+0x3c>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	2600      	movs	r6, #0
 8004f94:	42a6      	cmp	r6, r4
 8004f96:	d109      	bne.n	8004fac <__libc_init_array+0x24>
 8004f98:	4d0b      	ldr	r5, [pc, #44]	; (8004fc8 <__libc_init_array+0x40>)
 8004f9a:	4c0c      	ldr	r4, [pc, #48]	; (8004fcc <__libc_init_array+0x44>)
 8004f9c:	f001 fa10 	bl	80063c0 <_init>
 8004fa0:	1b64      	subs	r4, r4, r5
 8004fa2:	10a4      	asrs	r4, r4, #2
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	42a6      	cmp	r6, r4
 8004fa8:	d105      	bne.n	8004fb6 <__libc_init_array+0x2e>
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb0:	4798      	blx	r3
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7ee      	b.n	8004f94 <__libc_init_array+0xc>
 8004fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fba:	4798      	blx	r3
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	e7f2      	b.n	8004fa6 <__libc_init_array+0x1e>
 8004fc0:	08006650 	.word	0x08006650
 8004fc4:	08006650 	.word	0x08006650
 8004fc8:	08006650 	.word	0x08006650
 8004fcc:	08006654 	.word	0x08006654

08004fd0 <memset>:
 8004fd0:	4402      	add	r2, r0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d100      	bne.n	8004fda <memset+0xa>
 8004fd8:	4770      	bx	lr
 8004fda:	f803 1b01 	strb.w	r1, [r3], #1
 8004fde:	e7f9      	b.n	8004fd4 <memset+0x4>

08004fe0 <siprintf>:
 8004fe0:	b40e      	push	{r1, r2, r3}
 8004fe2:	b500      	push	{lr}
 8004fe4:	b09c      	sub	sp, #112	; 0x70
 8004fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fe8:	9002      	str	r0, [sp, #8]
 8004fea:	9006      	str	r0, [sp, #24]
 8004fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ff0:	4809      	ldr	r0, [pc, #36]	; (8005018 <siprintf+0x38>)
 8004ff2:	9107      	str	r1, [sp, #28]
 8004ff4:	9104      	str	r1, [sp, #16]
 8004ff6:	4909      	ldr	r1, [pc, #36]	; (800501c <siprintf+0x3c>)
 8004ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ffc:	9105      	str	r1, [sp, #20]
 8004ffe:	6800      	ldr	r0, [r0, #0]
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	a902      	add	r1, sp, #8
 8005004:	f000 f9a6 	bl	8005354 <_svfiprintf_r>
 8005008:	9b02      	ldr	r3, [sp, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	b01c      	add	sp, #112	; 0x70
 8005010:	f85d eb04 	ldr.w	lr, [sp], #4
 8005014:	b003      	add	sp, #12
 8005016:	4770      	bx	lr
 8005018:	2000002c 	.word	0x2000002c
 800501c:	ffff0208 	.word	0xffff0208

08005020 <strtok>:
 8005020:	4b16      	ldr	r3, [pc, #88]	; (800507c <strtok+0x5c>)
 8005022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005024:	681e      	ldr	r6, [r3, #0]
 8005026:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005028:	4605      	mov	r5, r0
 800502a:	b9fc      	cbnz	r4, 800506c <strtok+0x4c>
 800502c:	2050      	movs	r0, #80	; 0x50
 800502e:	9101      	str	r1, [sp, #4]
 8005030:	f000 f882 	bl	8005138 <malloc>
 8005034:	9901      	ldr	r1, [sp, #4]
 8005036:	65b0      	str	r0, [r6, #88]	; 0x58
 8005038:	4602      	mov	r2, r0
 800503a:	b920      	cbnz	r0, 8005046 <strtok+0x26>
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <strtok+0x60>)
 800503e:	4811      	ldr	r0, [pc, #68]	; (8005084 <strtok+0x64>)
 8005040:	2157      	movs	r1, #87	; 0x57
 8005042:	f000 f849 	bl	80050d8 <__assert_func>
 8005046:	e9c0 4400 	strd	r4, r4, [r0]
 800504a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800504e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005052:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005056:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800505a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800505e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005062:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005066:	6184      	str	r4, [r0, #24]
 8005068:	7704      	strb	r4, [r0, #28]
 800506a:	6244      	str	r4, [r0, #36]	; 0x24
 800506c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800506e:	2301      	movs	r3, #1
 8005070:	4628      	mov	r0, r5
 8005072:	b002      	add	sp, #8
 8005074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005078:	f000 b806 	b.w	8005088 <__strtok_r>
 800507c:	2000002c 	.word	0x2000002c
 8005080:	08006500 	.word	0x08006500
 8005084:	08006517 	.word	0x08006517

08005088 <__strtok_r>:
 8005088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508a:	b908      	cbnz	r0, 8005090 <__strtok_r+0x8>
 800508c:	6810      	ldr	r0, [r2, #0]
 800508e:	b188      	cbz	r0, 80050b4 <__strtok_r+0x2c>
 8005090:	4604      	mov	r4, r0
 8005092:	4620      	mov	r0, r4
 8005094:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005098:	460f      	mov	r7, r1
 800509a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800509e:	b91e      	cbnz	r6, 80050a8 <__strtok_r+0x20>
 80050a0:	b965      	cbnz	r5, 80050bc <__strtok_r+0x34>
 80050a2:	6015      	str	r5, [r2, #0]
 80050a4:	4628      	mov	r0, r5
 80050a6:	e005      	b.n	80050b4 <__strtok_r+0x2c>
 80050a8:	42b5      	cmp	r5, r6
 80050aa:	d1f6      	bne.n	800509a <__strtok_r+0x12>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f0      	bne.n	8005092 <__strtok_r+0xa>
 80050b0:	6014      	str	r4, [r2, #0]
 80050b2:	7003      	strb	r3, [r0, #0]
 80050b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b6:	461c      	mov	r4, r3
 80050b8:	e00c      	b.n	80050d4 <__strtok_r+0x4c>
 80050ba:	b915      	cbnz	r5, 80050c2 <__strtok_r+0x3a>
 80050bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050c0:	460e      	mov	r6, r1
 80050c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80050c6:	42ab      	cmp	r3, r5
 80050c8:	d1f7      	bne.n	80050ba <__strtok_r+0x32>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f3      	beq.n	80050b6 <__strtok_r+0x2e>
 80050ce:	2300      	movs	r3, #0
 80050d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80050d4:	6014      	str	r4, [r2, #0]
 80050d6:	e7ed      	b.n	80050b4 <__strtok_r+0x2c>

080050d8 <__assert_func>:
 80050d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050da:	4614      	mov	r4, r2
 80050dc:	461a      	mov	r2, r3
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <__assert_func+0x2c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4605      	mov	r5, r0
 80050e4:	68d8      	ldr	r0, [r3, #12]
 80050e6:	b14c      	cbz	r4, 80050fc <__assert_func+0x24>
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <__assert_func+0x30>)
 80050ea:	9100      	str	r1, [sp, #0]
 80050ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <__assert_func+0x34>)
 80050f2:	462b      	mov	r3, r5
 80050f4:	f000 f80e 	bl	8005114 <fiprintf>
 80050f8:	f000 fdea 	bl	8005cd0 <abort>
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <__assert_func+0x38>)
 80050fe:	461c      	mov	r4, r3
 8005100:	e7f3      	b.n	80050ea <__assert_func+0x12>
 8005102:	bf00      	nop
 8005104:	2000002c 	.word	0x2000002c
 8005108:	08006578 	.word	0x08006578
 800510c:	08006585 	.word	0x08006585
 8005110:	080065b3 	.word	0x080065b3

08005114 <fiprintf>:
 8005114:	b40e      	push	{r1, r2, r3}
 8005116:	b503      	push	{r0, r1, lr}
 8005118:	4601      	mov	r1, r0
 800511a:	ab03      	add	r3, sp, #12
 800511c:	4805      	ldr	r0, [pc, #20]	; (8005134 <fiprintf+0x20>)
 800511e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005122:	6800      	ldr	r0, [r0, #0]
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	f000 fa3f 	bl	80055a8 <_vfiprintf_r>
 800512a:	b002      	add	sp, #8
 800512c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005130:	b003      	add	sp, #12
 8005132:	4770      	bx	lr
 8005134:	2000002c 	.word	0x2000002c

08005138 <malloc>:
 8005138:	4b02      	ldr	r3, [pc, #8]	; (8005144 <malloc+0xc>)
 800513a:	4601      	mov	r1, r0
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	f000 b853 	b.w	80051e8 <_malloc_r>
 8005142:	bf00      	nop
 8005144:	2000002c 	.word	0x2000002c

08005148 <_free_r>:
 8005148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800514a:	2900      	cmp	r1, #0
 800514c:	d048      	beq.n	80051e0 <_free_r+0x98>
 800514e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005152:	9001      	str	r0, [sp, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f1a1 0404 	sub.w	r4, r1, #4
 800515a:	bfb8      	it	lt
 800515c:	18e4      	addlt	r4, r4, r3
 800515e:	f001 f805 	bl	800616c <__malloc_lock>
 8005162:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <_free_r+0x9c>)
 8005164:	9801      	ldr	r0, [sp, #4]
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	4615      	mov	r5, r2
 800516a:	b933      	cbnz	r3, 800517a <_free_r+0x32>
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	6014      	str	r4, [r2, #0]
 8005170:	b003      	add	sp, #12
 8005172:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005176:	f000 bfff 	b.w	8006178 <__malloc_unlock>
 800517a:	42a3      	cmp	r3, r4
 800517c:	d90b      	bls.n	8005196 <_free_r+0x4e>
 800517e:	6821      	ldr	r1, [r4, #0]
 8005180:	1862      	adds	r2, r4, r1
 8005182:	4293      	cmp	r3, r2
 8005184:	bf04      	itt	eq
 8005186:	681a      	ldreq	r2, [r3, #0]
 8005188:	685b      	ldreq	r3, [r3, #4]
 800518a:	6063      	str	r3, [r4, #4]
 800518c:	bf04      	itt	eq
 800518e:	1852      	addeq	r2, r2, r1
 8005190:	6022      	streq	r2, [r4, #0]
 8005192:	602c      	str	r4, [r5, #0]
 8005194:	e7ec      	b.n	8005170 <_free_r+0x28>
 8005196:	461a      	mov	r2, r3
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	b10b      	cbz	r3, 80051a0 <_free_r+0x58>
 800519c:	42a3      	cmp	r3, r4
 800519e:	d9fa      	bls.n	8005196 <_free_r+0x4e>
 80051a0:	6811      	ldr	r1, [r2, #0]
 80051a2:	1855      	adds	r5, r2, r1
 80051a4:	42a5      	cmp	r5, r4
 80051a6:	d10b      	bne.n	80051c0 <_free_r+0x78>
 80051a8:	6824      	ldr	r4, [r4, #0]
 80051aa:	4421      	add	r1, r4
 80051ac:	1854      	adds	r4, r2, r1
 80051ae:	42a3      	cmp	r3, r4
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	d1dd      	bne.n	8005170 <_free_r+0x28>
 80051b4:	681c      	ldr	r4, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	6053      	str	r3, [r2, #4]
 80051ba:	4421      	add	r1, r4
 80051bc:	6011      	str	r1, [r2, #0]
 80051be:	e7d7      	b.n	8005170 <_free_r+0x28>
 80051c0:	d902      	bls.n	80051c8 <_free_r+0x80>
 80051c2:	230c      	movs	r3, #12
 80051c4:	6003      	str	r3, [r0, #0]
 80051c6:	e7d3      	b.n	8005170 <_free_r+0x28>
 80051c8:	6825      	ldr	r5, [r4, #0]
 80051ca:	1961      	adds	r1, r4, r5
 80051cc:	428b      	cmp	r3, r1
 80051ce:	bf04      	itt	eq
 80051d0:	6819      	ldreq	r1, [r3, #0]
 80051d2:	685b      	ldreq	r3, [r3, #4]
 80051d4:	6063      	str	r3, [r4, #4]
 80051d6:	bf04      	itt	eq
 80051d8:	1949      	addeq	r1, r1, r5
 80051da:	6021      	streq	r1, [r4, #0]
 80051dc:	6054      	str	r4, [r2, #4]
 80051de:	e7c7      	b.n	8005170 <_free_r+0x28>
 80051e0:	b003      	add	sp, #12
 80051e2:	bd30      	pop	{r4, r5, pc}
 80051e4:	200000b4 	.word	0x200000b4

080051e8 <_malloc_r>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	1ccd      	adds	r5, r1, #3
 80051ec:	f025 0503 	bic.w	r5, r5, #3
 80051f0:	3508      	adds	r5, #8
 80051f2:	2d0c      	cmp	r5, #12
 80051f4:	bf38      	it	cc
 80051f6:	250c      	movcc	r5, #12
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	db01      	blt.n	8005202 <_malloc_r+0x1a>
 80051fe:	42a9      	cmp	r1, r5
 8005200:	d903      	bls.n	800520a <_malloc_r+0x22>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520a:	f000 ffaf 	bl	800616c <__malloc_lock>
 800520e:	4921      	ldr	r1, [pc, #132]	; (8005294 <_malloc_r+0xac>)
 8005210:	680a      	ldr	r2, [r1, #0]
 8005212:	4614      	mov	r4, r2
 8005214:	b99c      	cbnz	r4, 800523e <_malloc_r+0x56>
 8005216:	4f20      	ldr	r7, [pc, #128]	; (8005298 <_malloc_r+0xb0>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b923      	cbnz	r3, 8005226 <_malloc_r+0x3e>
 800521c:	4621      	mov	r1, r4
 800521e:	4630      	mov	r0, r6
 8005220:	f000 fc86 	bl	8005b30 <_sbrk_r>
 8005224:	6038      	str	r0, [r7, #0]
 8005226:	4629      	mov	r1, r5
 8005228:	4630      	mov	r0, r6
 800522a:	f000 fc81 	bl	8005b30 <_sbrk_r>
 800522e:	1c43      	adds	r3, r0, #1
 8005230:	d123      	bne.n	800527a <_malloc_r+0x92>
 8005232:	230c      	movs	r3, #12
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	4630      	mov	r0, r6
 8005238:	f000 ff9e 	bl	8006178 <__malloc_unlock>
 800523c:	e7e3      	b.n	8005206 <_malloc_r+0x1e>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	1b5b      	subs	r3, r3, r5
 8005242:	d417      	bmi.n	8005274 <_malloc_r+0x8c>
 8005244:	2b0b      	cmp	r3, #11
 8005246:	d903      	bls.n	8005250 <_malloc_r+0x68>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	441c      	add	r4, r3
 800524c:	6025      	str	r5, [r4, #0]
 800524e:	e004      	b.n	800525a <_malloc_r+0x72>
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	42a2      	cmp	r2, r4
 8005254:	bf0c      	ite	eq
 8005256:	600b      	streq	r3, [r1, #0]
 8005258:	6053      	strne	r3, [r2, #4]
 800525a:	4630      	mov	r0, r6
 800525c:	f000 ff8c 	bl	8006178 <__malloc_unlock>
 8005260:	f104 000b 	add.w	r0, r4, #11
 8005264:	1d23      	adds	r3, r4, #4
 8005266:	f020 0007 	bic.w	r0, r0, #7
 800526a:	1ac2      	subs	r2, r0, r3
 800526c:	d0cc      	beq.n	8005208 <_malloc_r+0x20>
 800526e:	1a1b      	subs	r3, r3, r0
 8005270:	50a3      	str	r3, [r4, r2]
 8005272:	e7c9      	b.n	8005208 <_malloc_r+0x20>
 8005274:	4622      	mov	r2, r4
 8005276:	6864      	ldr	r4, [r4, #4]
 8005278:	e7cc      	b.n	8005214 <_malloc_r+0x2c>
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d0e3      	beq.n	800524c <_malloc_r+0x64>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4630      	mov	r0, r6
 8005288:	f000 fc52 	bl	8005b30 <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d1dd      	bne.n	800524c <_malloc_r+0x64>
 8005290:	e7cf      	b.n	8005232 <_malloc_r+0x4a>
 8005292:	bf00      	nop
 8005294:	200000b4 	.word	0x200000b4
 8005298:	200000b8 	.word	0x200000b8

0800529c <__ssputs_r>:
 800529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	688e      	ldr	r6, [r1, #8]
 80052a2:	429e      	cmp	r6, r3
 80052a4:	4682      	mov	sl, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	4690      	mov	r8, r2
 80052aa:	461f      	mov	r7, r3
 80052ac:	d838      	bhi.n	8005320 <__ssputs_r+0x84>
 80052ae:	898a      	ldrh	r2, [r1, #12]
 80052b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052b4:	d032      	beq.n	800531c <__ssputs_r+0x80>
 80052b6:	6825      	ldr	r5, [r4, #0]
 80052b8:	6909      	ldr	r1, [r1, #16]
 80052ba:	eba5 0901 	sub.w	r9, r5, r1
 80052be:	6965      	ldr	r5, [r4, #20]
 80052c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052c8:	3301      	adds	r3, #1
 80052ca:	444b      	add	r3, r9
 80052cc:	106d      	asrs	r5, r5, #1
 80052ce:	429d      	cmp	r5, r3
 80052d0:	bf38      	it	cc
 80052d2:	461d      	movcc	r5, r3
 80052d4:	0553      	lsls	r3, r2, #21
 80052d6:	d531      	bpl.n	800533c <__ssputs_r+0xa0>
 80052d8:	4629      	mov	r1, r5
 80052da:	f7ff ff85 	bl	80051e8 <_malloc_r>
 80052de:	4606      	mov	r6, r0
 80052e0:	b950      	cbnz	r0, 80052f8 <__ssputs_r+0x5c>
 80052e2:	230c      	movs	r3, #12
 80052e4:	f8ca 3000 	str.w	r3, [sl]
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f8:	6921      	ldr	r1, [r4, #16]
 80052fa:	464a      	mov	r2, r9
 80052fc:	f000 ff0e 	bl	800611c <memcpy>
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	81a3      	strh	r3, [r4, #12]
 800530c:	6126      	str	r6, [r4, #16]
 800530e:	6165      	str	r5, [r4, #20]
 8005310:	444e      	add	r6, r9
 8005312:	eba5 0509 	sub.w	r5, r5, r9
 8005316:	6026      	str	r6, [r4, #0]
 8005318:	60a5      	str	r5, [r4, #8]
 800531a:	463e      	mov	r6, r7
 800531c:	42be      	cmp	r6, r7
 800531e:	d900      	bls.n	8005322 <__ssputs_r+0x86>
 8005320:	463e      	mov	r6, r7
 8005322:	4632      	mov	r2, r6
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	4641      	mov	r1, r8
 8005328:	f000 ff06 	bl	8006138 <memmove>
 800532c:	68a3      	ldr	r3, [r4, #8]
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	1b9b      	subs	r3, r3, r6
 8005332:	4432      	add	r2, r6
 8005334:	60a3      	str	r3, [r4, #8]
 8005336:	6022      	str	r2, [r4, #0]
 8005338:	2000      	movs	r0, #0
 800533a:	e7db      	b.n	80052f4 <__ssputs_r+0x58>
 800533c:	462a      	mov	r2, r5
 800533e:	f000 ff21 	bl	8006184 <_realloc_r>
 8005342:	4606      	mov	r6, r0
 8005344:	2800      	cmp	r0, #0
 8005346:	d1e1      	bne.n	800530c <__ssputs_r+0x70>
 8005348:	6921      	ldr	r1, [r4, #16]
 800534a:	4650      	mov	r0, sl
 800534c:	f7ff fefc 	bl	8005148 <_free_r>
 8005350:	e7c7      	b.n	80052e2 <__ssputs_r+0x46>
	...

08005354 <_svfiprintf_r>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4698      	mov	r8, r3
 800535a:	898b      	ldrh	r3, [r1, #12]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	b09d      	sub	sp, #116	; 0x74
 8005360:	4607      	mov	r7, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4614      	mov	r4, r2
 8005366:	d50e      	bpl.n	8005386 <_svfiprintf_r+0x32>
 8005368:	690b      	ldr	r3, [r1, #16]
 800536a:	b963      	cbnz	r3, 8005386 <_svfiprintf_r+0x32>
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	f7ff ff3b 	bl	80051e8 <_malloc_r>
 8005372:	6028      	str	r0, [r5, #0]
 8005374:	6128      	str	r0, [r5, #16]
 8005376:	b920      	cbnz	r0, 8005382 <_svfiprintf_r+0x2e>
 8005378:	230c      	movs	r3, #12
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	e0d1      	b.n	8005526 <_svfiprintf_r+0x1d2>
 8005382:	2340      	movs	r3, #64	; 0x40
 8005384:	616b      	str	r3, [r5, #20]
 8005386:	2300      	movs	r3, #0
 8005388:	9309      	str	r3, [sp, #36]	; 0x24
 800538a:	2320      	movs	r3, #32
 800538c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005390:	f8cd 800c 	str.w	r8, [sp, #12]
 8005394:	2330      	movs	r3, #48	; 0x30
 8005396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005540 <_svfiprintf_r+0x1ec>
 800539a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800539e:	f04f 0901 	mov.w	r9, #1
 80053a2:	4623      	mov	r3, r4
 80053a4:	469a      	mov	sl, r3
 80053a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053aa:	b10a      	cbz	r2, 80053b0 <_svfiprintf_r+0x5c>
 80053ac:	2a25      	cmp	r2, #37	; 0x25
 80053ae:	d1f9      	bne.n	80053a4 <_svfiprintf_r+0x50>
 80053b0:	ebba 0b04 	subs.w	fp, sl, r4
 80053b4:	d00b      	beq.n	80053ce <_svfiprintf_r+0x7a>
 80053b6:	465b      	mov	r3, fp
 80053b8:	4622      	mov	r2, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff ff6d 	bl	800529c <__ssputs_r>
 80053c2:	3001      	adds	r0, #1
 80053c4:	f000 80aa 	beq.w	800551c <_svfiprintf_r+0x1c8>
 80053c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ca:	445a      	add	r2, fp
 80053cc:	9209      	str	r2, [sp, #36]	; 0x24
 80053ce:	f89a 3000 	ldrb.w	r3, [sl]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80a2 	beq.w	800551c <_svfiprintf_r+0x1c8>
 80053d8:	2300      	movs	r3, #0
 80053da:	f04f 32ff 	mov.w	r2, #4294967295
 80053de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e2:	f10a 0a01 	add.w	sl, sl, #1
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ee:	931a      	str	r3, [sp, #104]	; 0x68
 80053f0:	4654      	mov	r4, sl
 80053f2:	2205      	movs	r2, #5
 80053f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f8:	4851      	ldr	r0, [pc, #324]	; (8005540 <_svfiprintf_r+0x1ec>)
 80053fa:	f7fa ff01 	bl	8000200 <memchr>
 80053fe:	9a04      	ldr	r2, [sp, #16]
 8005400:	b9d8      	cbnz	r0, 800543a <_svfiprintf_r+0xe6>
 8005402:	06d0      	lsls	r0, r2, #27
 8005404:	bf44      	itt	mi
 8005406:	2320      	movmi	r3, #32
 8005408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800540c:	0711      	lsls	r1, r2, #28
 800540e:	bf44      	itt	mi
 8005410:	232b      	movmi	r3, #43	; 0x2b
 8005412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005416:	f89a 3000 	ldrb.w	r3, [sl]
 800541a:	2b2a      	cmp	r3, #42	; 0x2a
 800541c:	d015      	beq.n	800544a <_svfiprintf_r+0xf6>
 800541e:	9a07      	ldr	r2, [sp, #28]
 8005420:	4654      	mov	r4, sl
 8005422:	2000      	movs	r0, #0
 8005424:	f04f 0c0a 	mov.w	ip, #10
 8005428:	4621      	mov	r1, r4
 800542a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800542e:	3b30      	subs	r3, #48	; 0x30
 8005430:	2b09      	cmp	r3, #9
 8005432:	d94e      	bls.n	80054d2 <_svfiprintf_r+0x17e>
 8005434:	b1b0      	cbz	r0, 8005464 <_svfiprintf_r+0x110>
 8005436:	9207      	str	r2, [sp, #28]
 8005438:	e014      	b.n	8005464 <_svfiprintf_r+0x110>
 800543a:	eba0 0308 	sub.w	r3, r0, r8
 800543e:	fa09 f303 	lsl.w	r3, r9, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	9304      	str	r3, [sp, #16]
 8005446:	46a2      	mov	sl, r4
 8005448:	e7d2      	b.n	80053f0 <_svfiprintf_r+0x9c>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	9103      	str	r1, [sp, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	bfbb      	ittet	lt
 8005456:	425b      	neglt	r3, r3
 8005458:	f042 0202 	orrlt.w	r2, r2, #2
 800545c:	9307      	strge	r3, [sp, #28]
 800545e:	9307      	strlt	r3, [sp, #28]
 8005460:	bfb8      	it	lt
 8005462:	9204      	strlt	r2, [sp, #16]
 8005464:	7823      	ldrb	r3, [r4, #0]
 8005466:	2b2e      	cmp	r3, #46	; 0x2e
 8005468:	d10c      	bne.n	8005484 <_svfiprintf_r+0x130>
 800546a:	7863      	ldrb	r3, [r4, #1]
 800546c:	2b2a      	cmp	r3, #42	; 0x2a
 800546e:	d135      	bne.n	80054dc <_svfiprintf_r+0x188>
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	9203      	str	r2, [sp, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	bfb8      	it	lt
 800547c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005480:	3402      	adds	r4, #2
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005550 <_svfiprintf_r+0x1fc>
 8005488:	7821      	ldrb	r1, [r4, #0]
 800548a:	2203      	movs	r2, #3
 800548c:	4650      	mov	r0, sl
 800548e:	f7fa feb7 	bl	8000200 <memchr>
 8005492:	b140      	cbz	r0, 80054a6 <_svfiprintf_r+0x152>
 8005494:	2340      	movs	r3, #64	; 0x40
 8005496:	eba0 000a 	sub.w	r0, r0, sl
 800549a:	fa03 f000 	lsl.w	r0, r3, r0
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	4303      	orrs	r3, r0
 80054a2:	3401      	adds	r4, #1
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054aa:	4826      	ldr	r0, [pc, #152]	; (8005544 <_svfiprintf_r+0x1f0>)
 80054ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054b0:	2206      	movs	r2, #6
 80054b2:	f7fa fea5 	bl	8000200 <memchr>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d038      	beq.n	800552c <_svfiprintf_r+0x1d8>
 80054ba:	4b23      	ldr	r3, [pc, #140]	; (8005548 <_svfiprintf_r+0x1f4>)
 80054bc:	bb1b      	cbnz	r3, 8005506 <_svfiprintf_r+0x1b2>
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	3307      	adds	r3, #7
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	3308      	adds	r3, #8
 80054c8:	9303      	str	r3, [sp, #12]
 80054ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054cc:	4433      	add	r3, r6
 80054ce:	9309      	str	r3, [sp, #36]	; 0x24
 80054d0:	e767      	b.n	80053a2 <_svfiprintf_r+0x4e>
 80054d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d6:	460c      	mov	r4, r1
 80054d8:	2001      	movs	r0, #1
 80054da:	e7a5      	b.n	8005428 <_svfiprintf_r+0xd4>
 80054dc:	2300      	movs	r3, #0
 80054de:	3401      	adds	r4, #1
 80054e0:	9305      	str	r3, [sp, #20]
 80054e2:	4619      	mov	r1, r3
 80054e4:	f04f 0c0a 	mov.w	ip, #10
 80054e8:	4620      	mov	r0, r4
 80054ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ee:	3a30      	subs	r2, #48	; 0x30
 80054f0:	2a09      	cmp	r2, #9
 80054f2:	d903      	bls.n	80054fc <_svfiprintf_r+0x1a8>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0c5      	beq.n	8005484 <_svfiprintf_r+0x130>
 80054f8:	9105      	str	r1, [sp, #20]
 80054fa:	e7c3      	b.n	8005484 <_svfiprintf_r+0x130>
 80054fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005500:	4604      	mov	r4, r0
 8005502:	2301      	movs	r3, #1
 8005504:	e7f0      	b.n	80054e8 <_svfiprintf_r+0x194>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <_svfiprintf_r+0x1f8>)
 800550e:	a904      	add	r1, sp, #16
 8005510:	4638      	mov	r0, r7
 8005512:	f3af 8000 	nop.w
 8005516:	1c42      	adds	r2, r0, #1
 8005518:	4606      	mov	r6, r0
 800551a:	d1d6      	bne.n	80054ca <_svfiprintf_r+0x176>
 800551c:	89ab      	ldrh	r3, [r5, #12]
 800551e:	065b      	lsls	r3, r3, #25
 8005520:	f53f af2c 	bmi.w	800537c <_svfiprintf_r+0x28>
 8005524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005526:	b01d      	add	sp, #116	; 0x74
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	ab03      	add	r3, sp, #12
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	462a      	mov	r2, r5
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <_svfiprintf_r+0x1f8>)
 8005534:	a904      	add	r1, sp, #16
 8005536:	4638      	mov	r0, r7
 8005538:	f000 f9d4 	bl	80058e4 <_printf_i>
 800553c:	e7eb      	b.n	8005516 <_svfiprintf_r+0x1c2>
 800553e:	bf00      	nop
 8005540:	080065b4 	.word	0x080065b4
 8005544:	080065be 	.word	0x080065be
 8005548:	00000000 	.word	0x00000000
 800554c:	0800529d 	.word	0x0800529d
 8005550:	080065ba 	.word	0x080065ba

08005554 <__sfputc_r>:
 8005554:	6893      	ldr	r3, [r2, #8]
 8005556:	3b01      	subs	r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	b410      	push	{r4}
 800555c:	6093      	str	r3, [r2, #8]
 800555e:	da08      	bge.n	8005572 <__sfputc_r+0x1e>
 8005560:	6994      	ldr	r4, [r2, #24]
 8005562:	42a3      	cmp	r3, r4
 8005564:	db01      	blt.n	800556a <__sfputc_r+0x16>
 8005566:	290a      	cmp	r1, #10
 8005568:	d103      	bne.n	8005572 <__sfputc_r+0x1e>
 800556a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556e:	f000 baef 	b.w	8005b50 <__swbuf_r>
 8005572:	6813      	ldr	r3, [r2, #0]
 8005574:	1c58      	adds	r0, r3, #1
 8005576:	6010      	str	r0, [r2, #0]
 8005578:	7019      	strb	r1, [r3, #0]
 800557a:	4608      	mov	r0, r1
 800557c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005580:	4770      	bx	lr

08005582 <__sfputs_r>:
 8005582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005584:	4606      	mov	r6, r0
 8005586:	460f      	mov	r7, r1
 8005588:	4614      	mov	r4, r2
 800558a:	18d5      	adds	r5, r2, r3
 800558c:	42ac      	cmp	r4, r5
 800558e:	d101      	bne.n	8005594 <__sfputs_r+0x12>
 8005590:	2000      	movs	r0, #0
 8005592:	e007      	b.n	80055a4 <__sfputs_r+0x22>
 8005594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005598:	463a      	mov	r2, r7
 800559a:	4630      	mov	r0, r6
 800559c:	f7ff ffda 	bl	8005554 <__sfputc_r>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d1f3      	bne.n	800558c <__sfputs_r+0xa>
 80055a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055a8 <_vfiprintf_r>:
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	460d      	mov	r5, r1
 80055ae:	b09d      	sub	sp, #116	; 0x74
 80055b0:	4614      	mov	r4, r2
 80055b2:	4698      	mov	r8, r3
 80055b4:	4606      	mov	r6, r0
 80055b6:	b118      	cbz	r0, 80055c0 <_vfiprintf_r+0x18>
 80055b8:	6983      	ldr	r3, [r0, #24]
 80055ba:	b90b      	cbnz	r3, 80055c0 <_vfiprintf_r+0x18>
 80055bc:	f000 fcaa 	bl	8005f14 <__sinit>
 80055c0:	4b89      	ldr	r3, [pc, #548]	; (80057e8 <_vfiprintf_r+0x240>)
 80055c2:	429d      	cmp	r5, r3
 80055c4:	d11b      	bne.n	80055fe <_vfiprintf_r+0x56>
 80055c6:	6875      	ldr	r5, [r6, #4]
 80055c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055ca:	07d9      	lsls	r1, r3, #31
 80055cc:	d405      	bmi.n	80055da <_vfiprintf_r+0x32>
 80055ce:	89ab      	ldrh	r3, [r5, #12]
 80055d0:	059a      	lsls	r2, r3, #22
 80055d2:	d402      	bmi.n	80055da <_vfiprintf_r+0x32>
 80055d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055d6:	f000 fd3b 	bl	8006050 <__retarget_lock_acquire_recursive>
 80055da:	89ab      	ldrh	r3, [r5, #12]
 80055dc:	071b      	lsls	r3, r3, #28
 80055de:	d501      	bpl.n	80055e4 <_vfiprintf_r+0x3c>
 80055e0:	692b      	ldr	r3, [r5, #16]
 80055e2:	b9eb      	cbnz	r3, 8005620 <_vfiprintf_r+0x78>
 80055e4:	4629      	mov	r1, r5
 80055e6:	4630      	mov	r0, r6
 80055e8:	f000 fb04 	bl	8005bf4 <__swsetup_r>
 80055ec:	b1c0      	cbz	r0, 8005620 <_vfiprintf_r+0x78>
 80055ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055f0:	07dc      	lsls	r4, r3, #31
 80055f2:	d50e      	bpl.n	8005612 <_vfiprintf_r+0x6a>
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	b01d      	add	sp, #116	; 0x74
 80055fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fe:	4b7b      	ldr	r3, [pc, #492]	; (80057ec <_vfiprintf_r+0x244>)
 8005600:	429d      	cmp	r5, r3
 8005602:	d101      	bne.n	8005608 <_vfiprintf_r+0x60>
 8005604:	68b5      	ldr	r5, [r6, #8]
 8005606:	e7df      	b.n	80055c8 <_vfiprintf_r+0x20>
 8005608:	4b79      	ldr	r3, [pc, #484]	; (80057f0 <_vfiprintf_r+0x248>)
 800560a:	429d      	cmp	r5, r3
 800560c:	bf08      	it	eq
 800560e:	68f5      	ldreq	r5, [r6, #12]
 8005610:	e7da      	b.n	80055c8 <_vfiprintf_r+0x20>
 8005612:	89ab      	ldrh	r3, [r5, #12]
 8005614:	0598      	lsls	r0, r3, #22
 8005616:	d4ed      	bmi.n	80055f4 <_vfiprintf_r+0x4c>
 8005618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800561a:	f000 fd1a 	bl	8006052 <__retarget_lock_release_recursive>
 800561e:	e7e9      	b.n	80055f4 <_vfiprintf_r+0x4c>
 8005620:	2300      	movs	r3, #0
 8005622:	9309      	str	r3, [sp, #36]	; 0x24
 8005624:	2320      	movs	r3, #32
 8005626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800562a:	f8cd 800c 	str.w	r8, [sp, #12]
 800562e:	2330      	movs	r3, #48	; 0x30
 8005630:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80057f4 <_vfiprintf_r+0x24c>
 8005634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005638:	f04f 0901 	mov.w	r9, #1
 800563c:	4623      	mov	r3, r4
 800563e:	469a      	mov	sl, r3
 8005640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005644:	b10a      	cbz	r2, 800564a <_vfiprintf_r+0xa2>
 8005646:	2a25      	cmp	r2, #37	; 0x25
 8005648:	d1f9      	bne.n	800563e <_vfiprintf_r+0x96>
 800564a:	ebba 0b04 	subs.w	fp, sl, r4
 800564e:	d00b      	beq.n	8005668 <_vfiprintf_r+0xc0>
 8005650:	465b      	mov	r3, fp
 8005652:	4622      	mov	r2, r4
 8005654:	4629      	mov	r1, r5
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff ff93 	bl	8005582 <__sfputs_r>
 800565c:	3001      	adds	r0, #1
 800565e:	f000 80aa 	beq.w	80057b6 <_vfiprintf_r+0x20e>
 8005662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005664:	445a      	add	r2, fp
 8005666:	9209      	str	r2, [sp, #36]	; 0x24
 8005668:	f89a 3000 	ldrb.w	r3, [sl]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a2 	beq.w	80057b6 <_vfiprintf_r+0x20e>
 8005672:	2300      	movs	r3, #0
 8005674:	f04f 32ff 	mov.w	r2, #4294967295
 8005678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800567c:	f10a 0a01 	add.w	sl, sl, #1
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005688:	931a      	str	r3, [sp, #104]	; 0x68
 800568a:	4654      	mov	r4, sl
 800568c:	2205      	movs	r2, #5
 800568e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005692:	4858      	ldr	r0, [pc, #352]	; (80057f4 <_vfiprintf_r+0x24c>)
 8005694:	f7fa fdb4 	bl	8000200 <memchr>
 8005698:	9a04      	ldr	r2, [sp, #16]
 800569a:	b9d8      	cbnz	r0, 80056d4 <_vfiprintf_r+0x12c>
 800569c:	06d1      	lsls	r1, r2, #27
 800569e:	bf44      	itt	mi
 80056a0:	2320      	movmi	r3, #32
 80056a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a6:	0713      	lsls	r3, r2, #28
 80056a8:	bf44      	itt	mi
 80056aa:	232b      	movmi	r3, #43	; 0x2b
 80056ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b0:	f89a 3000 	ldrb.w	r3, [sl]
 80056b4:	2b2a      	cmp	r3, #42	; 0x2a
 80056b6:	d015      	beq.n	80056e4 <_vfiprintf_r+0x13c>
 80056b8:	9a07      	ldr	r2, [sp, #28]
 80056ba:	4654      	mov	r4, sl
 80056bc:	2000      	movs	r0, #0
 80056be:	f04f 0c0a 	mov.w	ip, #10
 80056c2:	4621      	mov	r1, r4
 80056c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056c8:	3b30      	subs	r3, #48	; 0x30
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	d94e      	bls.n	800576c <_vfiprintf_r+0x1c4>
 80056ce:	b1b0      	cbz	r0, 80056fe <_vfiprintf_r+0x156>
 80056d0:	9207      	str	r2, [sp, #28]
 80056d2:	e014      	b.n	80056fe <_vfiprintf_r+0x156>
 80056d4:	eba0 0308 	sub.w	r3, r0, r8
 80056d8:	fa09 f303 	lsl.w	r3, r9, r3
 80056dc:	4313      	orrs	r3, r2
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	46a2      	mov	sl, r4
 80056e2:	e7d2      	b.n	800568a <_vfiprintf_r+0xe2>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	1d19      	adds	r1, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	9103      	str	r1, [sp, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfbb      	ittet	lt
 80056f0:	425b      	neglt	r3, r3
 80056f2:	f042 0202 	orrlt.w	r2, r2, #2
 80056f6:	9307      	strge	r3, [sp, #28]
 80056f8:	9307      	strlt	r3, [sp, #28]
 80056fa:	bfb8      	it	lt
 80056fc:	9204      	strlt	r2, [sp, #16]
 80056fe:	7823      	ldrb	r3, [r4, #0]
 8005700:	2b2e      	cmp	r3, #46	; 0x2e
 8005702:	d10c      	bne.n	800571e <_vfiprintf_r+0x176>
 8005704:	7863      	ldrb	r3, [r4, #1]
 8005706:	2b2a      	cmp	r3, #42	; 0x2a
 8005708:	d135      	bne.n	8005776 <_vfiprintf_r+0x1ce>
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	1d1a      	adds	r2, r3, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	9203      	str	r2, [sp, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	bfb8      	it	lt
 8005716:	f04f 33ff 	movlt.w	r3, #4294967295
 800571a:	3402      	adds	r4, #2
 800571c:	9305      	str	r3, [sp, #20]
 800571e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005804 <_vfiprintf_r+0x25c>
 8005722:	7821      	ldrb	r1, [r4, #0]
 8005724:	2203      	movs	r2, #3
 8005726:	4650      	mov	r0, sl
 8005728:	f7fa fd6a 	bl	8000200 <memchr>
 800572c:	b140      	cbz	r0, 8005740 <_vfiprintf_r+0x198>
 800572e:	2340      	movs	r3, #64	; 0x40
 8005730:	eba0 000a 	sub.w	r0, r0, sl
 8005734:	fa03 f000 	lsl.w	r0, r3, r0
 8005738:	9b04      	ldr	r3, [sp, #16]
 800573a:	4303      	orrs	r3, r0
 800573c:	3401      	adds	r4, #1
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005744:	482c      	ldr	r0, [pc, #176]	; (80057f8 <_vfiprintf_r+0x250>)
 8005746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800574a:	2206      	movs	r2, #6
 800574c:	f7fa fd58 	bl	8000200 <memchr>
 8005750:	2800      	cmp	r0, #0
 8005752:	d03f      	beq.n	80057d4 <_vfiprintf_r+0x22c>
 8005754:	4b29      	ldr	r3, [pc, #164]	; (80057fc <_vfiprintf_r+0x254>)
 8005756:	bb1b      	cbnz	r3, 80057a0 <_vfiprintf_r+0x1f8>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	3307      	adds	r3, #7
 800575c:	f023 0307 	bic.w	r3, r3, #7
 8005760:	3308      	adds	r3, #8
 8005762:	9303      	str	r3, [sp, #12]
 8005764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005766:	443b      	add	r3, r7
 8005768:	9309      	str	r3, [sp, #36]	; 0x24
 800576a:	e767      	b.n	800563c <_vfiprintf_r+0x94>
 800576c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005770:	460c      	mov	r4, r1
 8005772:	2001      	movs	r0, #1
 8005774:	e7a5      	b.n	80056c2 <_vfiprintf_r+0x11a>
 8005776:	2300      	movs	r3, #0
 8005778:	3401      	adds	r4, #1
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 0c0a 	mov.w	ip, #10
 8005782:	4620      	mov	r0, r4
 8005784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005788:	3a30      	subs	r2, #48	; 0x30
 800578a:	2a09      	cmp	r2, #9
 800578c:	d903      	bls.n	8005796 <_vfiprintf_r+0x1ee>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0c5      	beq.n	800571e <_vfiprintf_r+0x176>
 8005792:	9105      	str	r1, [sp, #20]
 8005794:	e7c3      	b.n	800571e <_vfiprintf_r+0x176>
 8005796:	fb0c 2101 	mla	r1, ip, r1, r2
 800579a:	4604      	mov	r4, r0
 800579c:	2301      	movs	r3, #1
 800579e:	e7f0      	b.n	8005782 <_vfiprintf_r+0x1da>
 80057a0:	ab03      	add	r3, sp, #12
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	462a      	mov	r2, r5
 80057a6:	4b16      	ldr	r3, [pc, #88]	; (8005800 <_vfiprintf_r+0x258>)
 80057a8:	a904      	add	r1, sp, #16
 80057aa:	4630      	mov	r0, r6
 80057ac:	f3af 8000 	nop.w
 80057b0:	4607      	mov	r7, r0
 80057b2:	1c78      	adds	r0, r7, #1
 80057b4:	d1d6      	bne.n	8005764 <_vfiprintf_r+0x1bc>
 80057b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b8:	07d9      	lsls	r1, r3, #31
 80057ba:	d405      	bmi.n	80057c8 <_vfiprintf_r+0x220>
 80057bc:	89ab      	ldrh	r3, [r5, #12]
 80057be:	059a      	lsls	r2, r3, #22
 80057c0:	d402      	bmi.n	80057c8 <_vfiprintf_r+0x220>
 80057c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c4:	f000 fc45 	bl	8006052 <__retarget_lock_release_recursive>
 80057c8:	89ab      	ldrh	r3, [r5, #12]
 80057ca:	065b      	lsls	r3, r3, #25
 80057cc:	f53f af12 	bmi.w	80055f4 <_vfiprintf_r+0x4c>
 80057d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d2:	e711      	b.n	80055f8 <_vfiprintf_r+0x50>
 80057d4:	ab03      	add	r3, sp, #12
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	462a      	mov	r2, r5
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <_vfiprintf_r+0x258>)
 80057dc:	a904      	add	r1, sp, #16
 80057de:	4630      	mov	r0, r6
 80057e0:	f000 f880 	bl	80058e4 <_printf_i>
 80057e4:	e7e4      	b.n	80057b0 <_vfiprintf_r+0x208>
 80057e6:	bf00      	nop
 80057e8:	08006608 	.word	0x08006608
 80057ec:	08006628 	.word	0x08006628
 80057f0:	080065e8 	.word	0x080065e8
 80057f4:	080065b4 	.word	0x080065b4
 80057f8:	080065be 	.word	0x080065be
 80057fc:	00000000 	.word	0x00000000
 8005800:	08005583 	.word	0x08005583
 8005804:	080065ba 	.word	0x080065ba

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4616      	mov	r6, r2
 800580e:	4699      	mov	r9, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005818:	4293      	cmp	r3, r2
 800581a:	bfb8      	it	lt
 800581c:	4613      	movlt	r3, r2
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005824:	4607      	mov	r7, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b10a      	cbz	r2, 800582e <_printf_common+0x26>
 800582a:	3301      	adds	r3, #1
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0699      	lsls	r1, r3, #26
 8005832:	bf42      	ittt	mi
 8005834:	6833      	ldrmi	r3, [r6, #0]
 8005836:	3302      	addmi	r3, #2
 8005838:	6033      	strmi	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d106      	bne.n	8005850 <_printf_common+0x48>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ab      	cmp	r3, r5
 800584e:	dc26      	bgt.n	800589e <_printf_common+0x96>
 8005850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005854:	1e13      	subs	r3, r2, #0
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	2301      	movne	r3, #1
 800585c:	0692      	lsls	r2, r2, #26
 800585e:	d42b      	bmi.n	80058b8 <_printf_common+0xb0>
 8005860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005864:	4649      	mov	r1, r9
 8005866:	4638      	mov	r0, r7
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d01e      	beq.n	80058ac <_printf_common+0xa4>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	68e5      	ldr	r5, [r4, #12]
 8005872:	6832      	ldr	r2, [r6, #0]
 8005874:	f003 0306 	and.w	r3, r3, #6
 8005878:	2b04      	cmp	r3, #4
 800587a:	bf08      	it	eq
 800587c:	1aad      	subeq	r5, r5, r2
 800587e:	68a3      	ldr	r3, [r4, #8]
 8005880:	6922      	ldr	r2, [r4, #16]
 8005882:	bf0c      	ite	eq
 8005884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005888:	2500      	movne	r5, #0
 800588a:	4293      	cmp	r3, r2
 800588c:	bfc4      	itt	gt
 800588e:	1a9b      	subgt	r3, r3, r2
 8005890:	18ed      	addgt	r5, r5, r3
 8005892:	2600      	movs	r6, #0
 8005894:	341a      	adds	r4, #26
 8005896:	42b5      	cmp	r5, r6
 8005898:	d11a      	bne.n	80058d0 <_printf_common+0xc8>
 800589a:	2000      	movs	r0, #0
 800589c:	e008      	b.n	80058b0 <_printf_common+0xa8>
 800589e:	2301      	movs	r3, #1
 80058a0:	4652      	mov	r2, sl
 80058a2:	4649      	mov	r1, r9
 80058a4:	4638      	mov	r0, r7
 80058a6:	47c0      	blx	r8
 80058a8:	3001      	adds	r0, #1
 80058aa:	d103      	bne.n	80058b4 <_printf_common+0xac>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	3501      	adds	r5, #1
 80058b6:	e7c6      	b.n	8005846 <_printf_common+0x3e>
 80058b8:	18e1      	adds	r1, r4, r3
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	2030      	movs	r0, #48	; 0x30
 80058be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c2:	4422      	add	r2, r4
 80058c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058cc:	3302      	adds	r3, #2
 80058ce:	e7c7      	b.n	8005860 <_printf_common+0x58>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4622      	mov	r2, r4
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d0e6      	beq.n	80058ac <_printf_common+0xa4>
 80058de:	3601      	adds	r6, #1
 80058e0:	e7d9      	b.n	8005896 <_printf_common+0x8e>
	...

080058e4 <_printf_i>:
 80058e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	4691      	mov	r9, r2
 80058ec:	7e27      	ldrb	r7, [r4, #24]
 80058ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058f0:	2f78      	cmp	r7, #120	; 0x78
 80058f2:	4680      	mov	r8, r0
 80058f4:	469a      	mov	sl, r3
 80058f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058fa:	d807      	bhi.n	800590c <_printf_i+0x28>
 80058fc:	2f62      	cmp	r7, #98	; 0x62
 80058fe:	d80a      	bhi.n	8005916 <_printf_i+0x32>
 8005900:	2f00      	cmp	r7, #0
 8005902:	f000 80d8 	beq.w	8005ab6 <_printf_i+0x1d2>
 8005906:	2f58      	cmp	r7, #88	; 0x58
 8005908:	f000 80a3 	beq.w	8005a52 <_printf_i+0x16e>
 800590c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005914:	e03a      	b.n	800598c <_printf_i+0xa8>
 8005916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591a:	2b15      	cmp	r3, #21
 800591c:	d8f6      	bhi.n	800590c <_printf_i+0x28>
 800591e:	a001      	add	r0, pc, #4	; (adr r0, 8005924 <_printf_i+0x40>)
 8005920:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005924:	0800597d 	.word	0x0800597d
 8005928:	08005991 	.word	0x08005991
 800592c:	0800590d 	.word	0x0800590d
 8005930:	0800590d 	.word	0x0800590d
 8005934:	0800590d 	.word	0x0800590d
 8005938:	0800590d 	.word	0x0800590d
 800593c:	08005991 	.word	0x08005991
 8005940:	0800590d 	.word	0x0800590d
 8005944:	0800590d 	.word	0x0800590d
 8005948:	0800590d 	.word	0x0800590d
 800594c:	0800590d 	.word	0x0800590d
 8005950:	08005a9d 	.word	0x08005a9d
 8005954:	080059c1 	.word	0x080059c1
 8005958:	08005a7f 	.word	0x08005a7f
 800595c:	0800590d 	.word	0x0800590d
 8005960:	0800590d 	.word	0x0800590d
 8005964:	08005abf 	.word	0x08005abf
 8005968:	0800590d 	.word	0x0800590d
 800596c:	080059c1 	.word	0x080059c1
 8005970:	0800590d 	.word	0x0800590d
 8005974:	0800590d 	.word	0x0800590d
 8005978:	08005a87 	.word	0x08005a87
 800597c:	680b      	ldr	r3, [r1, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	600a      	str	r2, [r1, #0]
 8005984:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	2301      	movs	r3, #1
 800598e:	e0a3      	b.n	8005ad8 <_printf_i+0x1f4>
 8005990:	6825      	ldr	r5, [r4, #0]
 8005992:	6808      	ldr	r0, [r1, #0]
 8005994:	062e      	lsls	r6, r5, #24
 8005996:	f100 0304 	add.w	r3, r0, #4
 800599a:	d50a      	bpl.n	80059b2 <_printf_i+0xce>
 800599c:	6805      	ldr	r5, [r0, #0]
 800599e:	600b      	str	r3, [r1, #0]
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	da03      	bge.n	80059ac <_printf_i+0xc8>
 80059a4:	232d      	movs	r3, #45	; 0x2d
 80059a6:	426d      	negs	r5, r5
 80059a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ac:	485e      	ldr	r0, [pc, #376]	; (8005b28 <_printf_i+0x244>)
 80059ae:	230a      	movs	r3, #10
 80059b0:	e019      	b.n	80059e6 <_printf_i+0x102>
 80059b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059b6:	6805      	ldr	r5, [r0, #0]
 80059b8:	600b      	str	r3, [r1, #0]
 80059ba:	bf18      	it	ne
 80059bc:	b22d      	sxthne	r5, r5
 80059be:	e7ef      	b.n	80059a0 <_printf_i+0xbc>
 80059c0:	680b      	ldr	r3, [r1, #0]
 80059c2:	6825      	ldr	r5, [r4, #0]
 80059c4:	1d18      	adds	r0, r3, #4
 80059c6:	6008      	str	r0, [r1, #0]
 80059c8:	0628      	lsls	r0, r5, #24
 80059ca:	d501      	bpl.n	80059d0 <_printf_i+0xec>
 80059cc:	681d      	ldr	r5, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <_printf_i+0xf2>
 80059d0:	0669      	lsls	r1, r5, #25
 80059d2:	d5fb      	bpl.n	80059cc <_printf_i+0xe8>
 80059d4:	881d      	ldrh	r5, [r3, #0]
 80059d6:	4854      	ldr	r0, [pc, #336]	; (8005b28 <_printf_i+0x244>)
 80059d8:	2f6f      	cmp	r7, #111	; 0x6f
 80059da:	bf0c      	ite	eq
 80059dc:	2308      	moveq	r3, #8
 80059de:	230a      	movne	r3, #10
 80059e0:	2100      	movs	r1, #0
 80059e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e6:	6866      	ldr	r6, [r4, #4]
 80059e8:	60a6      	str	r6, [r4, #8]
 80059ea:	2e00      	cmp	r6, #0
 80059ec:	bfa2      	ittt	ge
 80059ee:	6821      	ldrge	r1, [r4, #0]
 80059f0:	f021 0104 	bicge.w	r1, r1, #4
 80059f4:	6021      	strge	r1, [r4, #0]
 80059f6:	b90d      	cbnz	r5, 80059fc <_printf_i+0x118>
 80059f8:	2e00      	cmp	r6, #0
 80059fa:	d04d      	beq.n	8005a98 <_printf_i+0x1b4>
 80059fc:	4616      	mov	r6, r2
 80059fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a02:	fb03 5711 	mls	r7, r3, r1, r5
 8005a06:	5dc7      	ldrb	r7, [r0, r7]
 8005a08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a0c:	462f      	mov	r7, r5
 8005a0e:	42bb      	cmp	r3, r7
 8005a10:	460d      	mov	r5, r1
 8005a12:	d9f4      	bls.n	80059fe <_printf_i+0x11a>
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d10b      	bne.n	8005a30 <_printf_i+0x14c>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	07df      	lsls	r7, r3, #31
 8005a1c:	d508      	bpl.n	8005a30 <_printf_i+0x14c>
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	6861      	ldr	r1, [r4, #4]
 8005a22:	4299      	cmp	r1, r3
 8005a24:	bfde      	ittt	le
 8005a26:	2330      	movle	r3, #48	; 0x30
 8005a28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a30:	1b92      	subs	r2, r2, r6
 8005a32:	6122      	str	r2, [r4, #16]
 8005a34:	f8cd a000 	str.w	sl, [sp]
 8005a38:	464b      	mov	r3, r9
 8005a3a:	aa03      	add	r2, sp, #12
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4640      	mov	r0, r8
 8005a40:	f7ff fee2 	bl	8005808 <_printf_common>
 8005a44:	3001      	adds	r0, #1
 8005a46:	d14c      	bne.n	8005ae2 <_printf_i+0x1fe>
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4c:	b004      	add	sp, #16
 8005a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a52:	4835      	ldr	r0, [pc, #212]	; (8005b28 <_printf_i+0x244>)
 8005a54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	680e      	ldr	r6, [r1, #0]
 8005a5c:	061f      	lsls	r7, r3, #24
 8005a5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a62:	600e      	str	r6, [r1, #0]
 8005a64:	d514      	bpl.n	8005a90 <_printf_i+0x1ac>
 8005a66:	07d9      	lsls	r1, r3, #31
 8005a68:	bf44      	itt	mi
 8005a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a6e:	6023      	strmi	r3, [r4, #0]
 8005a70:	b91d      	cbnz	r5, 8005a7a <_printf_i+0x196>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	f023 0320 	bic.w	r3, r3, #32
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	e7b0      	b.n	80059e0 <_printf_i+0xfc>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	f043 0320 	orr.w	r3, r3, #32
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	2378      	movs	r3, #120	; 0x78
 8005a88:	4828      	ldr	r0, [pc, #160]	; (8005b2c <_printf_i+0x248>)
 8005a8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a8e:	e7e3      	b.n	8005a58 <_printf_i+0x174>
 8005a90:	065e      	lsls	r6, r3, #25
 8005a92:	bf48      	it	mi
 8005a94:	b2ad      	uxthmi	r5, r5
 8005a96:	e7e6      	b.n	8005a66 <_printf_i+0x182>
 8005a98:	4616      	mov	r6, r2
 8005a9a:	e7bb      	b.n	8005a14 <_printf_i+0x130>
 8005a9c:	680b      	ldr	r3, [r1, #0]
 8005a9e:	6826      	ldr	r6, [r4, #0]
 8005aa0:	6960      	ldr	r0, [r4, #20]
 8005aa2:	1d1d      	adds	r5, r3, #4
 8005aa4:	600d      	str	r5, [r1, #0]
 8005aa6:	0635      	lsls	r5, r6, #24
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	d501      	bpl.n	8005ab0 <_printf_i+0x1cc>
 8005aac:	6018      	str	r0, [r3, #0]
 8005aae:	e002      	b.n	8005ab6 <_printf_i+0x1d2>
 8005ab0:	0671      	lsls	r1, r6, #25
 8005ab2:	d5fb      	bpl.n	8005aac <_printf_i+0x1c8>
 8005ab4:	8018      	strh	r0, [r3, #0]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	4616      	mov	r6, r2
 8005abc:	e7ba      	b.n	8005a34 <_printf_i+0x150>
 8005abe:	680b      	ldr	r3, [r1, #0]
 8005ac0:	1d1a      	adds	r2, r3, #4
 8005ac2:	600a      	str	r2, [r1, #0]
 8005ac4:	681e      	ldr	r6, [r3, #0]
 8005ac6:	6862      	ldr	r2, [r4, #4]
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7fa fb98 	bl	8000200 <memchr>
 8005ad0:	b108      	cbz	r0, 8005ad6 <_printf_i+0x1f2>
 8005ad2:	1b80      	subs	r0, r0, r6
 8005ad4:	6060      	str	r0, [r4, #4]
 8005ad6:	6863      	ldr	r3, [r4, #4]
 8005ad8:	6123      	str	r3, [r4, #16]
 8005ada:	2300      	movs	r3, #0
 8005adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae0:	e7a8      	b.n	8005a34 <_printf_i+0x150>
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47d0      	blx	sl
 8005aec:	3001      	adds	r0, #1
 8005aee:	d0ab      	beq.n	8005a48 <_printf_i+0x164>
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	079b      	lsls	r3, r3, #30
 8005af4:	d413      	bmi.n	8005b1e <_printf_i+0x23a>
 8005af6:	68e0      	ldr	r0, [r4, #12]
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	4298      	cmp	r0, r3
 8005afc:	bfb8      	it	lt
 8005afe:	4618      	movlt	r0, r3
 8005b00:	e7a4      	b.n	8005a4c <_printf_i+0x168>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4632      	mov	r2, r6
 8005b06:	4649      	mov	r1, r9
 8005b08:	4640      	mov	r0, r8
 8005b0a:	47d0      	blx	sl
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d09b      	beq.n	8005a48 <_printf_i+0x164>
 8005b10:	3501      	adds	r5, #1
 8005b12:	68e3      	ldr	r3, [r4, #12]
 8005b14:	9903      	ldr	r1, [sp, #12]
 8005b16:	1a5b      	subs	r3, r3, r1
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	dcf2      	bgt.n	8005b02 <_printf_i+0x21e>
 8005b1c:	e7eb      	b.n	8005af6 <_printf_i+0x212>
 8005b1e:	2500      	movs	r5, #0
 8005b20:	f104 0619 	add.w	r6, r4, #25
 8005b24:	e7f5      	b.n	8005b12 <_printf_i+0x22e>
 8005b26:	bf00      	nop
 8005b28:	080065c5 	.word	0x080065c5
 8005b2c:	080065d6 	.word	0x080065d6

08005b30 <_sbrk_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d06      	ldr	r5, [pc, #24]	; (8005b4c <_sbrk_r+0x1c>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	f7fb f9be 	bl	8000ebc <_sbrk>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_sbrk_r+0x1a>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_sbrk_r+0x1a>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	2001307c 	.word	0x2001307c

08005b50 <__swbuf_r>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	460e      	mov	r6, r1
 8005b54:	4614      	mov	r4, r2
 8005b56:	4605      	mov	r5, r0
 8005b58:	b118      	cbz	r0, 8005b62 <__swbuf_r+0x12>
 8005b5a:	6983      	ldr	r3, [r0, #24]
 8005b5c:	b90b      	cbnz	r3, 8005b62 <__swbuf_r+0x12>
 8005b5e:	f000 f9d9 	bl	8005f14 <__sinit>
 8005b62:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <__swbuf_r+0x98>)
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d12b      	bne.n	8005bc0 <__swbuf_r+0x70>
 8005b68:	686c      	ldr	r4, [r5, #4]
 8005b6a:	69a3      	ldr	r3, [r4, #24]
 8005b6c:	60a3      	str	r3, [r4, #8]
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	071a      	lsls	r2, r3, #28
 8005b72:	d52f      	bpl.n	8005bd4 <__swbuf_r+0x84>
 8005b74:	6923      	ldr	r3, [r4, #16]
 8005b76:	b36b      	cbz	r3, 8005bd4 <__swbuf_r+0x84>
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	6820      	ldr	r0, [r4, #0]
 8005b7c:	1ac0      	subs	r0, r0, r3
 8005b7e:	6963      	ldr	r3, [r4, #20]
 8005b80:	b2f6      	uxtb	r6, r6
 8005b82:	4283      	cmp	r3, r0
 8005b84:	4637      	mov	r7, r6
 8005b86:	dc04      	bgt.n	8005b92 <__swbuf_r+0x42>
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f000 f92e 	bl	8005dec <_fflush_r>
 8005b90:	bb30      	cbnz	r0, 8005be0 <__swbuf_r+0x90>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	60a3      	str	r3, [r4, #8]
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	6022      	str	r2, [r4, #0]
 8005b9e:	701e      	strb	r6, [r3, #0]
 8005ba0:	6963      	ldr	r3, [r4, #20]
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	4283      	cmp	r3, r0
 8005ba6:	d004      	beq.n	8005bb2 <__swbuf_r+0x62>
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	07db      	lsls	r3, r3, #31
 8005bac:	d506      	bpl.n	8005bbc <__swbuf_r+0x6c>
 8005bae:	2e0a      	cmp	r6, #10
 8005bb0:	d104      	bne.n	8005bbc <__swbuf_r+0x6c>
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 f919 	bl	8005dec <_fflush_r>
 8005bba:	b988      	cbnz	r0, 8005be0 <__swbuf_r+0x90>
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <__swbuf_r+0x9c>)
 8005bc2:	429c      	cmp	r4, r3
 8005bc4:	d101      	bne.n	8005bca <__swbuf_r+0x7a>
 8005bc6:	68ac      	ldr	r4, [r5, #8]
 8005bc8:	e7cf      	b.n	8005b6a <__swbuf_r+0x1a>
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <__swbuf_r+0xa0>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	bf08      	it	eq
 8005bd0:	68ec      	ldreq	r4, [r5, #12]
 8005bd2:	e7ca      	b.n	8005b6a <__swbuf_r+0x1a>
 8005bd4:	4621      	mov	r1, r4
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 f80c 	bl	8005bf4 <__swsetup_r>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d0cb      	beq.n	8005b78 <__swbuf_r+0x28>
 8005be0:	f04f 37ff 	mov.w	r7, #4294967295
 8005be4:	e7ea      	b.n	8005bbc <__swbuf_r+0x6c>
 8005be6:	bf00      	nop
 8005be8:	08006608 	.word	0x08006608
 8005bec:	08006628 	.word	0x08006628
 8005bf0:	080065e8 	.word	0x080065e8

08005bf4 <__swsetup_r>:
 8005bf4:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <__swsetup_r+0xcc>)
 8005bf6:	b570      	push	{r4, r5, r6, lr}
 8005bf8:	681d      	ldr	r5, [r3, #0]
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	b125      	cbz	r5, 8005c0a <__swsetup_r+0x16>
 8005c00:	69ab      	ldr	r3, [r5, #24]
 8005c02:	b913      	cbnz	r3, 8005c0a <__swsetup_r+0x16>
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 f985 	bl	8005f14 <__sinit>
 8005c0a:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <__swsetup_r+0xd0>)
 8005c0c:	429c      	cmp	r4, r3
 8005c0e:	d10f      	bne.n	8005c30 <__swsetup_r+0x3c>
 8005c10:	686c      	ldr	r4, [r5, #4]
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c18:	0719      	lsls	r1, r3, #28
 8005c1a:	d42c      	bmi.n	8005c76 <__swsetup_r+0x82>
 8005c1c:	06dd      	lsls	r5, r3, #27
 8005c1e:	d411      	bmi.n	8005c44 <__swsetup_r+0x50>
 8005c20:	2309      	movs	r3, #9
 8005c22:	6033      	str	r3, [r6, #0]
 8005c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	e03e      	b.n	8005cae <__swsetup_r+0xba>
 8005c30:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <__swsetup_r+0xd4>)
 8005c32:	429c      	cmp	r4, r3
 8005c34:	d101      	bne.n	8005c3a <__swsetup_r+0x46>
 8005c36:	68ac      	ldr	r4, [r5, #8]
 8005c38:	e7eb      	b.n	8005c12 <__swsetup_r+0x1e>
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <__swsetup_r+0xd8>)
 8005c3c:	429c      	cmp	r4, r3
 8005c3e:	bf08      	it	eq
 8005c40:	68ec      	ldreq	r4, [r5, #12]
 8005c42:	e7e6      	b.n	8005c12 <__swsetup_r+0x1e>
 8005c44:	0758      	lsls	r0, r3, #29
 8005c46:	d512      	bpl.n	8005c6e <__swsetup_r+0x7a>
 8005c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c4a:	b141      	cbz	r1, 8005c5e <__swsetup_r+0x6a>
 8005c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c50:	4299      	cmp	r1, r3
 8005c52:	d002      	beq.n	8005c5a <__swsetup_r+0x66>
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff fa77 	bl	8005148 <_free_r>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	2300      	movs	r3, #0
 8005c68:	6063      	str	r3, [r4, #4]
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f043 0308 	orr.w	r3, r3, #8
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	b94b      	cbnz	r3, 8005c8e <__swsetup_r+0x9a>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c84:	d003      	beq.n	8005c8e <__swsetup_r+0x9a>
 8005c86:	4621      	mov	r1, r4
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f000 fa07 	bl	800609c <__smakebuf_r>
 8005c8e:	89a0      	ldrh	r0, [r4, #12]
 8005c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c94:	f010 0301 	ands.w	r3, r0, #1
 8005c98:	d00a      	beq.n	8005cb0 <__swsetup_r+0xbc>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60a3      	str	r3, [r4, #8]
 8005c9e:	6963      	ldr	r3, [r4, #20]
 8005ca0:	425b      	negs	r3, r3
 8005ca2:	61a3      	str	r3, [r4, #24]
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	b943      	cbnz	r3, 8005cba <__swsetup_r+0xc6>
 8005ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cac:	d1ba      	bne.n	8005c24 <__swsetup_r+0x30>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	0781      	lsls	r1, r0, #30
 8005cb2:	bf58      	it	pl
 8005cb4:	6963      	ldrpl	r3, [r4, #20]
 8005cb6:	60a3      	str	r3, [r4, #8]
 8005cb8:	e7f4      	b.n	8005ca4 <__swsetup_r+0xb0>
 8005cba:	2000      	movs	r0, #0
 8005cbc:	e7f7      	b.n	8005cae <__swsetup_r+0xba>
 8005cbe:	bf00      	nop
 8005cc0:	2000002c 	.word	0x2000002c
 8005cc4:	08006608 	.word	0x08006608
 8005cc8:	08006628 	.word	0x08006628
 8005ccc:	080065e8 	.word	0x080065e8

08005cd0 <abort>:
 8005cd0:	b508      	push	{r3, lr}
 8005cd2:	2006      	movs	r0, #6
 8005cd4:	f000 faa4 	bl	8006220 <raise>
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7fb f877 	bl	8000dcc <_exit>
	...

08005ce0 <__sflush_r>:
 8005ce0:	898a      	ldrh	r2, [r1, #12]
 8005ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	0710      	lsls	r0, r2, #28
 8005cea:	460c      	mov	r4, r1
 8005cec:	d458      	bmi.n	8005da0 <__sflush_r+0xc0>
 8005cee:	684b      	ldr	r3, [r1, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dc05      	bgt.n	8005d00 <__sflush_r+0x20>
 8005cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dc02      	bgt.n	8005d00 <__sflush_r+0x20>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d02:	2e00      	cmp	r6, #0
 8005d04:	d0f9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005d06:	2300      	movs	r3, #0
 8005d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d0c:	682f      	ldr	r7, [r5, #0]
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	d032      	beq.n	8005d78 <__sflush_r+0x98>
 8005d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	075a      	lsls	r2, r3, #29
 8005d18:	d505      	bpl.n	8005d26 <__sflush_r+0x46>
 8005d1a:	6863      	ldr	r3, [r4, #4]
 8005d1c:	1ac0      	subs	r0, r0, r3
 8005d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d20:	b10b      	cbz	r3, 8005d26 <__sflush_r+0x46>
 8005d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d24:	1ac0      	subs	r0, r0, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d2c:	6a21      	ldr	r1, [r4, #32]
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b0      	blx	r6
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	d106      	bne.n	8005d46 <__sflush_r+0x66>
 8005d38:	6829      	ldr	r1, [r5, #0]
 8005d3a:	291d      	cmp	r1, #29
 8005d3c:	d82c      	bhi.n	8005d98 <__sflush_r+0xb8>
 8005d3e:	4a2a      	ldr	r2, [pc, #168]	; (8005de8 <__sflush_r+0x108>)
 8005d40:	40ca      	lsrs	r2, r1
 8005d42:	07d6      	lsls	r6, r2, #31
 8005d44:	d528      	bpl.n	8005d98 <__sflush_r+0xb8>
 8005d46:	2200      	movs	r2, #0
 8005d48:	6062      	str	r2, [r4, #4]
 8005d4a:	04d9      	lsls	r1, r3, #19
 8005d4c:	6922      	ldr	r2, [r4, #16]
 8005d4e:	6022      	str	r2, [r4, #0]
 8005d50:	d504      	bpl.n	8005d5c <__sflush_r+0x7c>
 8005d52:	1c42      	adds	r2, r0, #1
 8005d54:	d101      	bne.n	8005d5a <__sflush_r+0x7a>
 8005d56:	682b      	ldr	r3, [r5, #0]
 8005d58:	b903      	cbnz	r3, 8005d5c <__sflush_r+0x7c>
 8005d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d5e:	602f      	str	r7, [r5, #0]
 8005d60:	2900      	cmp	r1, #0
 8005d62:	d0ca      	beq.n	8005cfa <__sflush_r+0x1a>
 8005d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	d002      	beq.n	8005d72 <__sflush_r+0x92>
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f7ff f9eb 	bl	8005148 <_free_r>
 8005d72:	2000      	movs	r0, #0
 8005d74:	6360      	str	r0, [r4, #52]	; 0x34
 8005d76:	e7c1      	b.n	8005cfc <__sflush_r+0x1c>
 8005d78:	6a21      	ldr	r1, [r4, #32]
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b0      	blx	r6
 8005d80:	1c41      	adds	r1, r0, #1
 8005d82:	d1c7      	bne.n	8005d14 <__sflush_r+0x34>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0c4      	beq.n	8005d14 <__sflush_r+0x34>
 8005d8a:	2b1d      	cmp	r3, #29
 8005d8c:	d001      	beq.n	8005d92 <__sflush_r+0xb2>
 8005d8e:	2b16      	cmp	r3, #22
 8005d90:	d101      	bne.n	8005d96 <__sflush_r+0xb6>
 8005d92:	602f      	str	r7, [r5, #0]
 8005d94:	e7b1      	b.n	8005cfa <__sflush_r+0x1a>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	e7ad      	b.n	8005cfc <__sflush_r+0x1c>
 8005da0:	690f      	ldr	r7, [r1, #16]
 8005da2:	2f00      	cmp	r7, #0
 8005da4:	d0a9      	beq.n	8005cfa <__sflush_r+0x1a>
 8005da6:	0793      	lsls	r3, r2, #30
 8005da8:	680e      	ldr	r6, [r1, #0]
 8005daa:	bf08      	it	eq
 8005dac:	694b      	ldreq	r3, [r1, #20]
 8005dae:	600f      	str	r7, [r1, #0]
 8005db0:	bf18      	it	ne
 8005db2:	2300      	movne	r3, #0
 8005db4:	eba6 0807 	sub.w	r8, r6, r7
 8005db8:	608b      	str	r3, [r1, #8]
 8005dba:	f1b8 0f00 	cmp.w	r8, #0
 8005dbe:	dd9c      	ble.n	8005cfa <__sflush_r+0x1a>
 8005dc0:	6a21      	ldr	r1, [r4, #32]
 8005dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dc4:	4643      	mov	r3, r8
 8005dc6:	463a      	mov	r2, r7
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b0      	blx	r6
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	dc06      	bgt.n	8005dde <__sflush_r+0xfe>
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	e78e      	b.n	8005cfc <__sflush_r+0x1c>
 8005dde:	4407      	add	r7, r0
 8005de0:	eba8 0800 	sub.w	r8, r8, r0
 8005de4:	e7e9      	b.n	8005dba <__sflush_r+0xda>
 8005de6:	bf00      	nop
 8005de8:	20400001 	.word	0x20400001

08005dec <_fflush_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	690b      	ldr	r3, [r1, #16]
 8005df0:	4605      	mov	r5, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	b913      	cbnz	r3, 8005dfc <_fflush_r+0x10>
 8005df6:	2500      	movs	r5, #0
 8005df8:	4628      	mov	r0, r5
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	b118      	cbz	r0, 8005e06 <_fflush_r+0x1a>
 8005dfe:	6983      	ldr	r3, [r0, #24]
 8005e00:	b90b      	cbnz	r3, 8005e06 <_fflush_r+0x1a>
 8005e02:	f000 f887 	bl	8005f14 <__sinit>
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <_fflush_r+0x6c>)
 8005e08:	429c      	cmp	r4, r3
 8005e0a:	d11b      	bne.n	8005e44 <_fflush_r+0x58>
 8005e0c:	686c      	ldr	r4, [r5, #4]
 8005e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0ef      	beq.n	8005df6 <_fflush_r+0xa>
 8005e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e18:	07d0      	lsls	r0, r2, #31
 8005e1a:	d404      	bmi.n	8005e26 <_fflush_r+0x3a>
 8005e1c:	0599      	lsls	r1, r3, #22
 8005e1e:	d402      	bmi.n	8005e26 <_fflush_r+0x3a>
 8005e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e22:	f000 f915 	bl	8006050 <__retarget_lock_acquire_recursive>
 8005e26:	4628      	mov	r0, r5
 8005e28:	4621      	mov	r1, r4
 8005e2a:	f7ff ff59 	bl	8005ce0 <__sflush_r>
 8005e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e30:	07da      	lsls	r2, r3, #31
 8005e32:	4605      	mov	r5, r0
 8005e34:	d4e0      	bmi.n	8005df8 <_fflush_r+0xc>
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	059b      	lsls	r3, r3, #22
 8005e3a:	d4dd      	bmi.n	8005df8 <_fflush_r+0xc>
 8005e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e3e:	f000 f908 	bl	8006052 <__retarget_lock_release_recursive>
 8005e42:	e7d9      	b.n	8005df8 <_fflush_r+0xc>
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <_fflush_r+0x70>)
 8005e46:	429c      	cmp	r4, r3
 8005e48:	d101      	bne.n	8005e4e <_fflush_r+0x62>
 8005e4a:	68ac      	ldr	r4, [r5, #8]
 8005e4c:	e7df      	b.n	8005e0e <_fflush_r+0x22>
 8005e4e:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <_fflush_r+0x74>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	bf08      	it	eq
 8005e54:	68ec      	ldreq	r4, [r5, #12]
 8005e56:	e7da      	b.n	8005e0e <_fflush_r+0x22>
 8005e58:	08006608 	.word	0x08006608
 8005e5c:	08006628 	.word	0x08006628
 8005e60:	080065e8 	.word	0x080065e8

08005e64 <std>:
 8005e64:	2300      	movs	r3, #0
 8005e66:	b510      	push	{r4, lr}
 8005e68:	4604      	mov	r4, r0
 8005e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e72:	6083      	str	r3, [r0, #8]
 8005e74:	8181      	strh	r1, [r0, #12]
 8005e76:	6643      	str	r3, [r0, #100]	; 0x64
 8005e78:	81c2      	strh	r2, [r0, #14]
 8005e7a:	6183      	str	r3, [r0, #24]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	2208      	movs	r2, #8
 8005e80:	305c      	adds	r0, #92	; 0x5c
 8005e82:	f7ff f8a5 	bl	8004fd0 <memset>
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <std+0x38>)
 8005e88:	6263      	str	r3, [r4, #36]	; 0x24
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <std+0x3c>)
 8005e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <std+0x40>)
 8005e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <std+0x44>)
 8005e94:	6224      	str	r4, [r4, #32]
 8005e96:	6323      	str	r3, [r4, #48]	; 0x30
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	bf00      	nop
 8005e9c:	08006259 	.word	0x08006259
 8005ea0:	0800627b 	.word	0x0800627b
 8005ea4:	080062b3 	.word	0x080062b3
 8005ea8:	080062d7 	.word	0x080062d7

08005eac <_cleanup_r>:
 8005eac:	4901      	ldr	r1, [pc, #4]	; (8005eb4 <_cleanup_r+0x8>)
 8005eae:	f000 b8af 	b.w	8006010 <_fwalk_reent>
 8005eb2:	bf00      	nop
 8005eb4:	08005ded 	.word	0x08005ded

08005eb8 <__sfmoreglue>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	1e4a      	subs	r2, r1, #1
 8005ebc:	2568      	movs	r5, #104	; 0x68
 8005ebe:	4355      	muls	r5, r2
 8005ec0:	460e      	mov	r6, r1
 8005ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ec6:	f7ff f98f 	bl	80051e8 <_malloc_r>
 8005eca:	4604      	mov	r4, r0
 8005ecc:	b140      	cbz	r0, 8005ee0 <__sfmoreglue+0x28>
 8005ece:	2100      	movs	r1, #0
 8005ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ed4:	300c      	adds	r0, #12
 8005ed6:	60a0      	str	r0, [r4, #8]
 8005ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005edc:	f7ff f878 	bl	8004fd0 <memset>
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}

08005ee4 <__sfp_lock_acquire>:
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <__sfp_lock_acquire+0x8>)
 8005ee6:	f000 b8b3 	b.w	8006050 <__retarget_lock_acquire_recursive>
 8005eea:	bf00      	nop
 8005eec:	20013078 	.word	0x20013078

08005ef0 <__sfp_lock_release>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <__sfp_lock_release+0x8>)
 8005ef2:	f000 b8ae 	b.w	8006052 <__retarget_lock_release_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	20013078 	.word	0x20013078

08005efc <__sinit_lock_acquire>:
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <__sinit_lock_acquire+0x8>)
 8005efe:	f000 b8a7 	b.w	8006050 <__retarget_lock_acquire_recursive>
 8005f02:	bf00      	nop
 8005f04:	20013073 	.word	0x20013073

08005f08 <__sinit_lock_release>:
 8005f08:	4801      	ldr	r0, [pc, #4]	; (8005f10 <__sinit_lock_release+0x8>)
 8005f0a:	f000 b8a2 	b.w	8006052 <__retarget_lock_release_recursive>
 8005f0e:	bf00      	nop
 8005f10:	20013073 	.word	0x20013073

08005f14 <__sinit>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	4604      	mov	r4, r0
 8005f18:	f7ff fff0 	bl	8005efc <__sinit_lock_acquire>
 8005f1c:	69a3      	ldr	r3, [r4, #24]
 8005f1e:	b11b      	cbz	r3, 8005f28 <__sinit+0x14>
 8005f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f24:	f7ff bff0 	b.w	8005f08 <__sinit_lock_release>
 8005f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005f2e:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <__sinit+0x68>)
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <__sinit+0x6c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f36:	42a3      	cmp	r3, r4
 8005f38:	bf04      	itt	eq
 8005f3a:	2301      	moveq	r3, #1
 8005f3c:	61a3      	streq	r3, [r4, #24]
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 f820 	bl	8005f84 <__sfp>
 8005f44:	6060      	str	r0, [r4, #4]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 f81c 	bl	8005f84 <__sfp>
 8005f4c:	60a0      	str	r0, [r4, #8]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 f818 	bl	8005f84 <__sfp>
 8005f54:	2200      	movs	r2, #0
 8005f56:	60e0      	str	r0, [r4, #12]
 8005f58:	2104      	movs	r1, #4
 8005f5a:	6860      	ldr	r0, [r4, #4]
 8005f5c:	f7ff ff82 	bl	8005e64 <std>
 8005f60:	68a0      	ldr	r0, [r4, #8]
 8005f62:	2201      	movs	r2, #1
 8005f64:	2109      	movs	r1, #9
 8005f66:	f7ff ff7d 	bl	8005e64 <std>
 8005f6a:	68e0      	ldr	r0, [r4, #12]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	2112      	movs	r1, #18
 8005f70:	f7ff ff78 	bl	8005e64 <std>
 8005f74:	2301      	movs	r3, #1
 8005f76:	61a3      	str	r3, [r4, #24]
 8005f78:	e7d2      	b.n	8005f20 <__sinit+0xc>
 8005f7a:	bf00      	nop
 8005f7c:	080064fc 	.word	0x080064fc
 8005f80:	08005ead 	.word	0x08005ead

08005f84 <__sfp>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	4607      	mov	r7, r0
 8005f88:	f7ff ffac 	bl	8005ee4 <__sfp_lock_acquire>
 8005f8c:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <__sfp+0x84>)
 8005f8e:	681e      	ldr	r6, [r3, #0]
 8005f90:	69b3      	ldr	r3, [r6, #24]
 8005f92:	b913      	cbnz	r3, 8005f9a <__sfp+0x16>
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff ffbd 	bl	8005f14 <__sinit>
 8005f9a:	3648      	adds	r6, #72	; 0x48
 8005f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	d503      	bpl.n	8005fac <__sfp+0x28>
 8005fa4:	6833      	ldr	r3, [r6, #0]
 8005fa6:	b30b      	cbz	r3, 8005fec <__sfp+0x68>
 8005fa8:	6836      	ldr	r6, [r6, #0]
 8005faa:	e7f7      	b.n	8005f9c <__sfp+0x18>
 8005fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fb0:	b9d5      	cbnz	r5, 8005fe8 <__sfp+0x64>
 8005fb2:	4b16      	ldr	r3, [pc, #88]	; (800600c <__sfp+0x88>)
 8005fb4:	60e3      	str	r3, [r4, #12]
 8005fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fba:	6665      	str	r5, [r4, #100]	; 0x64
 8005fbc:	f000 f847 	bl	800604e <__retarget_lock_init_recursive>
 8005fc0:	f7ff ff96 	bl	8005ef0 <__sfp_lock_release>
 8005fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fcc:	6025      	str	r5, [r4, #0]
 8005fce:	61a5      	str	r5, [r4, #24]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fd8:	f7fe fffa 	bl	8004fd0 <memset>
 8005fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe8:	3468      	adds	r4, #104	; 0x68
 8005fea:	e7d9      	b.n	8005fa0 <__sfp+0x1c>
 8005fec:	2104      	movs	r1, #4
 8005fee:	4638      	mov	r0, r7
 8005ff0:	f7ff ff62 	bl	8005eb8 <__sfmoreglue>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	6030      	str	r0, [r6, #0]
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d1d5      	bne.n	8005fa8 <__sfp+0x24>
 8005ffc:	f7ff ff78 	bl	8005ef0 <__sfp_lock_release>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	e7ee      	b.n	8005fe4 <__sfp+0x60>
 8006006:	bf00      	nop
 8006008:	080064fc 	.word	0x080064fc
 800600c:	ffff0001 	.word	0xffff0001

08006010 <_fwalk_reent>:
 8006010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006014:	4606      	mov	r6, r0
 8006016:	4688      	mov	r8, r1
 8006018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800601c:	2700      	movs	r7, #0
 800601e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006022:	f1b9 0901 	subs.w	r9, r9, #1
 8006026:	d505      	bpl.n	8006034 <_fwalk_reent+0x24>
 8006028:	6824      	ldr	r4, [r4, #0]
 800602a:	2c00      	cmp	r4, #0
 800602c:	d1f7      	bne.n	800601e <_fwalk_reent+0xe>
 800602e:	4638      	mov	r0, r7
 8006030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006034:	89ab      	ldrh	r3, [r5, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d907      	bls.n	800604a <_fwalk_reent+0x3a>
 800603a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800603e:	3301      	adds	r3, #1
 8006040:	d003      	beq.n	800604a <_fwalk_reent+0x3a>
 8006042:	4629      	mov	r1, r5
 8006044:	4630      	mov	r0, r6
 8006046:	47c0      	blx	r8
 8006048:	4307      	orrs	r7, r0
 800604a:	3568      	adds	r5, #104	; 0x68
 800604c:	e7e9      	b.n	8006022 <_fwalk_reent+0x12>

0800604e <__retarget_lock_init_recursive>:
 800604e:	4770      	bx	lr

08006050 <__retarget_lock_acquire_recursive>:
 8006050:	4770      	bx	lr

08006052 <__retarget_lock_release_recursive>:
 8006052:	4770      	bx	lr

08006054 <__swhatbuf_r>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	460e      	mov	r6, r1
 8006058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605c:	2900      	cmp	r1, #0
 800605e:	b096      	sub	sp, #88	; 0x58
 8006060:	4614      	mov	r4, r2
 8006062:	461d      	mov	r5, r3
 8006064:	da07      	bge.n	8006076 <__swhatbuf_r+0x22>
 8006066:	2300      	movs	r3, #0
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	89b3      	ldrh	r3, [r6, #12]
 800606c:	061a      	lsls	r2, r3, #24
 800606e:	d410      	bmi.n	8006092 <__swhatbuf_r+0x3e>
 8006070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006074:	e00e      	b.n	8006094 <__swhatbuf_r+0x40>
 8006076:	466a      	mov	r2, sp
 8006078:	f000 f954 	bl	8006324 <_fstat_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	dbf2      	blt.n	8006066 <__swhatbuf_r+0x12>
 8006080:	9a01      	ldr	r2, [sp, #4]
 8006082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800608a:	425a      	negs	r2, r3
 800608c:	415a      	adcs	r2, r3
 800608e:	602a      	str	r2, [r5, #0]
 8006090:	e7ee      	b.n	8006070 <__swhatbuf_r+0x1c>
 8006092:	2340      	movs	r3, #64	; 0x40
 8006094:	2000      	movs	r0, #0
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	b016      	add	sp, #88	; 0x58
 800609a:	bd70      	pop	{r4, r5, r6, pc}

0800609c <__smakebuf_r>:
 800609c:	898b      	ldrh	r3, [r1, #12]
 800609e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060a0:	079d      	lsls	r5, r3, #30
 80060a2:	4606      	mov	r6, r0
 80060a4:	460c      	mov	r4, r1
 80060a6:	d507      	bpl.n	80060b8 <__smakebuf_r+0x1c>
 80060a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	2301      	movs	r3, #1
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	b002      	add	sp, #8
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	ab01      	add	r3, sp, #4
 80060ba:	466a      	mov	r2, sp
 80060bc:	f7ff ffca 	bl	8006054 <__swhatbuf_r>
 80060c0:	9900      	ldr	r1, [sp, #0]
 80060c2:	4605      	mov	r5, r0
 80060c4:	4630      	mov	r0, r6
 80060c6:	f7ff f88f 	bl	80051e8 <_malloc_r>
 80060ca:	b948      	cbnz	r0, 80060e0 <__smakebuf_r+0x44>
 80060cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d0:	059a      	lsls	r2, r3, #22
 80060d2:	d4ef      	bmi.n	80060b4 <__smakebuf_r+0x18>
 80060d4:	f023 0303 	bic.w	r3, r3, #3
 80060d8:	f043 0302 	orr.w	r3, r3, #2
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	e7e3      	b.n	80060a8 <__smakebuf_r+0xc>
 80060e0:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <__smakebuf_r+0x7c>)
 80060e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	6020      	str	r0, [r4, #0]
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	6163      	str	r3, [r4, #20]
 80060f2:	9b01      	ldr	r3, [sp, #4]
 80060f4:	6120      	str	r0, [r4, #16]
 80060f6:	b15b      	cbz	r3, 8006110 <__smakebuf_r+0x74>
 80060f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060fc:	4630      	mov	r0, r6
 80060fe:	f000 f923 	bl	8006348 <_isatty_r>
 8006102:	b128      	cbz	r0, 8006110 <__smakebuf_r+0x74>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f023 0303 	bic.w	r3, r3, #3
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	89a0      	ldrh	r0, [r4, #12]
 8006112:	4305      	orrs	r5, r0
 8006114:	81a5      	strh	r5, [r4, #12]
 8006116:	e7cd      	b.n	80060b4 <__smakebuf_r+0x18>
 8006118:	08005ead 	.word	0x08005ead

0800611c <memcpy>:
 800611c:	440a      	add	r2, r1
 800611e:	4291      	cmp	r1, r2
 8006120:	f100 33ff 	add.w	r3, r0, #4294967295
 8006124:	d100      	bne.n	8006128 <memcpy+0xc>
 8006126:	4770      	bx	lr
 8006128:	b510      	push	{r4, lr}
 800612a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800612e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006132:	4291      	cmp	r1, r2
 8006134:	d1f9      	bne.n	800612a <memcpy+0xe>
 8006136:	bd10      	pop	{r4, pc}

08006138 <memmove>:
 8006138:	4288      	cmp	r0, r1
 800613a:	b510      	push	{r4, lr}
 800613c:	eb01 0402 	add.w	r4, r1, r2
 8006140:	d902      	bls.n	8006148 <memmove+0x10>
 8006142:	4284      	cmp	r4, r0
 8006144:	4623      	mov	r3, r4
 8006146:	d807      	bhi.n	8006158 <memmove+0x20>
 8006148:	1e43      	subs	r3, r0, #1
 800614a:	42a1      	cmp	r1, r4
 800614c:	d008      	beq.n	8006160 <memmove+0x28>
 800614e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006156:	e7f8      	b.n	800614a <memmove+0x12>
 8006158:	4402      	add	r2, r0
 800615a:	4601      	mov	r1, r0
 800615c:	428a      	cmp	r2, r1
 800615e:	d100      	bne.n	8006162 <memmove+0x2a>
 8006160:	bd10      	pop	{r4, pc}
 8006162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800616a:	e7f7      	b.n	800615c <memmove+0x24>

0800616c <__malloc_lock>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__malloc_lock+0x8>)
 800616e:	f7ff bf6f 	b.w	8006050 <__retarget_lock_acquire_recursive>
 8006172:	bf00      	nop
 8006174:	20013074 	.word	0x20013074

08006178 <__malloc_unlock>:
 8006178:	4801      	ldr	r0, [pc, #4]	; (8006180 <__malloc_unlock+0x8>)
 800617a:	f7ff bf6a 	b.w	8006052 <__retarget_lock_release_recursive>
 800617e:	bf00      	nop
 8006180:	20013074 	.word	0x20013074

08006184 <_realloc_r>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	4607      	mov	r7, r0
 8006188:	4614      	mov	r4, r2
 800618a:	460e      	mov	r6, r1
 800618c:	b921      	cbnz	r1, 8006198 <_realloc_r+0x14>
 800618e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006192:	4611      	mov	r1, r2
 8006194:	f7ff b828 	b.w	80051e8 <_malloc_r>
 8006198:	b922      	cbnz	r2, 80061a4 <_realloc_r+0x20>
 800619a:	f7fe ffd5 	bl	8005148 <_free_r>
 800619e:	4625      	mov	r5, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a4:	f000 f8f2 	bl	800638c <_malloc_usable_size_r>
 80061a8:	42a0      	cmp	r0, r4
 80061aa:	d20f      	bcs.n	80061cc <_realloc_r+0x48>
 80061ac:	4621      	mov	r1, r4
 80061ae:	4638      	mov	r0, r7
 80061b0:	f7ff f81a 	bl	80051e8 <_malloc_r>
 80061b4:	4605      	mov	r5, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0f2      	beq.n	80061a0 <_realloc_r+0x1c>
 80061ba:	4631      	mov	r1, r6
 80061bc:	4622      	mov	r2, r4
 80061be:	f7ff ffad 	bl	800611c <memcpy>
 80061c2:	4631      	mov	r1, r6
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7fe ffbf 	bl	8005148 <_free_r>
 80061ca:	e7e9      	b.n	80061a0 <_realloc_r+0x1c>
 80061cc:	4635      	mov	r5, r6
 80061ce:	e7e7      	b.n	80061a0 <_realloc_r+0x1c>

080061d0 <_raise_r>:
 80061d0:	291f      	cmp	r1, #31
 80061d2:	b538      	push	{r3, r4, r5, lr}
 80061d4:	4604      	mov	r4, r0
 80061d6:	460d      	mov	r5, r1
 80061d8:	d904      	bls.n	80061e4 <_raise_r+0x14>
 80061da:	2316      	movs	r3, #22
 80061dc:	6003      	str	r3, [r0, #0]
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061e6:	b112      	cbz	r2, 80061ee <_raise_r+0x1e>
 80061e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061ec:	b94b      	cbnz	r3, 8006202 <_raise_r+0x32>
 80061ee:	4620      	mov	r0, r4
 80061f0:	f000 f830 	bl	8006254 <_getpid_r>
 80061f4:	462a      	mov	r2, r5
 80061f6:	4601      	mov	r1, r0
 80061f8:	4620      	mov	r0, r4
 80061fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fe:	f000 b817 	b.w	8006230 <_kill_r>
 8006202:	2b01      	cmp	r3, #1
 8006204:	d00a      	beq.n	800621c <_raise_r+0x4c>
 8006206:	1c59      	adds	r1, r3, #1
 8006208:	d103      	bne.n	8006212 <_raise_r+0x42>
 800620a:	2316      	movs	r3, #22
 800620c:	6003      	str	r3, [r0, #0]
 800620e:	2001      	movs	r0, #1
 8006210:	e7e7      	b.n	80061e2 <_raise_r+0x12>
 8006212:	2400      	movs	r4, #0
 8006214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006218:	4628      	mov	r0, r5
 800621a:	4798      	blx	r3
 800621c:	2000      	movs	r0, #0
 800621e:	e7e0      	b.n	80061e2 <_raise_r+0x12>

08006220 <raise>:
 8006220:	4b02      	ldr	r3, [pc, #8]	; (800622c <raise+0xc>)
 8006222:	4601      	mov	r1, r0
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	f7ff bfd3 	b.w	80061d0 <_raise_r>
 800622a:	bf00      	nop
 800622c:	2000002c 	.word	0x2000002c

08006230 <_kill_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d07      	ldr	r5, [pc, #28]	; (8006250 <_kill_r+0x20>)
 8006234:	2300      	movs	r3, #0
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	f7fa fdb5 	bl	8000dac <_kill>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d102      	bne.n	800624c <_kill_r+0x1c>
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	b103      	cbz	r3, 800624c <_kill_r+0x1c>
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	bd38      	pop	{r3, r4, r5, pc}
 800624e:	bf00      	nop
 8006250:	2001307c 	.word	0x2001307c

08006254 <_getpid_r>:
 8006254:	f7fa bda2 	b.w	8000d9c <_getpid>

08006258 <__sread>:
 8006258:	b510      	push	{r4, lr}
 800625a:	460c      	mov	r4, r1
 800625c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006260:	f000 f89c 	bl	800639c <_read_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	bfab      	itete	ge
 8006268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800626a:	89a3      	ldrhlt	r3, [r4, #12]
 800626c:	181b      	addge	r3, r3, r0
 800626e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006272:	bfac      	ite	ge
 8006274:	6563      	strge	r3, [r4, #84]	; 0x54
 8006276:	81a3      	strhlt	r3, [r4, #12]
 8006278:	bd10      	pop	{r4, pc}

0800627a <__swrite>:
 800627a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800627e:	461f      	mov	r7, r3
 8006280:	898b      	ldrh	r3, [r1, #12]
 8006282:	05db      	lsls	r3, r3, #23
 8006284:	4605      	mov	r5, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4616      	mov	r6, r2
 800628a:	d505      	bpl.n	8006298 <__swrite+0x1e>
 800628c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006290:	2302      	movs	r3, #2
 8006292:	2200      	movs	r2, #0
 8006294:	f000 f868 	bl	8006368 <_lseek_r>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800629e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a2:	81a3      	strh	r3, [r4, #12]
 80062a4:	4632      	mov	r2, r6
 80062a6:	463b      	mov	r3, r7
 80062a8:	4628      	mov	r0, r5
 80062aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ae:	f000 b817 	b.w	80062e0 <_write_r>

080062b2 <__sseek>:
 80062b2:	b510      	push	{r4, lr}
 80062b4:	460c      	mov	r4, r1
 80062b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ba:	f000 f855 	bl	8006368 <_lseek_r>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	bf15      	itete	ne
 80062c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80062c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062ce:	81a3      	strheq	r3, [r4, #12]
 80062d0:	bf18      	it	ne
 80062d2:	81a3      	strhne	r3, [r4, #12]
 80062d4:	bd10      	pop	{r4, pc}

080062d6 <__sclose>:
 80062d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062da:	f000 b813 	b.w	8006304 <_close_r>
	...

080062e0 <_write_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d07      	ldr	r5, [pc, #28]	; (8006300 <_write_r+0x20>)
 80062e4:	4604      	mov	r4, r0
 80062e6:	4608      	mov	r0, r1
 80062e8:	4611      	mov	r1, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fa fd93 	bl	8000e1a <_write>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_write_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_write_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	2001307c 	.word	0x2001307c

08006304 <_close_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	; (8006320 <_close_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fa fd9f 	bl	8000e52 <_close>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_close_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_close_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	2001307c 	.word	0x2001307c

08006324 <_fstat_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4d07      	ldr	r5, [pc, #28]	; (8006344 <_fstat_r+0x20>)
 8006328:	2300      	movs	r3, #0
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	602b      	str	r3, [r5, #0]
 8006332:	f7fa fd9a 	bl	8000e6a <_fstat>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d102      	bne.n	8006340 <_fstat_r+0x1c>
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	b103      	cbz	r3, 8006340 <_fstat_r+0x1c>
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	bd38      	pop	{r3, r4, r5, pc}
 8006342:	bf00      	nop
 8006344:	2001307c 	.word	0x2001307c

08006348 <_isatty_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d06      	ldr	r5, [pc, #24]	; (8006364 <_isatty_r+0x1c>)
 800634c:	2300      	movs	r3, #0
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	602b      	str	r3, [r5, #0]
 8006354:	f7fa fd99 	bl	8000e8a <_isatty>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_isatty_r+0x1a>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	b103      	cbz	r3, 8006362 <_isatty_r+0x1a>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	2001307c 	.word	0x2001307c

08006368 <_lseek_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4d07      	ldr	r5, [pc, #28]	; (8006388 <_lseek_r+0x20>)
 800636c:	4604      	mov	r4, r0
 800636e:	4608      	mov	r0, r1
 8006370:	4611      	mov	r1, r2
 8006372:	2200      	movs	r2, #0
 8006374:	602a      	str	r2, [r5, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f7fa fd92 	bl	8000ea0 <_lseek>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_lseek_r+0x1e>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_lseek_r+0x1e>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	2001307c 	.word	0x2001307c

0800638c <_malloc_usable_size_r>:
 800638c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006390:	1f18      	subs	r0, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	bfbc      	itt	lt
 8006396:	580b      	ldrlt	r3, [r1, r0]
 8006398:	18c0      	addlt	r0, r0, r3
 800639a:	4770      	bx	lr

0800639c <_read_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d07      	ldr	r5, [pc, #28]	; (80063bc <_read_r+0x20>)
 80063a0:	4604      	mov	r4, r0
 80063a2:	4608      	mov	r0, r1
 80063a4:	4611      	mov	r1, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	602a      	str	r2, [r5, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f7fa fd18 	bl	8000de0 <_read>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_read_r+0x1e>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_read_r+0x1e>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	2001307c 	.word	0x2001307c

080063c0 <_init>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr

080063cc <_fini>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	bf00      	nop
 80063d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d2:	bc08      	pop	{r3}
 80063d4:	469e      	mov	lr, r3
 80063d6:	4770      	bx	lr
