
VGAnuS_Software-Ontwikkeling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800570c  0800570c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005714  08005714  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800571c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013130  20000080  0800579c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200131b0  0800579c  000231b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014993  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc1  00000000  00000000  00034a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00037808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00038558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fb0  00000000  00000000  00039190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b13  00000000  00000000  0005c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb547  00000000  00000000  0006dc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013919a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a8  00000000  00000000  001391f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005668 	.word	0x08005668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005668 	.word	0x08005668

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_DMA_Init+0x78>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a1a      	ldr	r2, [pc, #104]	; (80005f0 <MX_DMA_Init+0x78>)
 8000588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_DMA_Init+0x78>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_DMA_Init+0x78>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <MX_DMA_Init+0x78>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_DMA_Init+0x78>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2010      	movs	r0, #16
 80005bc:	f000 ffb1 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005c0:	2010      	movs	r0, #16
 80005c2:	f000 ffca 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2011      	movs	r0, #17
 80005cc:	f000 ffa9 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005d0:	2011      	movs	r0, #17
 80005d2:	f000 ffc2 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2044      	movs	r0, #68	; 0x44
 80005dc:	f000 ffa1 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005e0:	2044      	movs	r0, #68	; 0x44
 80005e2:	f000 ffba 	bl	800155a <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a31      	ldr	r2, [pc, #196]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a23      	ldr	r2, [pc, #140]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000680:	4816      	ldr	r0, [pc, #88]	; (80006dc <MX_GPIO_Init+0xe8>)
 8000682:	f001 fd23 	bl	80020cc <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <MX_GPIO_Init+0xec>)
 800068e:	f001 fd1d 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000692:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000696:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_GPIO_Init+0xe8>)
 80006ac:	f001 fb72 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0xec>)
 80006ca:	f001 fb63 	bl	8001d94 <HAL_GPIO_Init>

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020400 	.word	0x40020400

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fdcd 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f837 	bl	8000760 <SystemClock_Config>
  //ITM_Port32(31) = 1;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f7ff ff7f 	bl	80005f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f6:	f7ff ff3f 	bl	8000578 <MX_DMA_Init>
  MX_TIM1_Init();
 80006fa:	f000 fa8d 	bl	8000c18 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006fe:	f000 fadb 	bl	8000cb8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000702:	f000 fbf1 	bl	8000ee8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  API_init_IO();
 8000706:	f004 fb46 	bl	8004d96 <API_init_IO>

  //API_draw_line(100, 100, 100, 150, VGA_COL_RED, 10);
  API_draw_rectangle(100, 100, 150, 100, VGA_COL_RED, 0);
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	23e0      	movs	r3, #224	; 0xe0
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	2296      	movs	r2, #150	; 0x96
 8000716:	2164      	movs	r1, #100	; 0x64
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	f004 faa5 	bl	8004c68 <API_draw_rectangle>

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <main+0x70>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <main+0x70>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f042 0210 	orr.w	r2, r2, #16
 800072c:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RX_BUFSIZE);
 800072e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000732:	4909      	ldr	r1, [pc, #36]	; (8000758 <main+0x74>)
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <main+0x70>)
 8000736:	f003 fbdd 	bl	8003ef4 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart2, US_mess, (uint8_t)strlen((char*)US_mess), 100);
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <main+0x78>)
 800073c:	f7ff fd48 	bl	80001d0 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b2db      	uxtb	r3, r3
 8000744:	b29a      	uxth	r2, r3
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	4904      	ldr	r1, [pc, #16]	; (800075c <main+0x78>)
 800074a:	4802      	ldr	r0, [pc, #8]	; (8000754 <main+0x70>)
 800074c:	f003 fad3 	bl	8003cf6 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x6c>
 8000752:	bf00      	nop
 8000754:	20013158 	.word	0x20013158
 8000758:	20012da8 	.word	0x20012da8
 800075c:	20000000 	.word	0x20000000

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fb44 	bl	8004dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d4:	23a8      	movs	r3, #168	; 0xa8
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fc8b 	bl	8002100 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f000 f820 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f001 feec 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800081e:	f000 f809 	bl	8000834 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <UB_VGA_Screen_Init+0x84>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <UB_VGA_Screen_Init+0x84>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <UB_VGA_Screen_Init+0x84>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <UB_VGA_Screen_Init+0x88>)
 800085c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000860:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8000862:	481b      	ldr	r0, [pc, #108]	; (80008d0 <UB_VGA_Screen_Init+0x8c>)
 8000864:	f002 f910 	bl	8002a88 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000868:	210c      	movs	r1, #12
 800086a:	4819      	ldr	r0, [pc, #100]	; (80008d0 <UB_VGA_Screen_Init+0x8c>)
 800086c:	f002 f9c4 	bl	8002bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000870:	2108      	movs	r1, #8
 8000872:	4817      	ldr	r0, [pc, #92]	; (80008d0 <UB_VGA_Screen_Init+0x8c>)
 8000874:	f002 fa88 	bl	8002d88 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <UB_VGA_Screen_Init+0x90>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68da      	ldr	r2, [r3, #12]
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <UB_VGA_Screen_Init+0x90>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000886:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <UB_VGA_Screen_Init+0x90>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <UB_VGA_Screen_Init+0x90>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f042 0201 	orr.w	r2, r2, #1
 8000896:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8000898:	490f      	ldr	r1, [pc, #60]	; (80008d8 <UB_VGA_Screen_Init+0x94>)
 800089a:	f240 1341 	movw	r3, #321	; 0x141
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <UB_VGA_Screen_Init+0x98>)
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <UB_VGA_Screen_Init+0x9c>)
 80008a2:	f000 ff23 	bl	80016ec <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <UB_VGA_Screen_Init+0x9c>)
 80008a8:	f000 fe72 	bl	8001590 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <UB_VGA_Screen_Init+0x9c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <UB_VGA_Screen_Init+0x9c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f042 0210 	orr.w	r2, r2, #16
 80008ba:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <UB_VGA_Screen_Init+0xa0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a01      	ldr	r2, [pc, #4]	; (80008c8 <UB_VGA_Screen_Init+0x84>)
 80008c2:	6093      	str	r3, [r2, #8]
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000ac 	.word	0x200000ac
 80008cc:	40020400 	.word	0x40020400
 80008d0:	20012f50 	.word	0x20012f50
 80008d4:	20012ea8 	.word	0x20012ea8
 80008d8:	200000b8 	.word	0x200000b8
 80008dc:	40021015 	.word	0x40021015
 80008e0:	20012ef0 	.word	0x20012ef0
 80008e4:	40026488 	.word	0x40026488

080008e8 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	81bb      	strh	r3, [r7, #12]
 80008f6:	e012      	b.n	800091e <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80008f8:	2300      	movs	r3, #0
 80008fa:	81fb      	strh	r3, [r7, #14]
 80008fc:	e008      	b.n	8000910 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	89b9      	ldrh	r1, [r7, #12]
 8000902:	89fb      	ldrh	r3, [r7, #14]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f813 	bl	8000930 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800090a:	89fb      	ldrh	r3, [r7, #14]
 800090c:	3301      	adds	r3, #1
 800090e:	81fb      	strh	r3, [r7, #14]
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000916:	d3f2      	bcc.n	80008fe <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8000918:	89bb      	ldrh	r3, [r7, #12]
 800091a:	3301      	adds	r3, #1
 800091c:	81bb      	strh	r3, [r7, #12]
 800091e:	89bb      	ldrh	r3, [r7, #12]
 8000920:	2bef      	cmp	r3, #239	; 0xef
 8000922:	d9e9      	bls.n	80008f8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	460b      	mov	r3, r1
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000948:	d301      	bcc.n	800094e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	2bef      	cmp	r3, #239	; 0xef
 8000952:	d901      	bls.n	8000958 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8000958:	88ba      	ldrh	r2, [r7, #4]
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	441a      	add	r2, r3
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	4413      	add	r3, r2
 8000968:	4904      	ldr	r1, [pc, #16]	; (800097c <UB_VGA_SetPixel+0x4c>)
 800096a:	78fa      	ldrb	r2, [r7, #3]
 800096c:	54ca      	strb	r2, [r1, r3]
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200000b8 	.word	0x200000b8

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 fc82 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <DMA1_Stream5_IRQHandler+0x10>)
 8000a32:	f000 ff45 	bl	80018c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20012f98 	.word	0x20012f98

08000a40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <DMA1_Stream6_IRQHandler+0x10>)
 8000a46:	f000 ff3b 	bl	80018c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20012ff8 	.word	0x20012ff8

08000a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a58:	4828      	ldr	r0, [pc, #160]	; (8000afc <TIM2_IRQHandler+0xa8>)
 8000a5a:	f002 faa3 	bl	8002fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <TIM2_IRQHandler+0xa8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f06f 0208 	mvn.w	r2, #8
 8000a66:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000a68:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000a72:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000a7c:	d905      	bls.n	8000a8a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000a84:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <TIM2_IRQHandler+0xb0>)
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000a88:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d802      	bhi.n	8000a98 <TIM2_IRQHandler+0x44>
 8000a92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a96:	e001      	b.n	8000a9c <TIM2_IRQHandler+0x48>
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	4a1a      	ldr	r2, [pc, #104]	; (8000b08 <TIM2_IRQHandler+0xb4>)
 8000a9e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	2b23      	cmp	r3, #35	; 0x23
 8000aa6:	d927      	bls.n	8000af8 <TIM2_IRQHandler+0xa4>
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	f240 2202 	movw	r2, #514	; 0x202
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d821      	bhi.n	8000af8 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <TIM2_IRQHandler+0xb8>)
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <TIM2_IRQHandler+0xb8>)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <TIM2_IRQHandler+0xbc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <TIM2_IRQHandler+0xbc>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <TIM2_IRQHandler+0xc0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <TIM2_IRQHandler+0xc0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d005      	beq.n	8000af8 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000af4:	4a02      	ldr	r2, [pc, #8]	; (8000b00 <TIM2_IRQHandler+0xac>)
 8000af6:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20012f50 	.word	0x20012f50
 8000b00:	200000ac 	.word	0x200000ac
 8000b04:	200000b8 	.word	0x200000b8
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40026488 	.word	0x40026488
 8000b10:	40010000 	.word	0x40010000
 8000b14:	20012ef0 	.word	0x20012ef0

08000b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <USART2_IRQHandler+0x24>)
 8000b1e:	f003 fa19 	bl	8003f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <USART2_IRQHandler+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	2b10      	cmp	r3, #16
 8000b2e:	d102      	bne.n	8000b36 <USART2_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart2);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <USART2_IRQHandler+0x24>)
 8000b32:	f000 fab9 	bl	80010a8 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20013158 	.word	0x20013158

08000b40 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  // if (__HAL_DMA_GET_IT_SOURCE(&hdma_tim1_up, DMA_IT_TC)) // not needed?
  // {
    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <DMA2_Stream5_IRQHandler+0x48>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6a1a      	ldr	r2, [r3, #32]
 8000b4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10f      	bne.n	8000b74 <DMA2_Stream5_IRQHandler+0x34>
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <DMA2_Stream5_IRQHandler+0x48>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6a1a      	ldr	r2, [r3, #32]
 8000b5a:	f240 4344 	movw	r3, #1092	; 0x444
 8000b5e:	4013      	ands	r3, r2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d107      	bne.n	8000b74 <DMA2_Stream5_IRQHandler+0x34>
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <DMA2_Stream5_IRQHandler+0x48>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <DMA2_Stream5_IRQHandler+0x48>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <DMA2_Stream5_IRQHandler+0x4c>)
 8000b76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b7a:	619a      	str	r2, [r3, #24]
  // }

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <DMA2_Stream5_IRQHandler+0x50>)
 8000b7e:	f000 fe9f 	bl	80018c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20012ea8 	.word	0x20012ea8
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	20012ef0 	.word	0x20012ef0

08000b94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x50>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x16>
		heap_end = &end;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <_sbrk+0x50>)
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <_sbrk+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <_sbrk+0x50>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <_sbrk+0x50>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	466a      	mov	r2, sp
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d907      	bls.n	8000bce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bbe:	f004 f8f3 	bl	8004da8 <__errno>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	220c      	movs	r2, #12
 8000bc6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	e006      	b.n	8000bdc <_sbrk+0x48>
	}

	heap_end += incr;
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_sbrk+0x50>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a03      	ldr	r2, [pc, #12]	; (8000be4 <_sbrk+0x50>)
 8000bd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000009c 	.word	0x2000009c
 8000be8:	200131b0 	.word	0x200131b0

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SystemInit+0x28>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <SystemInit+0x28>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SystemInit+0x28>)
 8000c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c06:	609a      	str	r2, [r3, #8]
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <MX_TIM1_Init+0x9c>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c48:	220b      	movs	r2, #11
 8000c4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c60:	f001 fec2 	bl	80029e8 <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000c6a:	f7ff fde3 	bl	8000834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c7c:	f002 fb58 	bl	8003330 <HAL_TIM_ConfigClockSource>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c86:	f7ff fdd5 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c98:	f002 ff50 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000ca2:	f7ff fdc7 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20012ea8 	.word	0x20012ea8
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
 8000cd6:	615a      	str	r2, [r3, #20]
 8000cd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000cf0:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000cf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d02:	4820      	ldr	r0, [pc, #128]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000d04:	f001 ff28 	bl	8002b58 <HAL_TIM_PWM_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d0e:	f7ff fd91 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1a:	f107 0320 	add.w	r3, r7, #32
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4818      	ldr	r0, [pc, #96]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000d22:	f002 ff0b 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d2c:	f7ff fd82 	bl	8000834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d30:	2360      	movs	r3, #96	; 0x60
 8000d32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000d34:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000d38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2208      	movs	r2, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	480e      	ldr	r0, [pc, #56]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000d4a:	f002 fa33 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d54:	f7ff fd6e 	bl	8000834 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000d58:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	220c      	movs	r2, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000d66:	f002 fa25 	bl	80031b4 <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000d70:	f7ff fd60 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM2_Init+0xcc>)
 8000d76:	f000 f87f 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20012f50 	.word	0x20012f50

08000d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <HAL_TIM_Base_MspInit+0x94>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d13c      	bne.n	8000e14 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_TIM_Base_MspInit+0x98>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_TIM_Base_MspInit+0x98>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_TIM_Base_MspInit+0x98>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dbe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000dc2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dc6:	2240      	movs	r2, #64	; 0x40
 8000dc8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000df8:	480a      	ldr	r0, [pc, #40]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000dfa:	f000 fbc9 	bl	8001590 <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000e04:	f7ff fd16 	bl	8000834 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000e0c:	621a      	str	r2, [r3, #32]
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010000 	.word	0x40010000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	20012ef0 	.word	0x20012ef0
 8000e28:	40026488 	.word	0x40026488

08000e2c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e3c:	d115      	bne.n	8000e6a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_TIM_PWM_MspInit+0x48>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_TIM_PWM_MspInit+0x48>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_TIM_PWM_MspInit+0x48>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201c      	movs	r0, #28
 8000e60:	f000 fb5f 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e64:	201c      	movs	r0, #28
 8000e66:	f000 fb78 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	d11e      	bne.n	8000ed8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000ed4:	f000 ff5e 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <MX_USART2_UART_Init+0x50>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f20:	f002 fe9c 	bl	8003c5c <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2a:	f7ff fc83 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20013158 	.word	0x20013158
 8000f38:	40004400 	.word	0x40004400

08000f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a4c      	ldr	r2, [pc, #304]	; (800108c <HAL_UART_MspInit+0x150>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f040 8091 	bne.w	8001082 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a49      	ldr	r2, [pc, #292]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_UART_MspInit+0x154>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f98:	230c      	movs	r3, #12
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4838      	ldr	r0, [pc, #224]	; (8001094 <HAL_UART_MspInit+0x158>)
 8000fb4:	f000 feee 	bl	8001d94 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fba:	4a38      	ldr	r2, [pc, #224]	; (800109c <HAL_UART_MspInit+0x160>)
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ffa:	4827      	ldr	r0, [pc, #156]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8000ffc:	f000 fac8 	bl	8001590 <HAL_DMA_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001006:	f7ff fc15 	bl	8000834 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <HAL_UART_MspInit+0x15c>)
 800100e:	639a      	str	r2, [r3, #56]	; 0x38
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <HAL_UART_MspInit+0x15c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <HAL_UART_MspInit+0x168>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800101e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001022:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001036:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <HAL_UART_MspInit+0x164>)
 8001058:	f000 fa9a 	bl	8001590 <HAL_DMA_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001062:	f7ff fbe7 	bl	8000834 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_UART_MspInit+0x164>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2026      	movs	r0, #38	; 0x26
 8001078:	f000 fa53 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800107c:	2026      	movs	r0, #38	; 0x26
 800107e:	f000 fa6c 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004400 	.word	0x40004400
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	20012f98 	.word	0x20012f98
 800109c:	40026088 	.word	0x40026088
 80010a0:	20012ff8 	.word	0x20012ff8
 80010a4:	400260a0 	.word	0x400260a0

080010a8 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	f040 808d 	bne.w	80011da <HAL_UART_RxCpltCallback+0x132>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);												// clear the interrupt
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <HAL_UART_RxCpltCallback+0x148>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <HAL_UART_RxCpltCallback+0x148>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
		RxCounter++;																	// increment the Rx Counter
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_UART_RxCpltCallback+0x14c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <HAL_UART_RxCpltCallback+0x14c>)
 80010e0:	701a      	strb	r2, [r3, #0]

		uint8_t TxSize = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75fb      	strb	r3, [r7, #23]
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <HAL_UART_RxCpltCallback+0x150>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	823b      	strh	r3, [r7, #16]
		RxBfrPos = RX_BUFSIZE - (uint16_t)huart->hdmarx->Instance->NDTR;				// determine actual buffer position
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	425b      	negs	r3, r3
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <HAL_UART_RxCpltCallback+0x150>)
 80010fc:	701a      	strb	r2, [r3, #0]
		uint16_t len = RX_BUFSIZE;														// init len with max. size
 80010fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001102:	82bb      	strh	r3, [r7, #20]

		if(RxRollover < 2)  {
 8001104:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <HAL_UART_RxCpltCallback+0x154>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d81e      	bhi.n	800114a <HAL_UART_RxCpltCallback+0xa2>
			if(RxRollover) {															// rolled over once
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_UART_RxCpltCallback+0x154>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_UART_RxCpltCallback+0x94>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BUFSIZE - start;				// no bytes overwritten
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <HAL_UART_RxCpltCallback+0x150>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	8a3a      	ldrh	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d309      	bcc.n	8001134 <HAL_UART_RxCpltCallback+0x8c>
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_UART_RxCpltCallback+0x150>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b29a      	uxth	r2, r3
 8001126:	8a3b      	ldrh	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b29b      	uxth	r3, r3
 800112c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001130:	82bb      	strh	r3, [r7, #20]
 8001132:	e00d      	b.n	8001150 <HAL_UART_RxCpltCallback+0xa8>
				else len = RX_BUFSIZE + 1;												// bytes overwritten error
 8001134:	f240 1301 	movw	r3, #257	; 0x101
 8001138:	82bb      	strh	r3, [r7, #20]
 800113a:	e009      	b.n	8001150 <HAL_UART_RxCpltCallback+0xa8>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_UART_RxCpltCallback+0x150>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b29a      	uxth	r2, r3
 8001142:	8a3b      	ldrh	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	82bb      	strh	r3, [r7, #20]
 8001148:	e002      	b.n	8001150 <HAL_UART_RxCpltCallback+0xa8>
			}
		} else {
			len = RX_BUFSIZE + 2;														// dual rollover error
 800114a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800114e:	82bb      	strh	r3, [r7, #20]
		}

		if(len && (len <= RX_BUFSIZE)) {
 8001150:	8abb      	ldrh	r3, [r7, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d029      	beq.n	80011aa <HAL_UART_RxCpltCallback+0x102>
 8001156:	8abb      	ldrh	r3, [r7, #20]
 8001158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800115c:	d825      	bhi.n	80011aa <HAL_UART_RxCpltCallback+0x102>
			// create response message
			#ifdef UART_DBG
				sprintf(UART2_txBuffer, "ACK RxC:%d S:%d L:%d RO:%d RXp:%d >>", RxCounter, start, len, RxRollover, RxBfrPos);

			#else
				sprintf(UART2_txBuffer, "U heeft ingevoerd:");
 800115e:	4928      	ldr	r1, [pc, #160]	; (8001200 <HAL_UART_RxCpltCallback+0x158>)
 8001160:	4828      	ldr	r0, [pc, #160]	; (8001204 <HAL_UART_RxCpltCallback+0x15c>)
 8001162:	f003 fe53 	bl	8004e0c <siprintf>
			#endif
			TxSize = strlen(UART2_txBuffer);
 8001166:	4827      	ldr	r0, [pc, #156]	; (8001204 <HAL_UART_RxCpltCallback+0x15c>)
 8001168:	f7ff f832 	bl	80001d0 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	75fb      	strb	r3, [r7, #23]

			// add received bytes to UART2_txBuffer
			uint8_t i;
			for(i = 0; i < len; i++) *(UART2_txBuffer + TxSize + i) = *(UART2_rxBuffer + ((start + i) % RX_BUFSIZE));
 8001170:	2300      	movs	r3, #0
 8001172:	74fb      	strb	r3, [r7, #19]
 8001174:	e00f      	b.n	8001196 <HAL_UART_RxCpltCallback+0xee>
 8001176:	8a3a      	ldrh	r2, [r7, #16]
 8001178:	7cfb      	ldrb	r3, [r7, #19]
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_UART_RxCpltCallback+0x160>)
 8001180:	441a      	add	r2, r3
 8001182:	7df9      	ldrb	r1, [r7, #23]
 8001184:	7cfb      	ldrb	r3, [r7, #19]
 8001186:	440b      	add	r3, r1
 8001188:	491e      	ldr	r1, [pc, #120]	; (8001204 <HAL_UART_RxCpltCallback+0x15c>)
 800118a:	440b      	add	r3, r1
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	7cfb      	ldrb	r3, [r7, #19]
 8001192:	3301      	adds	r3, #1
 8001194:	74fb      	strb	r3, [r7, #19]
 8001196:	7cfb      	ldrb	r3, [r7, #19]
 8001198:	b29b      	uxth	r3, r3
 800119a:	8aba      	ldrh	r2, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8ea      	bhi.n	8001176 <HAL_UART_RxCpltCallback+0xce>
			TxSize += i;
 80011a0:	7dfa      	ldrb	r2, [r7, #23]
 80011a2:	7cfb      	ldrb	r3, [r7, #19]
 80011a4:	4413      	add	r3, r2
 80011a6:	75fb      	strb	r3, [r7, #23]
		if(len && (len <= RX_BUFSIZE)) {
 80011a8:	e00c      	b.n	80011c4 <HAL_UART_RxCpltCallback+0x11c>
		} else {
			// buffer overflow error:
			sprintf(UART2_txBuffer, "NAK RX BUFFER OVERFLOW ERROR %d\r\n", (len - RX_BUFSIZE));	// Change error message
 80011aa:	8abb      	ldrh	r3, [r7, #20]
 80011ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80011b0:	461a      	mov	r2, r3
 80011b2:	4916      	ldr	r1, [pc, #88]	; (800120c <HAL_UART_RxCpltCallback+0x164>)
 80011b4:	4813      	ldr	r0, [pc, #76]	; (8001204 <HAL_UART_RxCpltCallback+0x15c>)
 80011b6:	f003 fe29 	bl	8004e0c <siprintf>
			TxSize = strlen(UART2_txBuffer);
 80011ba:	4812      	ldr	r0, [pc, #72]	; (8001204 <HAL_UART_RxCpltCallback+0x15c>)
 80011bc:	f7ff f808 	bl	80001d0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	75fb      	strb	r3, [r7, #23]
		}

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)UART2_txBuffer, TxSize);						// send a response
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <HAL_UART_RxCpltCallback+0x15c>)
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <HAL_UART_RxCpltCallback+0x148>)
 80011ce:	f002 fe25 	bl	8003e1c <HAL_UART_Transmit_DMA>

		RxRollover = 0;																	// reset the Rollover variable
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_UART_RxCpltCallback+0x154>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	} else {
		// no idle flag? --> DMA rollover occurred
		RxRollover++;		// increment Rollover Counter
	}
}
 80011d8:	e005      	b.n	80011e6 <HAL_UART_RxCpltCallback+0x13e>
		RxRollover++;		// increment Rollover Counter
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_UART_RxCpltCallback+0x154>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_UART_RxCpltCallback+0x154>)
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20013158 	.word	0x20013158
 80011f4:	200000a1 	.word	0x200000a1
 80011f8:	200000a2 	.word	0x200000a2
 80011fc:	200000a0 	.word	0x200000a0
 8001200:	08005680 	.word	0x08005680
 8001204:	20013058 	.word	0x20013058
 8001208:	20012da8 	.word	0x20012da8
 800120c:	08005694 	.word	0x08005694

08001210 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;
	TxCounter++;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_UART_TxCpltCallback+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_UART_TxCpltCallback+0x20>)
 8001222:	701a      	strb	r2, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200000a3 	.word	0x200000a3

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800123a:	e003      	b.n	8001244 <LoopCopyDataInit>

0800123c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800123e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001242:	3104      	adds	r1, #4

08001244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800124a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800124c:	d3f6      	bcc.n	800123c <CopyDataInit>
  ldr  r2, =_sbss
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001250:	e002      	b.n	8001258 <LoopFillZerobss>

08001252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001254:	f842 3b04 	str.w	r3, [r2], #4

08001258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800125a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800125c:	d3f9      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800125e:	f7ff fcc5 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001262:	f003 fda7 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fa3d 	bl	80006e4 <main>
  bx  lr    
 800126a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800126c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001270:	0800571c 	.word	0x0800571c
  ldr  r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001278:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800127c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001280:	200131b0 	.word	0x200131b0

08001284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <HAL_Init+0x40>)
 8001292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_Init+0x40>)
 800129e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_Init+0x40>)
 80012aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f92b 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f808 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012bc:	f7ff fb60 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023c00 	.word	0x40023c00

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x54>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x58>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f943 	bl	8001576 <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00e      	b.n	8001318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d80a      	bhi.n	8001316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f90b 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_InitTick+0x5c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000010 	.word	0x20000010
 8001324:	20000018 	.word	0x20000018
 8001328:	20000014 	.word	0x20000014

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000018 	.word	0x20000018
 8001350:	2001319c 	.word	0x2001319c

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2001319c 	.word	0x2001319c

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff29 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff3e 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff31 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff feda 	bl	8001354 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e099      	b.n	80016e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015cc:	e00f      	b.n	80015ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ce:	f7ff fec1 	bl	8001354 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d908      	bls.n	80015ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2220      	movs	r2, #32
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2203      	movs	r2, #3
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e078      	b.n	80016e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1e8      	bne.n	80015ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_DMA_Init+0x158>)
 8001608:	4013      	ands	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800161a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	2b04      	cmp	r3, #4
 8001646:	d107      	bne.n	8001658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	4313      	orrs	r3, r2
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4313      	orrs	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f023 0307 	bic.w	r3, r3, #7
 800166e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4313      	orrs	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	2b04      	cmp	r3, #4
 8001680:	d117      	bne.n	80016b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00e      	beq.n	80016b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 fb01 	bl	8001c9c <DMA_CheckFifoParam>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016ae:	2301      	movs	r3, #1
 80016b0:	e016      	b.n	80016e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fab8 	bl	8001c30 <DMA_CalcBaseAndBitshift>
 80016c0:	4603      	mov	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	f010803f 	.word	0xf010803f

080016ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_DMA_Start_IT+0x26>
 800170e:	2302      	movs	r3, #2
 8001710:	e040      	b.n	8001794 <HAL_DMA_Start_IT+0xa8>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d12f      	bne.n	8001786 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2202      	movs	r2, #2
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fa4a 	bl	8001bd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	223f      	movs	r2, #63	; 0x3f
 8001746:	409a      	lsls	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0216 	orr.w	r2, r2, #22
 800175a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	2b00      	cmp	r3, #0
 8001762:	d007      	beq.n	8001774 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0208 	orr.w	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0201 	orr.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e005      	b.n	8001792 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800178e:	2302      	movs	r3, #2
 8001790:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017aa:	f7ff fdd3 	bl	8001354 <HAL_GetTick>
 80017ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d008      	beq.n	80017ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e052      	b.n	8001874 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0216 	bic.w	r2, r2, #22
 80017dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <HAL_DMA_Abort+0x62>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0208 	bic.w	r2, r2, #8
 800180c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181e:	e013      	b.n	8001848 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001820:	f7ff fd98 	bl	8001354 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b05      	cmp	r3, #5
 800182c:	d90c      	bls.n	8001848 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2220      	movs	r2, #32
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e015      	b.n	8001874 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1e4      	bne.n	8001820 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	223f      	movs	r2, #63	; 0x3f
 800185c:	409a      	lsls	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d004      	beq.n	800189a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00c      	b.n	80018b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2205      	movs	r2, #5
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018cc:	4b92      	ldr	r3, [pc, #584]	; (8001b18 <HAL_DMA_IRQHandler+0x258>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a92      	ldr	r2, [pc, #584]	; (8001b1c <HAL_DMA_IRQHandler+0x25c>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0a9b      	lsrs	r3, r3, #10
 80018d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2208      	movs	r2, #8
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01a      	beq.n	800192c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0204 	bic.w	r2, r2, #4
 8001912:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2208      	movs	r2, #8
 800191a:	409a      	lsls	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001930:	2201      	movs	r2, #1
 8001932:	409a      	lsls	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d012      	beq.n	8001962 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	2201      	movs	r2, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f043 0202 	orr.w	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2204      	movs	r2, #4
 8001968:	409a      	lsls	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d012      	beq.n	8001998 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	2204      	movs	r2, #4
 8001986:	409a      	lsls	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001990:	f043 0204 	orr.w	r2, r3, #4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199c:	2210      	movs	r2, #16
 800199e:	409a      	lsls	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d043      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d03c      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	2210      	movs	r2, #16
 80019bc:	409a      	lsls	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d018      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d108      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d024      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
 80019ee:	e01f      	b.n	8001a30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01b      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
 8001a00:	e016      	b.n	8001a30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d107      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0208 	bic.w	r2, r2, #8
 8001a1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	2220      	movs	r2, #32
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 808e 	beq.w	8001b5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8086 	beq.w	8001b5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	2220      	movs	r2, #32
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d136      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0216 	bic.w	r2, r2, #22
 8001a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <HAL_DMA_IRQHandler+0x1da>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0208 	bic.w	r2, r2, #8
 8001aa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	223f      	movs	r2, #63	; 0x3f
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d07d      	beq.n	8001bca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
        }
        return;
 8001ad6:	e078      	b.n	8001bca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01c      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d108      	bne.n	8001b06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d030      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
 8001b04:	e02b      	b.n	8001b5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d027      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
 8001b16:	e022      	b.n	8001b5e <HAL_DMA_IRQHandler+0x29e>
 8001b18:	20000010 	.word	0x20000010
 8001b1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10f      	bne.n	8001b4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0210 	bic.w	r2, r2, #16
 8001b3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d032      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d022      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2205      	movs	r2, #5
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d307      	bcc.n	8001ba6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f2      	bne.n	8001b8a <HAL_DMA_IRQHandler+0x2ca>
 8001ba4:	e000      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ba6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bca:	bf00      	nop
    }
  }
}
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop

08001bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b40      	cmp	r3, #64	; 0x40
 8001c00:	d108      	bne.n	8001c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c12:	e007      	b.n	8001c24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3b10      	subs	r3, #16
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <DMA_CalcBaseAndBitshift+0x64>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <DMA_CalcBaseAndBitshift+0x68>)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d909      	bls.n	8001c72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c66:	f023 0303 	bic.w	r3, r3, #3
 8001c6a:	1d1a      	adds	r2, r3, #4
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001c70:	e007      	b.n	8001c82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	aaaaaaab 	.word	0xaaaaaaab
 8001c98:	080056d0 	.word	0x080056d0

08001c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d11f      	bne.n	8001cf6 <DMA_CheckFifoParam+0x5a>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d856      	bhi.n	8001d6a <DMA_CheckFifoParam+0xce>
 8001cbc:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <DMA_CheckFifoParam+0x28>)
 8001cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc2:	bf00      	nop
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001ce7 	.word	0x08001ce7
 8001ccc:	08001cd5 	.word	0x08001cd5
 8001cd0:	08001d6b 	.word	0x08001d6b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d046      	beq.n	8001d6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce4:	e043      	b.n	8001d6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cee:	d140      	bne.n	8001d72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf4:	e03d      	b.n	8001d72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfe:	d121      	bne.n	8001d44 <DMA_CheckFifoParam+0xa8>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d837      	bhi.n	8001d76 <DMA_CheckFifoParam+0xda>
 8001d06:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <DMA_CheckFifoParam+0x70>)
 8001d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0c:	08001d1d 	.word	0x08001d1d
 8001d10:	08001d23 	.word	0x08001d23
 8001d14:	08001d1d 	.word	0x08001d1d
 8001d18:	08001d35 	.word	0x08001d35
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d20:	e030      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d025      	beq.n	8001d7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d32:	e022      	b.n	8001d7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d3c:	d11f      	bne.n	8001d7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d42:	e01c      	b.n	8001d7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d903      	bls.n	8001d52 <DMA_CheckFifoParam+0xb6>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d003      	beq.n	8001d58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d50:	e018      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
      break;
 8001d56:	e015      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00e      	beq.n	8001d82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      break;
 8001d68:	e00b      	b.n	8001d82 <DMA_CheckFifoParam+0xe6>
      break;
 8001d6a:	bf00      	nop
 8001d6c:	e00a      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      break;
 8001d6e:	bf00      	nop
 8001d70:	e008      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      break;
 8001d72:	bf00      	nop
 8001d74:	e006      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      break;
 8001d76:	bf00      	nop
 8001d78:	e004      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      break;
 8001d7a:	bf00      	nop
 8001d7c:	e002      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d7e:	bf00      	nop
 8001d80:	e000      	b.n	8001d84 <DMA_CheckFifoParam+0xe8>
      break;
 8001d82:	bf00      	nop
    }
  } 
  
  return status; 
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	e16b      	b.n	8002088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f040 815a 	bne.w	8002082 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d005      	beq.n	8001de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d130      	bne.n	8001e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 0201 	and.w	r2, r3, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d017      	beq.n	8001e84 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d123      	bne.n	8001ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	08da      	lsrs	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	69b9      	ldr	r1, [r7, #24]
 8001ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0203 	and.w	r2, r3, #3
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80b4 	beq.w	8002082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_GPIO_Init+0x30c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a5f      	ldr	r2, [pc, #380]	; (80020a0 <HAL_GPIO_Init+0x30c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_GPIO_Init+0x30c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f36:	4a5b      	ldr	r2, [pc, #364]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_GPIO_Init+0x314>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d02b      	beq.n	8001fba <HAL_GPIO_Init+0x226>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a51      	ldr	r2, [pc, #324]	; (80020ac <HAL_GPIO_Init+0x318>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d025      	beq.n	8001fb6 <HAL_GPIO_Init+0x222>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a50      	ldr	r2, [pc, #320]	; (80020b0 <HAL_GPIO_Init+0x31c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <HAL_GPIO_Init+0x21e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4f      	ldr	r2, [pc, #316]	; (80020b4 <HAL_GPIO_Init+0x320>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d019      	beq.n	8001fae <HAL_GPIO_Init+0x21a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4e      	ldr	r2, [pc, #312]	; (80020b8 <HAL_GPIO_Init+0x324>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_GPIO_Init+0x216>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4d      	ldr	r2, [pc, #308]	; (80020bc <HAL_GPIO_Init+0x328>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <HAL_GPIO_Init+0x212>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4c      	ldr	r2, [pc, #304]	; (80020c0 <HAL_GPIO_Init+0x32c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x20e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_GPIO_Init+0x330>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_GPIO_Init+0x20a>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e00e      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	e00c      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e00a      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e008      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001faa:	2304      	movs	r3, #4
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e004      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x228>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fcc:	4935      	ldr	r1, [pc, #212]	; (80020a4 <HAL_GPIO_Init+0x310>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffe:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002028:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <HAL_GPIO_Init+0x334>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002052:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_GPIO_Init+0x334>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_GPIO_Init+0x334>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_GPIO_Init+0x334>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b0f      	cmp	r3, #15
 800208c:	f67f ae90 	bls.w	8001db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40021400 	.word	0x40021400
 80020c0:	40021800 	.word	0x40021800
 80020c4:	40021c00 	.word	0x40021c00
 80020c8:	40013c00 	.word	0x40013c00

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	619a      	str	r2, [r3, #24]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e264      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211e:	4ba3      	ldr	r3, [pc, #652]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00c      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4ba0      	ldr	r3, [pc, #640]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d112      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b9d      	ldr	r3, [pc, #628]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b99      	ldr	r3, [pc, #612]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e23f      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a90      	ldr	r2, [pc, #576]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a87      	ldr	r2, [pc, #540]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a83      	ldr	r2, [pc, #524]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a80      	ldr	r2, [pc, #512]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f8cc 	bl	8001354 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f8c8 	bl	8001354 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e204      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f8b8 	bl	8001354 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f8b4 	bl	8001354 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1f0      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c4      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4952      	ldr	r1, [pc, #328]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_OscConfig+0x2b0>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff f86d 	bl	8001354 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff f869 	bl	8001354 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a5      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4940      	ldr	r1, [pc, #256]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_OscConfig+0x2b0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff f84c 	bl	8001354 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7ff f848 	bl	8001354 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e184      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d030      	beq.n	800234c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_RCC_OscConfig+0x2b4>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7ff f82c 	bl	8001354 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7ff f828 	bl	8001354 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e164      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
 800231e:	e015      	b.n	800234c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_OscConfig+0x2b4>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7ff f815 	bl	8001354 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232e:	f7ff f811 	bl	8001354 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e14d      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a0 	beq.w	800249a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d121      	bne.n	80023da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe ffd7 	bl	8001354 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e011      	b.n	80023ce <HAL_RCC_OscConfig+0x2ce>
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470000 	.word	0x42470000
 80023b4:	42470e80 	.word	0x42470e80
 80023b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7fe ffca 	bl	8001354 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e106      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_OscConfig+0x4e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
 80023e2:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a80      	ldr	r2, [pc, #512]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
 80023ee:	e01c      	b.n	800242a <HAL_RCC_OscConfig+0x32a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x312>
 80023f8:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
 8002404:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	e00b      	b.n	800242a <HAL_RCC_OscConfig+0x32a>
 8002412:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a74      	ldr	r2, [pc, #464]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b72      	ldr	r3, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a71      	ldr	r2, [pc, #452]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7fe ff8f 	bl	8001354 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe ff8b 	bl	8001354 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0c5      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ee      	beq.n	800243a <HAL_RCC_OscConfig+0x33a>
 800245c:	e014      	b.n	8002488 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7fe ff79 	bl	8001354 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe ff75 	bl	8001354 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0af      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	4b5a      	ldr	r3, [pc, #360]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a55      	ldr	r2, [pc, #340]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 809b 	beq.w	80025da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d05c      	beq.n	800256a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d141      	bne.n	800253c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe ff49 	bl	8001354 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe ff45 	bl	8001354 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e081      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	019b      	lsls	r3, r3, #6
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	4937      	ldr	r1, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe ff1e 	bl	8001354 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe ff1a 	bl	8001354 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e056      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x41c>
 800253a:	e04e      	b.n	80025da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe ff07 	bl	8001354 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe ff03 	bl	8001354 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e03f      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x44a>
 8002568:	e037      	b.n	80025da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e032      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d028      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d121      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d11a      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d111      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	3b01      	subs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40007000 	.word	0x40007000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	42470060 	.word	0x42470060

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fe38 	bl	8001354 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fe34 	bl	8001354 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fd98 	bl	80012cc <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080056b8 	.word	0x080056b8
 80027b4:	20000010 	.word	0x20000010
 80027b8:	20000014 	.word	0x20000014

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	2300      	movs	r3, #0
 80027ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	f200 80bd 	bhi.w	8002960 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ee:	e0b7      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b61      	ldr	r3, [pc, #388]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027f2:	60bb      	str	r3, [r7, #8]
       break;
 80027f4:	e0b7      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027f8:	60bb      	str	r3, [r7, #8]
      break;
 80027fa:	e0b4      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002804:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002806:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d04d      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	461a      	mov	r2, r3
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	ea02 0800 	and.w	r8, r2, r0
 800282a:	ea03 0901 	and.w	r9, r3, r1
 800282e:	4640      	mov	r0, r8
 8002830:	4649      	mov	r1, r9
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	014b      	lsls	r3, r1, #5
 800283c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002840:	0142      	lsls	r2, r0, #5
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	ebb0 0008 	subs.w	r0, r0, r8
 800284a:	eb61 0109 	sbc.w	r1, r1, r9
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	018b      	lsls	r3, r1, #6
 8002858:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800285c:	0182      	lsls	r2, r0, #6
 800285e:	1a12      	subs	r2, r2, r0
 8002860:	eb63 0301 	sbc.w	r3, r3, r1
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	00d9      	lsls	r1, r3, #3
 800286e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002872:	00d0      	lsls	r0, r2, #3
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	eb12 0208 	adds.w	r2, r2, r8
 800287c:	eb43 0309 	adc.w	r3, r3, r9
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	0259      	lsls	r1, r3, #9
 800288a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800288e:	0250      	lsls	r0, r2, #9
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	461a      	mov	r2, r3
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	f7fd fcee 	bl	8000280 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4613      	mov	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e04a      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	461a      	mov	r2, r3
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	ea02 0400 	and.w	r4, r2, r0
 80028c6:	ea03 0501 	and.w	r5, r3, r1
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	014b      	lsls	r3, r1, #5
 80028d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028dc:	0142      	lsls	r2, r0, #5
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	1b00      	subs	r0, r0, r4
 80028e4:	eb61 0105 	sbc.w	r1, r1, r5
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	018b      	lsls	r3, r1, #6
 80028f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028f6:	0182      	lsls	r2, r0, #6
 80028f8:	1a12      	subs	r2, r2, r0
 80028fa:	eb63 0301 	sbc.w	r3, r3, r1
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	00d9      	lsls	r1, r3, #3
 8002908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800290c:	00d0      	lsls	r0, r2, #3
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	1912      	adds	r2, r2, r4
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	f04f 0000 	mov.w	r0, #0
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	0299      	lsls	r1, r3, #10
 8002922:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002926:	0290      	lsls	r0, r2, #10
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	461a      	mov	r2, r3
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f7fd fca2 	bl	8000280 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4613      	mov	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	3301      	adds	r3, #1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	60bb      	str	r3, [r7, #8]
      break;
 800295e:	e002      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002962:	60bb      	str	r3, [r7, #8]
      break;
 8002964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002966:	68bb      	ldr	r3, [r7, #8]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000010 	.word	0x20000010

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	080056c8 	.word	0x080056c8

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffdc 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0b5b      	lsrs	r3, r3, #13
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	080056c8 	.word	0x080056c8

080029e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e041      	b.n	8002a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe f9ba 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 fd78 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e046      	b.n	8002b2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <HAL_TIM_Base_Start+0xb4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d022      	beq.n	8002af8 <HAL_TIM_Base_Start+0x70>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d01d      	beq.n	8002af8 <HAL_TIM_Base_Start+0x70>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_TIM_Base_Start+0xb8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d018      	beq.n	8002af8 <HAL_TIM_Base_Start+0x70>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_TIM_Base_Start+0xbc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d013      	beq.n	8002af8 <HAL_TIM_Base_Start+0x70>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_TIM_Base_Start+0xc0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_TIM_Base_Start+0x70>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <HAL_TIM_Base_Start+0xc4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_TIM_Base_Start+0x70>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a19      	ldr	r2, [pc, #100]	; (8002b50 <HAL_TIM_Base_Start+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_Base_Start+0x70>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_TIM_Base_Start+0xcc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d010      	beq.n	8002b2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	e007      	b.n	8002b2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40000c00 	.word	0x40000c00
 8002b4c:	40010400 	.word	0x40010400
 8002b50:	40014000 	.word	0x40014000
 8002b54:	40001800 	.word	0x40001800

08002b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e041      	b.n	8002bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe f954 	bl	8000e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 fcc0 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_TIM_PWM_Start+0x24>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e022      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d109      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x3e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e015      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d109      	bne.n	8002c50 <HAL_TIM_PWM_Start+0x58>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e008      	b.n	8002c62 <HAL_TIM_PWM_Start+0x6a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07c      	b.n	8002d64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_PWM_Start+0x82>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c78:	e013      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_PWM_Start+0x92>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c88:	e00b      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0xa2>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c98:	e003      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xaa>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 ff20 	bl	8003af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_TIM_PWM_Start+0x174>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_TIM_PWM_Start+0xcc>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <HAL_TIM_PWM_Start+0x178>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_PWM_Start+0xd0>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_TIM_PWM_Start+0xd2>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_TIM_PWM_Start+0x174>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x136>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d01d      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x136>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <HAL_TIM_PWM_Start+0x17c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x136>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_TIM_PWM_Start+0x180>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x136>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <HAL_TIM_PWM_Start+0x184>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x136>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_TIM_PWM_Start+0x178>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x136>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_TIM_PWM_Start+0x188>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x136>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HAL_TIM_PWM_Start+0x18c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d010      	beq.n	8002d62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	e007      	b.n	8002d62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40010400 	.word	0x40010400
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	40000c00 	.word	0x40000c00
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40001800 	.word	0x40001800

08002d88 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <HAL_TIM_PWM_Start_IT+0x24>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e022      	b.n	8002df2 <HAL_TIM_PWM_Start_IT+0x6a>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d109      	bne.n	8002dc6 <HAL_TIM_PWM_Start_IT+0x3e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	e015      	b.n	8002df2 <HAL_TIM_PWM_Start_IT+0x6a>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d109      	bne.n	8002de0 <HAL_TIM_PWM_Start_IT+0x58>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e008      	b.n	8002df2 <HAL_TIM_PWM_Start_IT+0x6a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0c2      	b.n	8002f80 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Start_IT+0x82>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e08:	e013      	b.n	8002e32 <HAL_TIM_PWM_Start_IT+0xaa>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Start_IT+0x92>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e18:	e00b      	b.n	8002e32 <HAL_TIM_PWM_Start_IT+0xaa>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start_IT+0xa2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e28:	e003      	b.n	8002e32 <HAL_TIM_PWM_Start_IT+0xaa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	d841      	bhi.n	8002ebc <HAL_TIM_PWM_Start_IT+0x134>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <HAL_TIM_PWM_Start_IT+0xb8>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002ebd 	.word	0x08002ebd
 8002e48:	08002ebd 	.word	0x08002ebd
 8002e4c:	08002ebd 	.word	0x08002ebd
 8002e50:	08002e87 	.word	0x08002e87
 8002e54:	08002ebd 	.word	0x08002ebd
 8002e58:	08002ebd 	.word	0x08002ebd
 8002e5c:	08002ebd 	.word	0x08002ebd
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002ebd 	.word	0x08002ebd
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	08002eab 	.word	0x08002eab
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0202 	orr.w	r2, r2, #2
 8002e82:	60da      	str	r2, [r3, #12]
      break;
 8002e84:	e01b      	b.n	8002ebe <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0204 	orr.w	r2, r2, #4
 8002e94:	60da      	str	r2, [r3, #12]
      break;
 8002e96:	e012      	b.n	8002ebe <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0208 	orr.w	r2, r2, #8
 8002ea6:	60da      	str	r2, [r3, #12]
      break;
 8002ea8:	e009      	b.n	8002ebe <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0210 	orr.w	r2, r2, #16
 8002eb8:	60da      	str	r2, [r3, #12]
      break;
 8002eba:	e000      	b.n	8002ebe <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8002ebc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fe12 	bl	8003af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_TIM_PWM_Start_IT+0x200>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_TIM_PWM_Start_IT+0x158>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <HAL_TIM_PWM_Start_IT+0x204>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIM_PWM_Start_IT+0x15c>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <HAL_TIM_PWM_Start_IT+0x15e>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_TIM_PWM_Start_IT+0x200>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d022      	beq.n	8002f4a <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d01d      	beq.n	8002f4a <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_TIM_PWM_Start_IT+0x208>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d018      	beq.n	8002f4a <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_TIM_PWM_Start_IT+0x20c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_TIM_PWM_Start_IT+0x210>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <HAL_TIM_PWM_Start_IT+0x204>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_TIM_PWM_Start_IT+0x214>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a16      	ldr	r2, [pc, #88]	; (8002fa0 <HAL_TIM_PWM_Start_IT+0x218>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d111      	bne.n	8002f6e <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b06      	cmp	r3, #6
 8002f5a:	d010      	beq.n	8002f7e <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	e007      	b.n	8002f7e <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40010400 	.word	0x40010400
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40001800 	.word	0x40001800

08002fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d122      	bne.n	8003000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d11b      	bne.n	8003000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0202 	mvn.w	r2, #2
 8002fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa7a 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa6c 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa7d 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d122      	bne.n	8003054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0204 	mvn.w	r2, #4
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa50 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa42 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fa53 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b08      	cmp	r3, #8
 8003060:	d122      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d11b      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0208 	mvn.w	r2, #8
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2204      	movs	r2, #4
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa26 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa18 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fa29 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0210 	mvn.w	r2, #16
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2208      	movs	r2, #8
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9fc 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f9ee 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f9ff 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0201 	mvn.w	r2, #1
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f9c8 	bl	80034b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d107      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fd7a 	bl	8003c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d107      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9c4 	bl	8003508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b20      	cmp	r3, #32
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b20      	cmp	r3, #32
 800319a:	d107      	bne.n	80031ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0220 	mvn.w	r2, #32
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fd44 	bl	8003c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0ac      	b.n	8003328 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	f200 809f 	bhi.w	800331c <HAL_TIM_PWM_ConfigChannel+0x168>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003219 	.word	0x08003219
 80031e8:	0800331d 	.word	0x0800331d
 80031ec:	0800331d 	.word	0x0800331d
 80031f0:	0800331d 	.word	0x0800331d
 80031f4:	08003259 	.word	0x08003259
 80031f8:	0800331d 	.word	0x0800331d
 80031fc:	0800331d 	.word	0x0800331d
 8003200:	0800331d 	.word	0x0800331d
 8003204:	0800329b 	.word	0x0800329b
 8003208:	0800331d 	.word	0x0800331d
 800320c:	0800331d 	.word	0x0800331d
 8003210:	0800331d 	.word	0x0800331d
 8003214:	080032db 	.word	0x080032db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fa1c 	bl	800365c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6999      	ldr	r1, [r3, #24]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	619a      	str	r2, [r3, #24]
      break;
 8003256:	e062      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fa6c 	bl	800373c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6999      	ldr	r1, [r3, #24]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	021a      	lsls	r2, r3, #8
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	619a      	str	r2, [r3, #24]
      break;
 8003298:	e041      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fac1 	bl	8003828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0208 	orr.w	r2, r2, #8
 80032b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0204 	bic.w	r2, r2, #4
 80032c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69d9      	ldr	r1, [r3, #28]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	61da      	str	r2, [r3, #28]
      break;
 80032d8:	e021      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fb15 	bl	8003910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69d9      	ldr	r1, [r3, #28]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	61da      	str	r2, [r3, #28]
      break;
 800331a:	e000      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800331c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIM_ConfigClockSource+0x18>
 8003344:	2302      	movs	r3, #2
 8003346:	e0b3      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x180>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003380:	d03e      	beq.n	8003400 <HAL_TIM_ConfigClockSource+0xd0>
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003386:	f200 8087 	bhi.w	8003498 <HAL_TIM_ConfigClockSource+0x168>
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	f000 8085 	beq.w	800349c <HAL_TIM_ConfigClockSource+0x16c>
 8003392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003396:	d87f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
 8003398:	2b70      	cmp	r3, #112	; 0x70
 800339a:	d01a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0xa2>
 800339c:	2b70      	cmp	r3, #112	; 0x70
 800339e:	d87b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
 80033a0:	2b60      	cmp	r3, #96	; 0x60
 80033a2:	d050      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x116>
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d877      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
 80033a8:	2b50      	cmp	r3, #80	; 0x50
 80033aa:	d03c      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xf6>
 80033ac:	2b50      	cmp	r3, #80	; 0x50
 80033ae:	d873      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d058      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x136>
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d86f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
 80033b8:	2b30      	cmp	r3, #48	; 0x30
 80033ba:	d064      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x156>
 80033bc:	2b30      	cmp	r3, #48	; 0x30
 80033be:	d86b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d060      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x156>
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d867      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05c      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x156>
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d05a      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033d0:	e062      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f000 fb65 	bl	8003ab0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	609a      	str	r2, [r3, #8]
      break;
 80033fe:	e04e      	b.n	800349e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f000 fb4e 	bl	8003ab0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003422:	609a      	str	r2, [r3, #8]
      break;
 8003424:	e03b      	b.n	800349e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	461a      	mov	r2, r3
 8003434:	f000 fac2 	bl	80039bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2150      	movs	r1, #80	; 0x50
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fb1b 	bl	8003a7a <TIM_ITRx_SetConfig>
      break;
 8003444:	e02b      	b.n	800349e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	461a      	mov	r2, r3
 8003454:	f000 fae1 	bl	8003a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2160      	movs	r1, #96	; 0x60
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fb0b 	bl	8003a7a <TIM_ITRx_SetConfig>
      break;
 8003464:	e01b      	b.n	800349e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f000 faa2 	bl	80039bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fafb 	bl	8003a7a <TIM_ITRx_SetConfig>
      break;
 8003484:	e00b      	b.n	800349e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f000 faf2 	bl	8003a7a <TIM_ITRx_SetConfig>
        break;
 8003496:	e002      	b.n	800349e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003498:	bf00      	nop
 800349a:	e000      	b.n	800349e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800349c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a40      	ldr	r2, [pc, #256]	; (8003630 <TIM_Base_SetConfig+0x114>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d00f      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3d      	ldr	r2, [pc, #244]	; (8003634 <TIM_Base_SetConfig+0x118>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3c      	ldr	r2, [pc, #240]	; (8003638 <TIM_Base_SetConfig+0x11c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3b      	ldr	r2, [pc, #236]	; (800363c <TIM_Base_SetConfig+0x120>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <TIM_Base_SetConfig+0x124>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <TIM_Base_SetConfig+0x114>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d027      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <TIM_Base_SetConfig+0x118>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d023      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <TIM_Base_SetConfig+0x11c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2a      	ldr	r2, [pc, #168]	; (800363c <TIM_Base_SetConfig+0x120>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a29      	ldr	r2, [pc, #164]	; (8003640 <TIM_Base_SetConfig+0x124>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d017      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a28      	ldr	r2, [pc, #160]	; (8003644 <TIM_Base_SetConfig+0x128>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a27      	ldr	r2, [pc, #156]	; (8003648 <TIM_Base_SetConfig+0x12c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a26      	ldr	r2, [pc, #152]	; (800364c <TIM_Base_SetConfig+0x130>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <TIM_Base_SetConfig+0x134>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a24      	ldr	r2, [pc, #144]	; (8003654 <TIM_Base_SetConfig+0x138>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d003      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a23      	ldr	r2, [pc, #140]	; (8003658 <TIM_Base_SetConfig+0x13c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <TIM_Base_SetConfig+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0xf8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <TIM_Base_SetConfig+0x124>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	615a      	str	r2, [r3, #20]
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800
 800363c:	40000c00 	.word	0x40000c00
 8003640:	40010400 	.word	0x40010400
 8003644:	40014000 	.word	0x40014000
 8003648:	40014400 	.word	0x40014400
 800364c:	40014800 	.word	0x40014800
 8003650:	40001800 	.word	0x40001800
 8003654:	40001c00 	.word	0x40001c00
 8003658:	40002000 	.word	0x40002000

0800365c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0303 	bic.w	r3, r3, #3
 8003692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f023 0302 	bic.w	r3, r3, #2
 80036a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a20      	ldr	r2, [pc, #128]	; (8003734 <TIM_OC1_SetConfig+0xd8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_OC1_SetConfig+0x64>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <TIM_OC1_SetConfig+0xdc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10c      	bne.n	80036da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f023 0308 	bic.w	r3, r3, #8
 80036c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <TIM_OC1_SetConfig+0xd8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_OC1_SetConfig+0x8e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a14      	ldr	r2, [pc, #80]	; (8003738 <TIM_OC1_SetConfig+0xdc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40010000 	.word	0x40010000
 8003738:	40010400 	.word	0x40010400

0800373c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0210 	bic.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0320 	bic.w	r3, r3, #32
 8003786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <TIM_OC2_SetConfig+0xe4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_OC2_SetConfig+0x68>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <TIM_OC2_SetConfig+0xe8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d10d      	bne.n	80037c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a17      	ldr	r2, [pc, #92]	; (8003820 <TIM_OC2_SetConfig+0xe4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_OC2_SetConfig+0x94>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a16      	ldr	r2, [pc, #88]	; (8003824 <TIM_OC2_SetConfig+0xe8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d113      	bne.n	80037f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a21      	ldr	r2, [pc, #132]	; (8003908 <TIM_OC3_SetConfig+0xe0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_OC3_SetConfig+0x66>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a20      	ldr	r2, [pc, #128]	; (800390c <TIM_OC3_SetConfig+0xe4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10d      	bne.n	80038aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a16      	ldr	r2, [pc, #88]	; (8003908 <TIM_OC3_SetConfig+0xe0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <TIM_OC3_SetConfig+0x92>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <TIM_OC3_SetConfig+0xe4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d113      	bne.n	80038e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	bf00      	nop
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40010000 	.word	0x40010000
 800390c:	40010400 	.word	0x40010400

08003910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800395a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	031b      	lsls	r3, r3, #12
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <TIM_OC4_SetConfig+0xa4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_OC4_SetConfig+0x68>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <TIM_OC4_SetConfig+0xa8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d109      	bne.n	800398c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800397e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40010400 	.word	0x40010400

080039bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f023 030a 	bic.w	r3, r3, #10
 80039f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b087      	sub	sp, #28
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0210 	bic.w	r2, r3, #16
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	031b      	lsls	r3, r3, #12
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f043 0307 	orr.w	r3, r3, #7
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	609a      	str	r2, [r3, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	021a      	lsls	r2, r3, #8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2201      	movs	r2, #1
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a1a      	ldr	r2, [r3, #32]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1a      	ldr	r2, [r3, #32]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e05a      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a21      	ldr	r2, [pc, #132]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d01d      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40010400 	.word	0x40010400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40001800 	.word	0x40001800

08003c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e03f      	b.n	8003cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd f95a 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	; 0x24
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fe19 	bl	80048d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b08a      	sub	sp, #40	; 0x28
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d17c      	bne.n	8003e10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_UART_Transmit+0x2c>
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e075      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x3e>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e06e      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2221      	movs	r2, #33	; 0x21
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd fb03 	bl	8001354 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	88fa      	ldrh	r2, [r7, #6]
 8003d5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	d108      	bne.n	8003d78 <HAL_UART_Transmit+0x82>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e003      	b.n	8003d80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d88:	e02a      	b.n	8003de0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fb9a 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e036      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	e007      	b.n	8003dd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1cf      	bne.n	8003d8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2140      	movs	r1, #64	; 0x40
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb6a 	bl	80044ce <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e006      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d153      	bne.n	8003ede <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_UART_Transmit_DMA+0x26>
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e04c      	b.n	8003ee0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_UART_Transmit_DMA+0x38>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e045      	b.n	8003ee0 <HAL_UART_Transmit_DMA+0xc4>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2221      	movs	r2, #33	; 0x21
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_UART_Transmit_DMA+0xcc>)
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_UART_Transmit_DMA+0xd0>)
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <HAL_UART_Transmit_DMA+0xd4>)
 8003e92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e98:	2200      	movs	r2, #0
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	f7fd fc1a 	bl	80016ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ed8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	08004301 	.word	0x08004301
 8003eec:	08004353 	.word	0x08004353
 8003ef0:	0800443b 	.word	0x0800443b

08003ef4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d11d      	bne.n	8003f4a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_Receive_DMA+0x26>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e016      	b.n	8003f4c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Receive_DMA+0x38>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e00f      	b.n	8003f4c <HAL_UART_Receive_DMA+0x58>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fb0f 	bl	8004564 <UART_Start_Receive_DMA>
 8003f46:	4603      	mov	r3, r0
 8003f48:	e000      	b.n	8003f4c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	; 0x28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x52>
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fc03 	bl	80047aa <UART_Receive_IT>
      return;
 8003fa4:	e17c      	b.n	80042a0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80b1 	beq.w	8004110 <HAL_UART_IRQHandler+0x1bc>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x70>
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80a6 	beq.w	8004110 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x90>
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_UART_IRQHandler+0xb0>
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f043 0202 	orr.w	r2, r3, #2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_UART_IRQHandler+0xd0>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f043 0204 	orr.w	r2, r3, #4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00f      	beq.n	800404e <HAL_UART_IRQHandler+0xfa>
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <HAL_UART_IRQHandler+0xee>
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0208 	orr.w	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 811f 	beq.w	8004296 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_UART_IRQHandler+0x11e>
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fb9c 	bl	80047aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_UART_IRQHandler+0x146>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d031      	beq.n	80040fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fadc 	bl	8004658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d123      	bne.n	80040f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d013      	beq.n	80040ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_UART_IRQHandler+0x354>)
 80040cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd fbd2 	bl	800187c <HAL_DMA_Abort_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040e8:	4610      	mov	r0, r2
 80040ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	e00e      	b.n	800410c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8f0 	bl	80042d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	e00a      	b.n	800410c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8ec 	bl	80042d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e006      	b.n	800410c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8e8 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800410a:	e0c4      	b.n	8004296 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	bf00      	nop
    return;
 800410e:	e0c2      	b.n	8004296 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 80a2 	bne.w	800425e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 809c 	beq.w	800425e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8096 	beq.w	800425e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d14f      	bne.n	80041f6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004160:	8a3b      	ldrh	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8099 	beq.w	800429a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800416c:	8a3a      	ldrh	r2, [r7, #16]
 800416e:	429a      	cmp	r2, r3
 8004170:	f080 8093 	bcs.w	800429a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8a3a      	ldrh	r2, [r7, #16]
 8004178:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004184:	d02b      	beq.n	80041de <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004194:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0210 	bic.w	r2, r2, #16
 80041d2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fd fadf 	bl	800179c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4619      	mov	r1, r3
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f87a 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041f4:	e051      	b.n	800429a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d047      	beq.n	800429e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800420e:	8a7b      	ldrh	r3, [r7, #18]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d044      	beq.n	800429e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004222:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0210 	bic.w	r2, r2, #16
 8004250:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004252:	8a7b      	ldrh	r3, [r7, #18]
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f846 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800425c:	e01f      	b.n	800429e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_UART_IRQHandler+0x326>
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa31 	bl	80046da <UART_Transmit_IT>
    return;
 8004278:	e012      	b.n	80042a0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <HAL_UART_IRQHandler+0x34c>
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa73 	bl	800477a <UART_EndTransmit_IT>
    return;
 8004294:	e004      	b.n	80042a0 <HAL_UART_IRQHandler+0x34c>
    return;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <HAL_UART_IRQHandler+0x34c>
      return;
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <HAL_UART_IRQHandler+0x34c>
      return;
 800429e:	bf00      	nop
  }
}
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	080046b3 	.word	0x080046b3

080042ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d113      	bne.n	8004344 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004330:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004340:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004342:	e002      	b.n	800434a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7fc ff63 	bl	8001210 <HAL_UART_TxCpltCallback>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff ffa3 	bl	80042ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d12a      	bne.n	80043e0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800439e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d107      	bne.n	80043e0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0210 	bic.w	r2, r2, #16
 80043de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d106      	bne.n	80043f6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ec:	4619      	mov	r1, r3
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ff7a 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043f4:	e002      	b.n	80043fc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7fc fe56 	bl	80010a8 <HAL_UART_RxCpltCallback>
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	4619      	mov	r1, r3
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff ff5f 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800442a:	e002      	b.n	8004432 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff ff47 	bl	80042c0 <HAL_UART_RxHalfCpltCallback>
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	bf0c      	ite	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	2300      	movne	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b21      	cmp	r3, #33	; 0x21
 800446c:	d108      	bne.n	8004480 <UART_DMAError+0x46>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800447a:	68b8      	ldr	r0, [r7, #8]
 800447c:	f000 f8d6 	bl	800462c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	bf0c      	ite	eq
 800448e:	2301      	moveq	r3, #1
 8004490:	2300      	movne	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b22      	cmp	r3, #34	; 0x22
 80044a0:	d108      	bne.n	80044b4 <UART_DMAError+0x7a>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2200      	movs	r2, #0
 80044ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80044ae:	68b8      	ldr	r0, [r7, #8]
 80044b0:	f000 f8d2 	bl	8004658 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0210 	orr.w	r2, r3, #16
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044c0:	68b8      	ldr	r0, [r7, #8]
 80044c2:	f7ff ff07 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044de:	e02c      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d028      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0x30>
 80044ee:	f7fc ff31 	bl	8001354 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d21d      	bcs.n	800453a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800450c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e00f      	b.n	800455a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	429a      	cmp	r2, r3
 8004556:	d0c3      	beq.n	80044e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2222      	movs	r2, #34	; 0x22
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	4a23      	ldr	r2, [pc, #140]	; (8004620 <UART_Start_Receive_DMA+0xbc>)
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <UART_Start_Receive_DMA+0xc0>)
 800459a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	4a21      	ldr	r2, [pc, #132]	; (8004628 <UART_Start_Receive_DMA+0xc4>)
 80045a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	2200      	movs	r2, #0
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80045ac:	f107 0308 	add.w	r3, r7, #8
 80045b0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	f7fd f892 	bl	80016ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045c8:	2300      	movs	r3, #0
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695a      	ldr	r2, [r3, #20]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004614:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	0800436f 	.word	0x0800436f
 8004624:	08004405 	.word	0x08004405
 8004628:	0800443b 	.word	0x0800443b

0800462c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004642:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800466e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	2b01      	cmp	r3, #1
 8004686:	d107      	bne.n	8004698 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0210 	bic.w	r2, r2, #16
 8004696:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fe01 	bl	80042d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b21      	cmp	r3, #33	; 0x21
 80046ec:	d13e      	bne.n	800476c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d114      	bne.n	8004722 <UART_Transmit_IT+0x48>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d110      	bne.n	8004722 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]
 8004720:	e008      	b.n	8004734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6211      	str	r1, [r2, #32]
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29b      	uxth	r3, r3
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4619      	mov	r1, r3
 8004742:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fc fd38 	bl	8001210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b22      	cmp	r3, #34	; 0x22
 80047bc:	f040 8087 	bne.w	80048ce <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c8:	d117      	bne.n	80047fa <UART_Receive_IT+0x50>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d113      	bne.n	80047fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	1c9a      	adds	r2, r3, #2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
 80047f8:	e026      	b.n	8004848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d007      	beq.n	800481e <UART_Receive_IT+0x74>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <UART_Receive_IT+0x82>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e008      	b.n	800483e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29b      	uxth	r3, r3
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4619      	mov	r1, r3
 8004856:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004858:	2b00      	cmp	r3, #0
 800485a:	d136      	bne.n	80048ca <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0220 	bic.w	r2, r2, #32
 800486a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10e      	bne.n	80048ba <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0210 	bic.w	r2, r2, #16
 80048aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff fd18 	bl	80042e8 <HAL_UARTEx_RxEventCallback>
 80048b8:	e002      	b.n	80048c0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fbf4 	bl	80010a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e002      	b.n	80048d0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	b09f      	sub	sp, #124	; 0x7c
 80048de:	af00      	add	r7, sp, #0
 80048e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	68d9      	ldr	r1, [r3, #12]
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	ea40 0301 	orr.w	r3, r0, r1
 80048f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	431a      	orrs	r2, r3
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	431a      	orrs	r2, r3
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	4313      	orrs	r3, r2
 8004910:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800491c:	f021 010c 	bic.w	r1, r1, #12
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004926:	430b      	orrs	r3, r1
 8004928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	6999      	ldr	r1, [r3, #24]
 8004938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	ea40 0301 	orr.w	r3, r0, r1
 8004940:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4bc5      	ldr	r3, [pc, #788]	; (8004c5c <UART_SetConfig+0x384>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d004      	beq.n	8004956 <UART_SetConfig+0x7e>
 800494c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4bc3      	ldr	r3, [pc, #780]	; (8004c60 <UART_SetConfig+0x388>)
 8004952:	429a      	cmp	r2, r3
 8004954:	d103      	bne.n	800495e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004956:	f7fe f833 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 800495a:	6778      	str	r0, [r7, #116]	; 0x74
 800495c:	e002      	b.n	8004964 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800495e:	f7fe f81b 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004962:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496c:	f040 80b6 	bne.w	8004adc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004972:	461c      	mov	r4, r3
 8004974:	f04f 0500 	mov.w	r5, #0
 8004978:	4622      	mov	r2, r4
 800497a:	462b      	mov	r3, r5
 800497c:	1891      	adds	r1, r2, r2
 800497e:	6439      	str	r1, [r7, #64]	; 0x40
 8004980:	415b      	adcs	r3, r3
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004988:	1912      	adds	r2, r2, r4
 800498a:	eb45 0303 	adc.w	r3, r5, r3
 800498e:	f04f 0000 	mov.w	r0, #0
 8004992:	f04f 0100 	mov.w	r1, #0
 8004996:	00d9      	lsls	r1, r3, #3
 8004998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800499c:	00d0      	lsls	r0, r2, #3
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	1911      	adds	r1, r2, r4
 80049a4:	6639      	str	r1, [r7, #96]	; 0x60
 80049a6:	416b      	adcs	r3, r5
 80049a8:	667b      	str	r3, [r7, #100]	; 0x64
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	1891      	adds	r1, r2, r2
 80049b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049b8:	415b      	adcs	r3, r3
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049c4:	f7fb fc5c 	bl	8000280 <__aeabi_uldivmod>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4ba5      	ldr	r3, [pc, #660]	; (8004c64 <UART_SetConfig+0x38c>)
 80049ce:	fba3 2302 	umull	r2, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	011e      	lsls	r6, r3, #4
 80049d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d8:	461c      	mov	r4, r3
 80049da:	f04f 0500 	mov.w	r5, #0
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	1891      	adds	r1, r2, r2
 80049e4:	6339      	str	r1, [r7, #48]	; 0x30
 80049e6:	415b      	adcs	r3, r3
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049ee:	1912      	adds	r2, r2, r4
 80049f0:	eb45 0303 	adc.w	r3, r5, r3
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	00d9      	lsls	r1, r3, #3
 80049fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a02:	00d0      	lsls	r0, r2, #3
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	1911      	adds	r1, r2, r4
 8004a0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a0c:	416b      	adcs	r3, r5
 8004a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	461a      	mov	r2, r3
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	1891      	adds	r1, r2, r2
 8004a1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a1e:	415b      	adcs	r3, r3
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a2a:	f7fb fc29 	bl	8000280 <__aeabi_uldivmod>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4b8c      	ldr	r3, [pc, #560]	; (8004c64 <UART_SetConfig+0x38c>)
 8004a34:	fba3 1302 	umull	r1, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	2164      	movs	r1, #100	; 0x64
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	3332      	adds	r3, #50	; 0x32
 8004a46:	4a87      	ldr	r2, [pc, #540]	; (8004c64 <UART_SetConfig+0x38c>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a54:	441e      	add	r6, r3
 8004a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	1894      	adds	r4, r2, r2
 8004a64:	623c      	str	r4, [r7, #32]
 8004a66:	415b      	adcs	r3, r3
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a6e:	1812      	adds	r2, r2, r0
 8004a70:	eb41 0303 	adc.w	r3, r1, r3
 8004a74:	f04f 0400 	mov.w	r4, #0
 8004a78:	f04f 0500 	mov.w	r5, #0
 8004a7c:	00dd      	lsls	r5, r3, #3
 8004a7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a82:	00d4      	lsls	r4, r2, #3
 8004a84:	4622      	mov	r2, r4
 8004a86:	462b      	mov	r3, r5
 8004a88:	1814      	adds	r4, r2, r0
 8004a8a:	653c      	str	r4, [r7, #80]	; 0x50
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	61b9      	str	r1, [r7, #24]
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004aa6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004aaa:	f7fb fbe9 	bl	8000280 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <UART_SetConfig+0x38c>)
 8004ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	2164      	movs	r1, #100	; 0x64
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	3332      	adds	r3, #50	; 0x32
 8004ac6:	4a67      	ldr	r2, [pc, #412]	; (8004c64 <UART_SetConfig+0x38c>)
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	f003 0207 	and.w	r2, r3, #7
 8004ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4432      	add	r2, r6
 8004ad8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ada:	e0b9      	b.n	8004c50 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ade:	461c      	mov	r4, r3
 8004ae0:	f04f 0500 	mov.w	r5, #0
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	6139      	str	r1, [r7, #16]
 8004aec:	415b      	adcs	r3, r3
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004af4:	1912      	adds	r2, r2, r4
 8004af6:	eb45 0303 	adc.w	r3, r5, r3
 8004afa:	f04f 0000 	mov.w	r0, #0
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	00d9      	lsls	r1, r3, #3
 8004b04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b08:	00d0      	lsls	r0, r2, #3
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	eb12 0804 	adds.w	r8, r2, r4
 8004b12:	eb43 0905 	adc.w	r9, r3, r5
 8004b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	008b      	lsls	r3, r1, #2
 8004b2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b2e:	0082      	lsls	r2, r0, #2
 8004b30:	4640      	mov	r0, r8
 8004b32:	4649      	mov	r1, r9
 8004b34:	f7fb fba4 	bl	8000280 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4b49      	ldr	r3, [pc, #292]	; (8004c64 <UART_SetConfig+0x38c>)
 8004b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	011e      	lsls	r6, r3, #4
 8004b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	1894      	adds	r4, r2, r2
 8004b54:	60bc      	str	r4, [r7, #8]
 8004b56:	415b      	adcs	r3, r3
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b5e:	1812      	adds	r2, r2, r0
 8004b60:	eb41 0303 	adc.w	r3, r1, r3
 8004b64:	f04f 0400 	mov.w	r4, #0
 8004b68:	f04f 0500 	mov.w	r5, #0
 8004b6c:	00dd      	lsls	r5, r3, #3
 8004b6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b72:	00d4      	lsls	r4, r2, #3
 8004b74:	4622      	mov	r2, r4
 8004b76:	462b      	mov	r3, r5
 8004b78:	1814      	adds	r4, r2, r0
 8004b7a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	008b      	lsls	r3, r1, #2
 8004b94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b98:	0082      	lsls	r2, r0, #2
 8004b9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b9e:	f7fb fb6f 	bl	8000280 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <UART_SetConfig+0x38c>)
 8004ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	2164      	movs	r1, #100	; 0x64
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	3332      	adds	r3, #50	; 0x32
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <UART_SetConfig+0x38c>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc6:	441e      	add	r6, r3
 8004bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f04f 0100 	mov.w	r1, #0
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	1894      	adds	r4, r2, r2
 8004bd6:	603c      	str	r4, [r7, #0]
 8004bd8:	415b      	adcs	r3, r3
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be0:	1812      	adds	r2, r2, r0
 8004be2:	eb41 0303 	adc.w	r3, r1, r3
 8004be6:	f04f 0400 	mov.w	r4, #0
 8004bea:	f04f 0500 	mov.w	r5, #0
 8004bee:	00dd      	lsls	r5, r3, #3
 8004bf0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bf4:	00d4      	lsls	r4, r2, #3
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	eb12 0a00 	adds.w	sl, r2, r0
 8004bfe:	eb43 0b01 	adc.w	fp, r3, r1
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	008b      	lsls	r3, r1, #2
 8004c16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c1a:	0082      	lsls	r2, r0, #2
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	4659      	mov	r1, fp
 8004c20:	f7fb fb2e 	bl	8000280 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <UART_SetConfig+0x38c>)
 8004c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2164      	movs	r1, #100	; 0x64
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	3332      	adds	r3, #50	; 0x32
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <UART_SetConfig+0x38c>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	f003 020f 	and.w	r2, r3, #15
 8004c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4432      	add	r2, r6
 8004c4e:	609a      	str	r2, [r3, #8]
}
 8004c50:	bf00      	nop
 8004c52:	377c      	adds	r7, #124	; 0x7c
 8004c54:	46bd      	mov	sp, r7
 8004c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40011000 	.word	0x40011000
 8004c60:	40011400 	.word	0x40011400
 8004c64:	51eb851f 	.word	0x51eb851f

08004c68 <API_draw_rectangle>:

	return err;
}

int API_draw_rectangle(uint16_t x, uint8_t y, uint16_t width, uint8_t height, uint8_t color, uint8_t filled)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	80fb      	strh	r3, [r7, #6]
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	717b      	strb	r3, [r7, #5]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	807b      	strh	r3, [r7, #2]
 8004c82:	4613      	mov	r3, r2
 8004c84:	713b      	strb	r3, [r7, #4]
	uint8_t err = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	72fb      	strb	r3, [r7, #11]
	uint16_t xcount, ycount;

	if(filled)
 8004c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d02f      	beq.n	8004cf2 <API_draw_rectangle+0x8a>
	{
		for(ycount = 0; ycount < VGA_DISPLAY_Y; ycount++)
 8004c92:	2300      	movs	r3, #0
 8004c94:	81bb      	strh	r3, [r7, #12]
 8004c96:	e028      	b.n	8004cea <API_draw_rectangle+0x82>
		{
			for(xcount = 0; xcount < VGA_DISPLAY_X; xcount++)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	81fb      	strh	r3, [r7, #14]
 8004c9c:	e01e      	b.n	8004cdc <API_draw_rectangle+0x74>
			{
				if (ycount >= y && xcount >= x && xcount <= x + width && ycount <= y + height)
 8004c9e:	797b      	ldrb	r3, [r7, #5]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	89ba      	ldrh	r2, [r7, #12]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d316      	bcc.n	8004cd6 <API_draw_rectangle+0x6e>
 8004ca8:	89fa      	ldrh	r2, [r7, #14]
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d312      	bcc.n	8004cd6 <API_draw_rectangle+0x6e>
 8004cb0:	89fa      	ldrh	r2, [r7, #14]
 8004cb2:	88f9      	ldrh	r1, [r7, #6]
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	440b      	add	r3, r1
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	dc0c      	bgt.n	8004cd6 <API_draw_rectangle+0x6e>
 8004cbc:	89ba      	ldrh	r2, [r7, #12]
 8004cbe:	7979      	ldrb	r1, [r7, #5]
 8004cc0:	793b      	ldrb	r3, [r7, #4]
 8004cc2:	440b      	add	r3, r1
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	dc06      	bgt.n	8004cd6 <API_draw_rectangle+0x6e>
				{
					UB_VGA_SetPixel(xcount, ycount, color);
 8004cc8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ccc:	89b9      	ldrh	r1, [r7, #12]
 8004cce:	89fb      	ldrh	r3, [r7, #14]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fe2d 	bl	8000930 <UB_VGA_SetPixel>
			for(xcount = 0; xcount < VGA_DISPLAY_X; xcount++)
 8004cd6:	89fb      	ldrh	r3, [r7, #14]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	81fb      	strh	r3, [r7, #14]
 8004cdc:	89fb      	ldrh	r3, [r7, #14]
 8004cde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004ce2:	d3dc      	bcc.n	8004c9e <API_draw_rectangle+0x36>
		for(ycount = 0; ycount < VGA_DISPLAY_Y; ycount++)
 8004ce4:	89bb      	ldrh	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	81bb      	strh	r3, [r7, #12]
 8004cea:	89bb      	ldrh	r3, [r7, #12]
 8004cec:	2bef      	cmp	r3, #239	; 0xef
 8004cee:	d9d3      	bls.n	8004c98 <API_draw_rectangle+0x30>
 8004cf0:	e04c      	b.n	8004d8c <API_draw_rectangle+0x124>
			}
		}
	}
	else
	{
		for(xcount = x; xcount < x + width; xcount++)		// Top line
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	81fb      	strh	r3, [r7, #14]
 8004cf6:	e00a      	b.n	8004d0e <API_draw_rectangle+0xa6>
		{
			UB_VGA_SetPixel(xcount, y, color);
 8004cf8:	797b      	ldrb	r3, [r7, #5]
 8004cfa:	b299      	uxth	r1, r3
 8004cfc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d00:	89fb      	ldrh	r3, [r7, #14]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fb fe14 	bl	8000930 <UB_VGA_SetPixel>
		for(xcount = x; xcount < x + width; xcount++)		// Top line
 8004d08:	89fb      	ldrh	r3, [r7, #14]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	81fb      	strh	r3, [r7, #14]
 8004d0e:	89fa      	ldrh	r2, [r7, #14]
 8004d10:	88f9      	ldrh	r1, [r7, #6]
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	440b      	add	r3, r1
 8004d16:	429a      	cmp	r2, r3
 8004d18:	dbee      	blt.n	8004cf8 <API_draw_rectangle+0x90>
		}

		for(ycount = y; ycount < y + height; ycount++)		// Left line
 8004d1a:	797b      	ldrb	r3, [r7, #5]
 8004d1c:	81bb      	strh	r3, [r7, #12]
 8004d1e:	e009      	b.n	8004d34 <API_draw_rectangle+0xcc>
		{
			UB_VGA_SetPixel(x, ycount, color);
 8004d20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d24:	89b9      	ldrh	r1, [r7, #12]
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fe01 	bl	8000930 <UB_VGA_SetPixel>
		for(ycount = y; ycount < y + height; ycount++)		// Left line
 8004d2e:	89bb      	ldrh	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	81bb      	strh	r3, [r7, #12]
 8004d34:	89ba      	ldrh	r2, [r7, #12]
 8004d36:	7979      	ldrb	r1, [r7, #5]
 8004d38:	793b      	ldrb	r3, [r7, #4]
 8004d3a:	440b      	add	r3, r1
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	dbef      	blt.n	8004d20 <API_draw_rectangle+0xb8>
		}

		for(xcount = x; xcount <= x + width; xcount++)		// Bottom line
 8004d40:	88fb      	ldrh	r3, [r7, #6]
 8004d42:	81fb      	strh	r3, [r7, #14]
 8004d44:	e009      	b.n	8004d5a <API_draw_rectangle+0xf2>
		{
			UB_VGA_SetPixel(xcount, ycount, color);
 8004d46:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d4a:	89b9      	ldrh	r1, [r7, #12]
 8004d4c:	89fb      	ldrh	r3, [r7, #14]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb fdee 	bl	8000930 <UB_VGA_SetPixel>
		for(xcount = x; xcount <= x + width; xcount++)		// Bottom line
 8004d54:	89fb      	ldrh	r3, [r7, #14]
 8004d56:	3301      	adds	r3, #1
 8004d58:	81fb      	strh	r3, [r7, #14]
 8004d5a:	89fa      	ldrh	r2, [r7, #14]
 8004d5c:	88f9      	ldrh	r1, [r7, #6]
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	440b      	add	r3, r1
 8004d62:	429a      	cmp	r2, r3
 8004d64:	ddef      	ble.n	8004d46 <API_draw_rectangle+0xde>
		}

		for(ycount = y; ycount <= y + height; ycount++)		// Right line
 8004d66:	797b      	ldrb	r3, [r7, #5]
 8004d68:	81bb      	strh	r3, [r7, #12]
 8004d6a:	e009      	b.n	8004d80 <API_draw_rectangle+0x118>
		{
			UB_VGA_SetPixel(xcount, ycount, color);
 8004d6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d70:	89b9      	ldrh	r1, [r7, #12]
 8004d72:	89fb      	ldrh	r3, [r7, #14]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fb fddb 	bl	8000930 <UB_VGA_SetPixel>
		for(ycount = y; ycount <= y + height; ycount++)		// Right line
 8004d7a:	89bb      	ldrh	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	81bb      	strh	r3, [r7, #12]
 8004d80:	89ba      	ldrh	r2, [r7, #12]
 8004d82:	7979      	ldrb	r1, [r7, #5]
 8004d84:	793b      	ldrb	r3, [r7, #4]
 8004d86:	440b      	add	r3, r1
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	ddef      	ble.n	8004d6c <API_draw_rectangle+0x104>
		}
	}

	return err;
 8004d8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd90      	pop	{r4, r7, pc}

08004d96 <API_init_IO>:
 */

#include "API.h"

void API_init_IO(void)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	af00      	add	r7, sp, #0
	// Initialize VGA screen timers/registers
	UB_VGA_Screen_Init();
 8004d9a:	f7fb fd53 	bl	8000844 <UB_VGA_Screen_Init>

	// Fill the screen with white
	UB_VGA_FillScreen(VGA_COL_WHITE);
 8004d9e:	20ff      	movs	r0, #255	; 0xff
 8004da0:	f7fb fda2 	bl	80008e8 <UB_VGA_FillScreen>
}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <__errno>:
 8004da8:	4b01      	ldr	r3, [pc, #4]	; (8004db0 <__errno+0x8>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	2000001c 	.word	0x2000001c

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4d0d      	ldr	r5, [pc, #52]	; (8004dec <__libc_init_array+0x38>)
 8004db8:	4c0d      	ldr	r4, [pc, #52]	; (8004df0 <__libc_init_array+0x3c>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	4d0b      	ldr	r5, [pc, #44]	; (8004df4 <__libc_init_array+0x40>)
 8004dc6:	4c0c      	ldr	r4, [pc, #48]	; (8004df8 <__libc_init_array+0x44>)
 8004dc8:	f000 fc4e 	bl	8005668 <_init>
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	4798      	blx	r3
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	4798      	blx	r3
 8004de8:	3601      	adds	r6, #1
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08005714 	.word	0x08005714
 8004df0:	08005714 	.word	0x08005714
 8004df4:	08005714 	.word	0x08005714
 8004df8:	08005718 	.word	0x08005718

08004dfc <memset>:
 8004dfc:	4402      	add	r2, r0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d100      	bne.n	8004e06 <memset+0xa>
 8004e04:	4770      	bx	lr
 8004e06:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0a:	e7f9      	b.n	8004e00 <memset+0x4>

08004e0c <siprintf>:
 8004e0c:	b40e      	push	{r1, r2, r3}
 8004e0e:	b500      	push	{lr}
 8004e10:	b09c      	sub	sp, #112	; 0x70
 8004e12:	ab1d      	add	r3, sp, #116	; 0x74
 8004e14:	9002      	str	r0, [sp, #8]
 8004e16:	9006      	str	r0, [sp, #24]
 8004e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e1c:	4809      	ldr	r0, [pc, #36]	; (8004e44 <siprintf+0x38>)
 8004e1e:	9107      	str	r1, [sp, #28]
 8004e20:	9104      	str	r1, [sp, #16]
 8004e22:	4909      	ldr	r1, [pc, #36]	; (8004e48 <siprintf+0x3c>)
 8004e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e28:	9105      	str	r1, [sp, #20]
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	a902      	add	r1, sp, #8
 8004e30:	f000 f868 	bl	8004f04 <_svfiprintf_r>
 8004e34:	9b02      	ldr	r3, [sp, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	b01c      	add	sp, #112	; 0x70
 8004e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e40:	b003      	add	sp, #12
 8004e42:	4770      	bx	lr
 8004e44:	2000001c 	.word	0x2000001c
 8004e48:	ffff0208 	.word	0xffff0208

08004e4c <__ssputs_r>:
 8004e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e50:	688e      	ldr	r6, [r1, #8]
 8004e52:	429e      	cmp	r6, r3
 8004e54:	4682      	mov	sl, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	4690      	mov	r8, r2
 8004e5a:	461f      	mov	r7, r3
 8004e5c:	d838      	bhi.n	8004ed0 <__ssputs_r+0x84>
 8004e5e:	898a      	ldrh	r2, [r1, #12]
 8004e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e64:	d032      	beq.n	8004ecc <__ssputs_r+0x80>
 8004e66:	6825      	ldr	r5, [r4, #0]
 8004e68:	6909      	ldr	r1, [r1, #16]
 8004e6a:	eba5 0901 	sub.w	r9, r5, r1
 8004e6e:	6965      	ldr	r5, [r4, #20]
 8004e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e78:	3301      	adds	r3, #1
 8004e7a:	444b      	add	r3, r9
 8004e7c:	106d      	asrs	r5, r5, #1
 8004e7e:	429d      	cmp	r5, r3
 8004e80:	bf38      	it	cc
 8004e82:	461d      	movcc	r5, r3
 8004e84:	0553      	lsls	r3, r2, #21
 8004e86:	d531      	bpl.n	8004eec <__ssputs_r+0xa0>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f000 fb47 	bl	800551c <_malloc_r>
 8004e8e:	4606      	mov	r6, r0
 8004e90:	b950      	cbnz	r0, 8004ea8 <__ssputs_r+0x5c>
 8004e92:	230c      	movs	r3, #12
 8004e94:	f8ca 3000 	str.w	r3, [sl]
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea8:	6921      	ldr	r1, [r4, #16]
 8004eaa:	464a      	mov	r2, r9
 8004eac:	f000 fabe 	bl	800542c <memcpy>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	6126      	str	r6, [r4, #16]
 8004ebe:	6165      	str	r5, [r4, #20]
 8004ec0:	444e      	add	r6, r9
 8004ec2:	eba5 0509 	sub.w	r5, r5, r9
 8004ec6:	6026      	str	r6, [r4, #0]
 8004ec8:	60a5      	str	r5, [r4, #8]
 8004eca:	463e      	mov	r6, r7
 8004ecc:	42be      	cmp	r6, r7
 8004ece:	d900      	bls.n	8004ed2 <__ssputs_r+0x86>
 8004ed0:	463e      	mov	r6, r7
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	f000 fab6 	bl	8005448 <memmove>
 8004edc:	68a3      	ldr	r3, [r4, #8]
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	1b9b      	subs	r3, r3, r6
 8004ee2:	4432      	add	r2, r6
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	6022      	str	r2, [r4, #0]
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e7db      	b.n	8004ea4 <__ssputs_r+0x58>
 8004eec:	462a      	mov	r2, r5
 8004eee:	f000 fb6f 	bl	80055d0 <_realloc_r>
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d1e1      	bne.n	8004ebc <__ssputs_r+0x70>
 8004ef8:	6921      	ldr	r1, [r4, #16]
 8004efa:	4650      	mov	r0, sl
 8004efc:	f000 fabe 	bl	800547c <_free_r>
 8004f00:	e7c7      	b.n	8004e92 <__ssputs_r+0x46>
	...

08004f04 <_svfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4698      	mov	r8, r3
 8004f0a:	898b      	ldrh	r3, [r1, #12]
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	b09d      	sub	sp, #116	; 0x74
 8004f10:	4607      	mov	r7, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	d50e      	bpl.n	8004f36 <_svfiprintf_r+0x32>
 8004f18:	690b      	ldr	r3, [r1, #16]
 8004f1a:	b963      	cbnz	r3, 8004f36 <_svfiprintf_r+0x32>
 8004f1c:	2140      	movs	r1, #64	; 0x40
 8004f1e:	f000 fafd 	bl	800551c <_malloc_r>
 8004f22:	6028      	str	r0, [r5, #0]
 8004f24:	6128      	str	r0, [r5, #16]
 8004f26:	b920      	cbnz	r0, 8004f32 <_svfiprintf_r+0x2e>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	e0d1      	b.n	80050d6 <_svfiprintf_r+0x1d2>
 8004f32:	2340      	movs	r3, #64	; 0x40
 8004f34:	616b      	str	r3, [r5, #20]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f44:	2330      	movs	r3, #48	; 0x30
 8004f46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050f0 <_svfiprintf_r+0x1ec>
 8004f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f4e:	f04f 0901 	mov.w	r9, #1
 8004f52:	4623      	mov	r3, r4
 8004f54:	469a      	mov	sl, r3
 8004f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f5a:	b10a      	cbz	r2, 8004f60 <_svfiprintf_r+0x5c>
 8004f5c:	2a25      	cmp	r2, #37	; 0x25
 8004f5e:	d1f9      	bne.n	8004f54 <_svfiprintf_r+0x50>
 8004f60:	ebba 0b04 	subs.w	fp, sl, r4
 8004f64:	d00b      	beq.n	8004f7e <_svfiprintf_r+0x7a>
 8004f66:	465b      	mov	r3, fp
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7ff ff6d 	bl	8004e4c <__ssputs_r>
 8004f72:	3001      	adds	r0, #1
 8004f74:	f000 80aa 	beq.w	80050cc <_svfiprintf_r+0x1c8>
 8004f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f7a:	445a      	add	r2, fp
 8004f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80a2 	beq.w	80050cc <_svfiprintf_r+0x1c8>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f92:	f10a 0a01 	add.w	sl, sl, #1
 8004f96:	9304      	str	r3, [sp, #16]
 8004f98:	9307      	str	r3, [sp, #28]
 8004f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004fa0:	4654      	mov	r4, sl
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa8:	4851      	ldr	r0, [pc, #324]	; (80050f0 <_svfiprintf_r+0x1ec>)
 8004faa:	f7fb f919 	bl	80001e0 <memchr>
 8004fae:	9a04      	ldr	r2, [sp, #16]
 8004fb0:	b9d8      	cbnz	r0, 8004fea <_svfiprintf_r+0xe6>
 8004fb2:	06d0      	lsls	r0, r2, #27
 8004fb4:	bf44      	itt	mi
 8004fb6:	2320      	movmi	r3, #32
 8004fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fbc:	0711      	lsls	r1, r2, #28
 8004fbe:	bf44      	itt	mi
 8004fc0:	232b      	movmi	r3, #43	; 0x2b
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fca:	2b2a      	cmp	r3, #42	; 0x2a
 8004fcc:	d015      	beq.n	8004ffa <_svfiprintf_r+0xf6>
 8004fce:	9a07      	ldr	r2, [sp, #28]
 8004fd0:	4654      	mov	r4, sl
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f04f 0c0a 	mov.w	ip, #10
 8004fd8:	4621      	mov	r1, r4
 8004fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fde:	3b30      	subs	r3, #48	; 0x30
 8004fe0:	2b09      	cmp	r3, #9
 8004fe2:	d94e      	bls.n	8005082 <_svfiprintf_r+0x17e>
 8004fe4:	b1b0      	cbz	r0, 8005014 <_svfiprintf_r+0x110>
 8004fe6:	9207      	str	r2, [sp, #28]
 8004fe8:	e014      	b.n	8005014 <_svfiprintf_r+0x110>
 8004fea:	eba0 0308 	sub.w	r3, r0, r8
 8004fee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	9304      	str	r3, [sp, #16]
 8004ff6:	46a2      	mov	sl, r4
 8004ff8:	e7d2      	b.n	8004fa0 <_svfiprintf_r+0x9c>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	9103      	str	r1, [sp, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfbb      	ittet	lt
 8005006:	425b      	neglt	r3, r3
 8005008:	f042 0202 	orrlt.w	r2, r2, #2
 800500c:	9307      	strge	r3, [sp, #28]
 800500e:	9307      	strlt	r3, [sp, #28]
 8005010:	bfb8      	it	lt
 8005012:	9204      	strlt	r2, [sp, #16]
 8005014:	7823      	ldrb	r3, [r4, #0]
 8005016:	2b2e      	cmp	r3, #46	; 0x2e
 8005018:	d10c      	bne.n	8005034 <_svfiprintf_r+0x130>
 800501a:	7863      	ldrb	r3, [r4, #1]
 800501c:	2b2a      	cmp	r3, #42	; 0x2a
 800501e:	d135      	bne.n	800508c <_svfiprintf_r+0x188>
 8005020:	9b03      	ldr	r3, [sp, #12]
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	9203      	str	r2, [sp, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfb8      	it	lt
 800502c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005030:	3402      	adds	r4, #2
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005100 <_svfiprintf_r+0x1fc>
 8005038:	7821      	ldrb	r1, [r4, #0]
 800503a:	2203      	movs	r2, #3
 800503c:	4650      	mov	r0, sl
 800503e:	f7fb f8cf 	bl	80001e0 <memchr>
 8005042:	b140      	cbz	r0, 8005056 <_svfiprintf_r+0x152>
 8005044:	2340      	movs	r3, #64	; 0x40
 8005046:	eba0 000a 	sub.w	r0, r0, sl
 800504a:	fa03 f000 	lsl.w	r0, r3, r0
 800504e:	9b04      	ldr	r3, [sp, #16]
 8005050:	4303      	orrs	r3, r0
 8005052:	3401      	adds	r4, #1
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505a:	4826      	ldr	r0, [pc, #152]	; (80050f4 <_svfiprintf_r+0x1f0>)
 800505c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005060:	2206      	movs	r2, #6
 8005062:	f7fb f8bd 	bl	80001e0 <memchr>
 8005066:	2800      	cmp	r0, #0
 8005068:	d038      	beq.n	80050dc <_svfiprintf_r+0x1d8>
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <_svfiprintf_r+0x1f4>)
 800506c:	bb1b      	cbnz	r3, 80050b6 <_svfiprintf_r+0x1b2>
 800506e:	9b03      	ldr	r3, [sp, #12]
 8005070:	3307      	adds	r3, #7
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	3308      	adds	r3, #8
 8005078:	9303      	str	r3, [sp, #12]
 800507a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507c:	4433      	add	r3, r6
 800507e:	9309      	str	r3, [sp, #36]	; 0x24
 8005080:	e767      	b.n	8004f52 <_svfiprintf_r+0x4e>
 8005082:	fb0c 3202 	mla	r2, ip, r2, r3
 8005086:	460c      	mov	r4, r1
 8005088:	2001      	movs	r0, #1
 800508a:	e7a5      	b.n	8004fd8 <_svfiprintf_r+0xd4>
 800508c:	2300      	movs	r3, #0
 800508e:	3401      	adds	r4, #1
 8005090:	9305      	str	r3, [sp, #20]
 8005092:	4619      	mov	r1, r3
 8005094:	f04f 0c0a 	mov.w	ip, #10
 8005098:	4620      	mov	r0, r4
 800509a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509e:	3a30      	subs	r2, #48	; 0x30
 80050a0:	2a09      	cmp	r2, #9
 80050a2:	d903      	bls.n	80050ac <_svfiprintf_r+0x1a8>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0c5      	beq.n	8005034 <_svfiprintf_r+0x130>
 80050a8:	9105      	str	r1, [sp, #20]
 80050aa:	e7c3      	b.n	8005034 <_svfiprintf_r+0x130>
 80050ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b0:	4604      	mov	r4, r0
 80050b2:	2301      	movs	r3, #1
 80050b4:	e7f0      	b.n	8005098 <_svfiprintf_r+0x194>
 80050b6:	ab03      	add	r3, sp, #12
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	462a      	mov	r2, r5
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <_svfiprintf_r+0x1f8>)
 80050be:	a904      	add	r1, sp, #16
 80050c0:	4638      	mov	r0, r7
 80050c2:	f3af 8000 	nop.w
 80050c6:	1c42      	adds	r2, r0, #1
 80050c8:	4606      	mov	r6, r0
 80050ca:	d1d6      	bne.n	800507a <_svfiprintf_r+0x176>
 80050cc:	89ab      	ldrh	r3, [r5, #12]
 80050ce:	065b      	lsls	r3, r3, #25
 80050d0:	f53f af2c 	bmi.w	8004f2c <_svfiprintf_r+0x28>
 80050d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d6:	b01d      	add	sp, #116	; 0x74
 80050d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050dc:	ab03      	add	r3, sp, #12
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	462a      	mov	r2, r5
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <_svfiprintf_r+0x1f8>)
 80050e4:	a904      	add	r1, sp, #16
 80050e6:	4638      	mov	r0, r7
 80050e8:	f000 f87a 	bl	80051e0 <_printf_i>
 80050ec:	e7eb      	b.n	80050c6 <_svfiprintf_r+0x1c2>
 80050ee:	bf00      	nop
 80050f0:	080056d8 	.word	0x080056d8
 80050f4:	080056e2 	.word	0x080056e2
 80050f8:	00000000 	.word	0x00000000
 80050fc:	08004e4d 	.word	0x08004e4d
 8005100:	080056de 	.word	0x080056de

08005104 <_printf_common>:
 8005104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005108:	4616      	mov	r6, r2
 800510a:	4699      	mov	r9, r3
 800510c:	688a      	ldr	r2, [r1, #8]
 800510e:	690b      	ldr	r3, [r1, #16]
 8005110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005114:	4293      	cmp	r3, r2
 8005116:	bfb8      	it	lt
 8005118:	4613      	movlt	r3, r2
 800511a:	6033      	str	r3, [r6, #0]
 800511c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005120:	4607      	mov	r7, r0
 8005122:	460c      	mov	r4, r1
 8005124:	b10a      	cbz	r2, 800512a <_printf_common+0x26>
 8005126:	3301      	adds	r3, #1
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	0699      	lsls	r1, r3, #26
 800512e:	bf42      	ittt	mi
 8005130:	6833      	ldrmi	r3, [r6, #0]
 8005132:	3302      	addmi	r3, #2
 8005134:	6033      	strmi	r3, [r6, #0]
 8005136:	6825      	ldr	r5, [r4, #0]
 8005138:	f015 0506 	ands.w	r5, r5, #6
 800513c:	d106      	bne.n	800514c <_printf_common+0x48>
 800513e:	f104 0a19 	add.w	sl, r4, #25
 8005142:	68e3      	ldr	r3, [r4, #12]
 8005144:	6832      	ldr	r2, [r6, #0]
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	42ab      	cmp	r3, r5
 800514a:	dc26      	bgt.n	800519a <_printf_common+0x96>
 800514c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005150:	1e13      	subs	r3, r2, #0
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	bf18      	it	ne
 8005156:	2301      	movne	r3, #1
 8005158:	0692      	lsls	r2, r2, #26
 800515a:	d42b      	bmi.n	80051b4 <_printf_common+0xb0>
 800515c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005160:	4649      	mov	r1, r9
 8005162:	4638      	mov	r0, r7
 8005164:	47c0      	blx	r8
 8005166:	3001      	adds	r0, #1
 8005168:	d01e      	beq.n	80051a8 <_printf_common+0xa4>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	68e5      	ldr	r5, [r4, #12]
 800516e:	6832      	ldr	r2, [r6, #0]
 8005170:	f003 0306 	and.w	r3, r3, #6
 8005174:	2b04      	cmp	r3, #4
 8005176:	bf08      	it	eq
 8005178:	1aad      	subeq	r5, r5, r2
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	bf0c      	ite	eq
 8005180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005184:	2500      	movne	r5, #0
 8005186:	4293      	cmp	r3, r2
 8005188:	bfc4      	itt	gt
 800518a:	1a9b      	subgt	r3, r3, r2
 800518c:	18ed      	addgt	r5, r5, r3
 800518e:	2600      	movs	r6, #0
 8005190:	341a      	adds	r4, #26
 8005192:	42b5      	cmp	r5, r6
 8005194:	d11a      	bne.n	80051cc <_printf_common+0xc8>
 8005196:	2000      	movs	r0, #0
 8005198:	e008      	b.n	80051ac <_printf_common+0xa8>
 800519a:	2301      	movs	r3, #1
 800519c:	4652      	mov	r2, sl
 800519e:	4649      	mov	r1, r9
 80051a0:	4638      	mov	r0, r7
 80051a2:	47c0      	blx	r8
 80051a4:	3001      	adds	r0, #1
 80051a6:	d103      	bne.n	80051b0 <_printf_common+0xac>
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b0:	3501      	adds	r5, #1
 80051b2:	e7c6      	b.n	8005142 <_printf_common+0x3e>
 80051b4:	18e1      	adds	r1, r4, r3
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	2030      	movs	r0, #48	; 0x30
 80051ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051be:	4422      	add	r2, r4
 80051c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051c8:	3302      	adds	r3, #2
 80051ca:	e7c7      	b.n	800515c <_printf_common+0x58>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4622      	mov	r2, r4
 80051d0:	4649      	mov	r1, r9
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c0      	blx	r8
 80051d6:	3001      	adds	r0, #1
 80051d8:	d0e6      	beq.n	80051a8 <_printf_common+0xa4>
 80051da:	3601      	adds	r6, #1
 80051dc:	e7d9      	b.n	8005192 <_printf_common+0x8e>
	...

080051e0 <_printf_i>:
 80051e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	460c      	mov	r4, r1
 80051e6:	4691      	mov	r9, r2
 80051e8:	7e27      	ldrb	r7, [r4, #24]
 80051ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051ec:	2f78      	cmp	r7, #120	; 0x78
 80051ee:	4680      	mov	r8, r0
 80051f0:	469a      	mov	sl, r3
 80051f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f6:	d807      	bhi.n	8005208 <_printf_i+0x28>
 80051f8:	2f62      	cmp	r7, #98	; 0x62
 80051fa:	d80a      	bhi.n	8005212 <_printf_i+0x32>
 80051fc:	2f00      	cmp	r7, #0
 80051fe:	f000 80d8 	beq.w	80053b2 <_printf_i+0x1d2>
 8005202:	2f58      	cmp	r7, #88	; 0x58
 8005204:	f000 80a3 	beq.w	800534e <_printf_i+0x16e>
 8005208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800520c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005210:	e03a      	b.n	8005288 <_printf_i+0xa8>
 8005212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005216:	2b15      	cmp	r3, #21
 8005218:	d8f6      	bhi.n	8005208 <_printf_i+0x28>
 800521a:	a001      	add	r0, pc, #4	; (adr r0, 8005220 <_printf_i+0x40>)
 800521c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005220:	08005279 	.word	0x08005279
 8005224:	0800528d 	.word	0x0800528d
 8005228:	08005209 	.word	0x08005209
 800522c:	08005209 	.word	0x08005209
 8005230:	08005209 	.word	0x08005209
 8005234:	08005209 	.word	0x08005209
 8005238:	0800528d 	.word	0x0800528d
 800523c:	08005209 	.word	0x08005209
 8005240:	08005209 	.word	0x08005209
 8005244:	08005209 	.word	0x08005209
 8005248:	08005209 	.word	0x08005209
 800524c:	08005399 	.word	0x08005399
 8005250:	080052bd 	.word	0x080052bd
 8005254:	0800537b 	.word	0x0800537b
 8005258:	08005209 	.word	0x08005209
 800525c:	08005209 	.word	0x08005209
 8005260:	080053bb 	.word	0x080053bb
 8005264:	08005209 	.word	0x08005209
 8005268:	080052bd 	.word	0x080052bd
 800526c:	08005209 	.word	0x08005209
 8005270:	08005209 	.word	0x08005209
 8005274:	08005383 	.word	0x08005383
 8005278:	680b      	ldr	r3, [r1, #0]
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	600a      	str	r2, [r1, #0]
 8005280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005288:	2301      	movs	r3, #1
 800528a:	e0a3      	b.n	80053d4 <_printf_i+0x1f4>
 800528c:	6825      	ldr	r5, [r4, #0]
 800528e:	6808      	ldr	r0, [r1, #0]
 8005290:	062e      	lsls	r6, r5, #24
 8005292:	f100 0304 	add.w	r3, r0, #4
 8005296:	d50a      	bpl.n	80052ae <_printf_i+0xce>
 8005298:	6805      	ldr	r5, [r0, #0]
 800529a:	600b      	str	r3, [r1, #0]
 800529c:	2d00      	cmp	r5, #0
 800529e:	da03      	bge.n	80052a8 <_printf_i+0xc8>
 80052a0:	232d      	movs	r3, #45	; 0x2d
 80052a2:	426d      	negs	r5, r5
 80052a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a8:	485e      	ldr	r0, [pc, #376]	; (8005424 <_printf_i+0x244>)
 80052aa:	230a      	movs	r3, #10
 80052ac:	e019      	b.n	80052e2 <_printf_i+0x102>
 80052ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052b2:	6805      	ldr	r5, [r0, #0]
 80052b4:	600b      	str	r3, [r1, #0]
 80052b6:	bf18      	it	ne
 80052b8:	b22d      	sxthne	r5, r5
 80052ba:	e7ef      	b.n	800529c <_printf_i+0xbc>
 80052bc:	680b      	ldr	r3, [r1, #0]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	1d18      	adds	r0, r3, #4
 80052c2:	6008      	str	r0, [r1, #0]
 80052c4:	0628      	lsls	r0, r5, #24
 80052c6:	d501      	bpl.n	80052cc <_printf_i+0xec>
 80052c8:	681d      	ldr	r5, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <_printf_i+0xf2>
 80052cc:	0669      	lsls	r1, r5, #25
 80052ce:	d5fb      	bpl.n	80052c8 <_printf_i+0xe8>
 80052d0:	881d      	ldrh	r5, [r3, #0]
 80052d2:	4854      	ldr	r0, [pc, #336]	; (8005424 <_printf_i+0x244>)
 80052d4:	2f6f      	cmp	r7, #111	; 0x6f
 80052d6:	bf0c      	ite	eq
 80052d8:	2308      	moveq	r3, #8
 80052da:	230a      	movne	r3, #10
 80052dc:	2100      	movs	r1, #0
 80052de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e2:	6866      	ldr	r6, [r4, #4]
 80052e4:	60a6      	str	r6, [r4, #8]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	bfa2      	ittt	ge
 80052ea:	6821      	ldrge	r1, [r4, #0]
 80052ec:	f021 0104 	bicge.w	r1, r1, #4
 80052f0:	6021      	strge	r1, [r4, #0]
 80052f2:	b90d      	cbnz	r5, 80052f8 <_printf_i+0x118>
 80052f4:	2e00      	cmp	r6, #0
 80052f6:	d04d      	beq.n	8005394 <_printf_i+0x1b4>
 80052f8:	4616      	mov	r6, r2
 80052fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80052fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005302:	5dc7      	ldrb	r7, [r0, r7]
 8005304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005308:	462f      	mov	r7, r5
 800530a:	42bb      	cmp	r3, r7
 800530c:	460d      	mov	r5, r1
 800530e:	d9f4      	bls.n	80052fa <_printf_i+0x11a>
 8005310:	2b08      	cmp	r3, #8
 8005312:	d10b      	bne.n	800532c <_printf_i+0x14c>
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	07df      	lsls	r7, r3, #31
 8005318:	d508      	bpl.n	800532c <_printf_i+0x14c>
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	6861      	ldr	r1, [r4, #4]
 800531e:	4299      	cmp	r1, r3
 8005320:	bfde      	ittt	le
 8005322:	2330      	movle	r3, #48	; 0x30
 8005324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005328:	f106 36ff 	addle.w	r6, r6, #4294967295
 800532c:	1b92      	subs	r2, r2, r6
 800532e:	6122      	str	r2, [r4, #16]
 8005330:	f8cd a000 	str.w	sl, [sp]
 8005334:	464b      	mov	r3, r9
 8005336:	aa03      	add	r2, sp, #12
 8005338:	4621      	mov	r1, r4
 800533a:	4640      	mov	r0, r8
 800533c:	f7ff fee2 	bl	8005104 <_printf_common>
 8005340:	3001      	adds	r0, #1
 8005342:	d14c      	bne.n	80053de <_printf_i+0x1fe>
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	b004      	add	sp, #16
 800534a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534e:	4835      	ldr	r0, [pc, #212]	; (8005424 <_printf_i+0x244>)
 8005350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	680e      	ldr	r6, [r1, #0]
 8005358:	061f      	lsls	r7, r3, #24
 800535a:	f856 5b04 	ldr.w	r5, [r6], #4
 800535e:	600e      	str	r6, [r1, #0]
 8005360:	d514      	bpl.n	800538c <_printf_i+0x1ac>
 8005362:	07d9      	lsls	r1, r3, #31
 8005364:	bf44      	itt	mi
 8005366:	f043 0320 	orrmi.w	r3, r3, #32
 800536a:	6023      	strmi	r3, [r4, #0]
 800536c:	b91d      	cbnz	r5, 8005376 <_printf_i+0x196>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f023 0320 	bic.w	r3, r3, #32
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	2310      	movs	r3, #16
 8005378:	e7b0      	b.n	80052dc <_printf_i+0xfc>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	f043 0320 	orr.w	r3, r3, #32
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	2378      	movs	r3, #120	; 0x78
 8005384:	4828      	ldr	r0, [pc, #160]	; (8005428 <_printf_i+0x248>)
 8005386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800538a:	e7e3      	b.n	8005354 <_printf_i+0x174>
 800538c:	065e      	lsls	r6, r3, #25
 800538e:	bf48      	it	mi
 8005390:	b2ad      	uxthmi	r5, r5
 8005392:	e7e6      	b.n	8005362 <_printf_i+0x182>
 8005394:	4616      	mov	r6, r2
 8005396:	e7bb      	b.n	8005310 <_printf_i+0x130>
 8005398:	680b      	ldr	r3, [r1, #0]
 800539a:	6826      	ldr	r6, [r4, #0]
 800539c:	6960      	ldr	r0, [r4, #20]
 800539e:	1d1d      	adds	r5, r3, #4
 80053a0:	600d      	str	r5, [r1, #0]
 80053a2:	0635      	lsls	r5, r6, #24
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	d501      	bpl.n	80053ac <_printf_i+0x1cc>
 80053a8:	6018      	str	r0, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <_printf_i+0x1d2>
 80053ac:	0671      	lsls	r1, r6, #25
 80053ae:	d5fb      	bpl.n	80053a8 <_printf_i+0x1c8>
 80053b0:	8018      	strh	r0, [r3, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	6123      	str	r3, [r4, #16]
 80053b6:	4616      	mov	r6, r2
 80053b8:	e7ba      	b.n	8005330 <_printf_i+0x150>
 80053ba:	680b      	ldr	r3, [r1, #0]
 80053bc:	1d1a      	adds	r2, r3, #4
 80053be:	600a      	str	r2, [r1, #0]
 80053c0:	681e      	ldr	r6, [r3, #0]
 80053c2:	6862      	ldr	r2, [r4, #4]
 80053c4:	2100      	movs	r1, #0
 80053c6:	4630      	mov	r0, r6
 80053c8:	f7fa ff0a 	bl	80001e0 <memchr>
 80053cc:	b108      	cbz	r0, 80053d2 <_printf_i+0x1f2>
 80053ce:	1b80      	subs	r0, r0, r6
 80053d0:	6060      	str	r0, [r4, #4]
 80053d2:	6863      	ldr	r3, [r4, #4]
 80053d4:	6123      	str	r3, [r4, #16]
 80053d6:	2300      	movs	r3, #0
 80053d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053dc:	e7a8      	b.n	8005330 <_printf_i+0x150>
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	4632      	mov	r2, r6
 80053e2:	4649      	mov	r1, r9
 80053e4:	4640      	mov	r0, r8
 80053e6:	47d0      	blx	sl
 80053e8:	3001      	adds	r0, #1
 80053ea:	d0ab      	beq.n	8005344 <_printf_i+0x164>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	079b      	lsls	r3, r3, #30
 80053f0:	d413      	bmi.n	800541a <_printf_i+0x23a>
 80053f2:	68e0      	ldr	r0, [r4, #12]
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	4298      	cmp	r0, r3
 80053f8:	bfb8      	it	lt
 80053fa:	4618      	movlt	r0, r3
 80053fc:	e7a4      	b.n	8005348 <_printf_i+0x168>
 80053fe:	2301      	movs	r3, #1
 8005400:	4632      	mov	r2, r6
 8005402:	4649      	mov	r1, r9
 8005404:	4640      	mov	r0, r8
 8005406:	47d0      	blx	sl
 8005408:	3001      	adds	r0, #1
 800540a:	d09b      	beq.n	8005344 <_printf_i+0x164>
 800540c:	3501      	adds	r5, #1
 800540e:	68e3      	ldr	r3, [r4, #12]
 8005410:	9903      	ldr	r1, [sp, #12]
 8005412:	1a5b      	subs	r3, r3, r1
 8005414:	42ab      	cmp	r3, r5
 8005416:	dcf2      	bgt.n	80053fe <_printf_i+0x21e>
 8005418:	e7eb      	b.n	80053f2 <_printf_i+0x212>
 800541a:	2500      	movs	r5, #0
 800541c:	f104 0619 	add.w	r6, r4, #25
 8005420:	e7f5      	b.n	800540e <_printf_i+0x22e>
 8005422:	bf00      	nop
 8005424:	080056e9 	.word	0x080056e9
 8005428:	080056fa 	.word	0x080056fa

0800542c <memcpy>:
 800542c:	440a      	add	r2, r1
 800542e:	4291      	cmp	r1, r2
 8005430:	f100 33ff 	add.w	r3, r0, #4294967295
 8005434:	d100      	bne.n	8005438 <memcpy+0xc>
 8005436:	4770      	bx	lr
 8005438:	b510      	push	{r4, lr}
 800543a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800543e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005442:	4291      	cmp	r1, r2
 8005444:	d1f9      	bne.n	800543a <memcpy+0xe>
 8005446:	bd10      	pop	{r4, pc}

08005448 <memmove>:
 8005448:	4288      	cmp	r0, r1
 800544a:	b510      	push	{r4, lr}
 800544c:	eb01 0402 	add.w	r4, r1, r2
 8005450:	d902      	bls.n	8005458 <memmove+0x10>
 8005452:	4284      	cmp	r4, r0
 8005454:	4623      	mov	r3, r4
 8005456:	d807      	bhi.n	8005468 <memmove+0x20>
 8005458:	1e43      	subs	r3, r0, #1
 800545a:	42a1      	cmp	r1, r4
 800545c:	d008      	beq.n	8005470 <memmove+0x28>
 800545e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005466:	e7f8      	b.n	800545a <memmove+0x12>
 8005468:	4402      	add	r2, r0
 800546a:	4601      	mov	r1, r0
 800546c:	428a      	cmp	r2, r1
 800546e:	d100      	bne.n	8005472 <memmove+0x2a>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800547a:	e7f7      	b.n	800546c <memmove+0x24>

0800547c <_free_r>:
 800547c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800547e:	2900      	cmp	r1, #0
 8005480:	d048      	beq.n	8005514 <_free_r+0x98>
 8005482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005486:	9001      	str	r0, [sp, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f1a1 0404 	sub.w	r4, r1, #4
 800548e:	bfb8      	it	lt
 8005490:	18e4      	addlt	r4, r4, r3
 8005492:	f000 f8d3 	bl	800563c <__malloc_lock>
 8005496:	4a20      	ldr	r2, [pc, #128]	; (8005518 <_free_r+0x9c>)
 8005498:	9801      	ldr	r0, [sp, #4]
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	4615      	mov	r5, r2
 800549e:	b933      	cbnz	r3, 80054ae <_free_r+0x32>
 80054a0:	6063      	str	r3, [r4, #4]
 80054a2:	6014      	str	r4, [r2, #0]
 80054a4:	b003      	add	sp, #12
 80054a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054aa:	f000 b8cd 	b.w	8005648 <__malloc_unlock>
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	d90b      	bls.n	80054ca <_free_r+0x4e>
 80054b2:	6821      	ldr	r1, [r4, #0]
 80054b4:	1862      	adds	r2, r4, r1
 80054b6:	4293      	cmp	r3, r2
 80054b8:	bf04      	itt	eq
 80054ba:	681a      	ldreq	r2, [r3, #0]
 80054bc:	685b      	ldreq	r3, [r3, #4]
 80054be:	6063      	str	r3, [r4, #4]
 80054c0:	bf04      	itt	eq
 80054c2:	1852      	addeq	r2, r2, r1
 80054c4:	6022      	streq	r2, [r4, #0]
 80054c6:	602c      	str	r4, [r5, #0]
 80054c8:	e7ec      	b.n	80054a4 <_free_r+0x28>
 80054ca:	461a      	mov	r2, r3
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	b10b      	cbz	r3, 80054d4 <_free_r+0x58>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d9fa      	bls.n	80054ca <_free_r+0x4e>
 80054d4:	6811      	ldr	r1, [r2, #0]
 80054d6:	1855      	adds	r5, r2, r1
 80054d8:	42a5      	cmp	r5, r4
 80054da:	d10b      	bne.n	80054f4 <_free_r+0x78>
 80054dc:	6824      	ldr	r4, [r4, #0]
 80054de:	4421      	add	r1, r4
 80054e0:	1854      	adds	r4, r2, r1
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	6011      	str	r1, [r2, #0]
 80054e6:	d1dd      	bne.n	80054a4 <_free_r+0x28>
 80054e8:	681c      	ldr	r4, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	6053      	str	r3, [r2, #4]
 80054ee:	4421      	add	r1, r4
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	e7d7      	b.n	80054a4 <_free_r+0x28>
 80054f4:	d902      	bls.n	80054fc <_free_r+0x80>
 80054f6:	230c      	movs	r3, #12
 80054f8:	6003      	str	r3, [r0, #0]
 80054fa:	e7d3      	b.n	80054a4 <_free_r+0x28>
 80054fc:	6825      	ldr	r5, [r4, #0]
 80054fe:	1961      	adds	r1, r4, r5
 8005500:	428b      	cmp	r3, r1
 8005502:	bf04      	itt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	6063      	str	r3, [r4, #4]
 800550a:	bf04      	itt	eq
 800550c:	1949      	addeq	r1, r1, r5
 800550e:	6021      	streq	r1, [r4, #0]
 8005510:	6054      	str	r4, [r2, #4]
 8005512:	e7c7      	b.n	80054a4 <_free_r+0x28>
 8005514:	b003      	add	sp, #12
 8005516:	bd30      	pop	{r4, r5, pc}
 8005518:	200000a4 	.word	0x200000a4

0800551c <_malloc_r>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	1ccd      	adds	r5, r1, #3
 8005520:	f025 0503 	bic.w	r5, r5, #3
 8005524:	3508      	adds	r5, #8
 8005526:	2d0c      	cmp	r5, #12
 8005528:	bf38      	it	cc
 800552a:	250c      	movcc	r5, #12
 800552c:	2d00      	cmp	r5, #0
 800552e:	4606      	mov	r6, r0
 8005530:	db01      	blt.n	8005536 <_malloc_r+0x1a>
 8005532:	42a9      	cmp	r1, r5
 8005534:	d903      	bls.n	800553e <_malloc_r+0x22>
 8005536:	230c      	movs	r3, #12
 8005538:	6033      	str	r3, [r6, #0]
 800553a:	2000      	movs	r0, #0
 800553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800553e:	f000 f87d 	bl	800563c <__malloc_lock>
 8005542:	4921      	ldr	r1, [pc, #132]	; (80055c8 <_malloc_r+0xac>)
 8005544:	680a      	ldr	r2, [r1, #0]
 8005546:	4614      	mov	r4, r2
 8005548:	b99c      	cbnz	r4, 8005572 <_malloc_r+0x56>
 800554a:	4f20      	ldr	r7, [pc, #128]	; (80055cc <_malloc_r+0xb0>)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	b923      	cbnz	r3, 800555a <_malloc_r+0x3e>
 8005550:	4621      	mov	r1, r4
 8005552:	4630      	mov	r0, r6
 8005554:	f000 f862 	bl	800561c <_sbrk_r>
 8005558:	6038      	str	r0, [r7, #0]
 800555a:	4629      	mov	r1, r5
 800555c:	4630      	mov	r0, r6
 800555e:	f000 f85d 	bl	800561c <_sbrk_r>
 8005562:	1c43      	adds	r3, r0, #1
 8005564:	d123      	bne.n	80055ae <_malloc_r+0x92>
 8005566:	230c      	movs	r3, #12
 8005568:	6033      	str	r3, [r6, #0]
 800556a:	4630      	mov	r0, r6
 800556c:	f000 f86c 	bl	8005648 <__malloc_unlock>
 8005570:	e7e3      	b.n	800553a <_malloc_r+0x1e>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	1b5b      	subs	r3, r3, r5
 8005576:	d417      	bmi.n	80055a8 <_malloc_r+0x8c>
 8005578:	2b0b      	cmp	r3, #11
 800557a:	d903      	bls.n	8005584 <_malloc_r+0x68>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	441c      	add	r4, r3
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	e004      	b.n	800558e <_malloc_r+0x72>
 8005584:	6863      	ldr	r3, [r4, #4]
 8005586:	42a2      	cmp	r2, r4
 8005588:	bf0c      	ite	eq
 800558a:	600b      	streq	r3, [r1, #0]
 800558c:	6053      	strne	r3, [r2, #4]
 800558e:	4630      	mov	r0, r6
 8005590:	f000 f85a 	bl	8005648 <__malloc_unlock>
 8005594:	f104 000b 	add.w	r0, r4, #11
 8005598:	1d23      	adds	r3, r4, #4
 800559a:	f020 0007 	bic.w	r0, r0, #7
 800559e:	1ac2      	subs	r2, r0, r3
 80055a0:	d0cc      	beq.n	800553c <_malloc_r+0x20>
 80055a2:	1a1b      	subs	r3, r3, r0
 80055a4:	50a3      	str	r3, [r4, r2]
 80055a6:	e7c9      	b.n	800553c <_malloc_r+0x20>
 80055a8:	4622      	mov	r2, r4
 80055aa:	6864      	ldr	r4, [r4, #4]
 80055ac:	e7cc      	b.n	8005548 <_malloc_r+0x2c>
 80055ae:	1cc4      	adds	r4, r0, #3
 80055b0:	f024 0403 	bic.w	r4, r4, #3
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d0e3      	beq.n	8005580 <_malloc_r+0x64>
 80055b8:	1a21      	subs	r1, r4, r0
 80055ba:	4630      	mov	r0, r6
 80055bc:	f000 f82e 	bl	800561c <_sbrk_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d1dd      	bne.n	8005580 <_malloc_r+0x64>
 80055c4:	e7cf      	b.n	8005566 <_malloc_r+0x4a>
 80055c6:	bf00      	nop
 80055c8:	200000a4 	.word	0x200000a4
 80055cc:	200000a8 	.word	0x200000a8

080055d0 <_realloc_r>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	4607      	mov	r7, r0
 80055d4:	4614      	mov	r4, r2
 80055d6:	460e      	mov	r6, r1
 80055d8:	b921      	cbnz	r1, 80055e4 <_realloc_r+0x14>
 80055da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055de:	4611      	mov	r1, r2
 80055e0:	f7ff bf9c 	b.w	800551c <_malloc_r>
 80055e4:	b922      	cbnz	r2, 80055f0 <_realloc_r+0x20>
 80055e6:	f7ff ff49 	bl	800547c <_free_r>
 80055ea:	4625      	mov	r5, r4
 80055ec:	4628      	mov	r0, r5
 80055ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f0:	f000 f830 	bl	8005654 <_malloc_usable_size_r>
 80055f4:	42a0      	cmp	r0, r4
 80055f6:	d20f      	bcs.n	8005618 <_realloc_r+0x48>
 80055f8:	4621      	mov	r1, r4
 80055fa:	4638      	mov	r0, r7
 80055fc:	f7ff ff8e 	bl	800551c <_malloc_r>
 8005600:	4605      	mov	r5, r0
 8005602:	2800      	cmp	r0, #0
 8005604:	d0f2      	beq.n	80055ec <_realloc_r+0x1c>
 8005606:	4631      	mov	r1, r6
 8005608:	4622      	mov	r2, r4
 800560a:	f7ff ff0f 	bl	800542c <memcpy>
 800560e:	4631      	mov	r1, r6
 8005610:	4638      	mov	r0, r7
 8005612:	f7ff ff33 	bl	800547c <_free_r>
 8005616:	e7e9      	b.n	80055ec <_realloc_r+0x1c>
 8005618:	4635      	mov	r5, r6
 800561a:	e7e7      	b.n	80055ec <_realloc_r+0x1c>

0800561c <_sbrk_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d06      	ldr	r5, [pc, #24]	; (8005638 <_sbrk_r+0x1c>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fb fab4 	bl	8000b94 <_sbrk>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_sbrk_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_sbrk_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	200131a0 	.word	0x200131a0

0800563c <__malloc_lock>:
 800563c:	4801      	ldr	r0, [pc, #4]	; (8005644 <__malloc_lock+0x8>)
 800563e:	f000 b811 	b.w	8005664 <__retarget_lock_acquire_recursive>
 8005642:	bf00      	nop
 8005644:	200131a8 	.word	0x200131a8

08005648 <__malloc_unlock>:
 8005648:	4801      	ldr	r0, [pc, #4]	; (8005650 <__malloc_unlock+0x8>)
 800564a:	f000 b80c 	b.w	8005666 <__retarget_lock_release_recursive>
 800564e:	bf00      	nop
 8005650:	200131a8 	.word	0x200131a8

08005654 <_malloc_usable_size_r>:
 8005654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005658:	1f18      	subs	r0, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfbc      	itt	lt
 800565e:	580b      	ldrlt	r3, [r1, r0]
 8005660:	18c0      	addlt	r0, r0, r3
 8005662:	4770      	bx	lr

08005664 <__retarget_lock_acquire_recursive>:
 8005664:	4770      	bx	lr

08005666 <__retarget_lock_release_recursive>:
 8005666:	4770      	bx	lr

08005668 <_init>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr

08005674 <_fini>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr
