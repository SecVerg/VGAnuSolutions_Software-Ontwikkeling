
VGAnuS_Software-Ontwikkeling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c8  080055c8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d0  080055d0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080055d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013130  20000080  08005658  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200131b0  08005658  000231b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d84  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8a  00000000  00000000  00033e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000369c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000376e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c0f  00000000  00000000  00038308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001101e  00000000  00000000  0005af17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4d7  00000000  00000000  0006bf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013740c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  00137460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005524 	.word	0x08005524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005524 	.word	0x08005524

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_DMA_Init+0x78>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a1a      	ldr	r2, [pc, #104]	; (80005f0 <MX_DMA_Init+0x78>)
 8000588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_DMA_Init+0x78>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_DMA_Init+0x78>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <MX_DMA_Init+0x78>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_DMA_Init+0x78>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2010      	movs	r0, #16
 80005bc:	f000 ffa5 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005c0:	2010      	movs	r0, #16
 80005c2:	f000 ffbe 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2011      	movs	r0, #17
 80005cc:	f000 ff9d 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005d0:	2011      	movs	r0, #17
 80005d2:	f000 ffb6 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2044      	movs	r0, #68	; 0x44
 80005dc:	f000 ff95 	bl	800150a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005e0:	2044      	movs	r0, #68	; 0x44
 80005e2:	f000 ffae 	bl	8001542 <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a31      	ldr	r2, [pc, #196]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a23      	ldr	r2, [pc, #140]	; (80006d8 <MX_GPIO_Init+0xe4>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_GPIO_Init+0xe4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000680:	4816      	ldr	r0, [pc, #88]	; (80006dc <MX_GPIO_Init+0xe8>)
 8000682:	f001 fd17 	bl	80020b4 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <MX_GPIO_Init+0xec>)
 800068e:	f001 fd11 	bl	80020b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000692:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000696:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <MX_GPIO_Init+0xe8>)
 80006ac:	f001 fb66 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_GPIO_Init+0xec>)
 80006ca:	f001 fb57 	bl	8001d7c <HAL_GPIO_Init>

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020400 	.word	0x40020400

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 fdc2 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f82c 	bl	8000748 <SystemClock_Config>
  //ITM_Port32(31) = 1;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff ff80 	bl	80005f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f4:	f7ff ff40 	bl	8000578 <MX_DMA_Init>
  MX_TIM1_Init();
 80006f8:	f000 fa82 	bl	8000c00 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006fc:	f000 fad0 	bl	8000ca0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000700:	f000 fbe6 	bl	8000ed0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  API_init_IO();
 8000704:	f004 faa4 	bl	8004c50 <API_init_IO>

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <main+0x58>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	68da      	ldr	r2, [r3, #12]
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <main+0x58>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f042 0210 	orr.w	r2, r2, #16
 8000716:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RX_BUFSIZE);
 8000718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800071c:	4908      	ldr	r1, [pc, #32]	; (8000740 <main+0x5c>)
 800071e:	4807      	ldr	r0, [pc, #28]	; (800073c <main+0x58>)
 8000720:	f003 fbdc 	bl	8003edc <HAL_UART_Receive_DMA>
  HAL_UART_Transmit(&huart2, US_mess, (uint8_t)strlen((char*)US_mess), 100);
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <main+0x60>)
 8000726:	f7ff fd53 	bl	80001d0 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	b29a      	uxth	r2, r3
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	4904      	ldr	r1, [pc, #16]	; (8000744 <main+0x60>)
 8000734:	4801      	ldr	r0, [pc, #4]	; (800073c <main+0x58>)
 8000736:	f003 fad2 	bl	8003cde <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073a:	e7fe      	b.n	800073a <main+0x56>
 800073c:	20013158 	.word	0x20013158
 8000740:	20012da8 	.word	0x20012da8
 8000744:	20000000 	.word	0x20000000

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 faae 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a27      	ldr	r2, [pc, #156]	; (8000814 <SystemClock_Config+0xcc>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xcc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <SystemClock_Config+0xd0>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <SystemClock_Config+0xd0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007bc:	23a8      	movs	r3, #168	; 0xa8
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fc8b 	bl	80020e8 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d8:	f000 f820 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2105      	movs	r1, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 feec 	bl	80025d8 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000806:	f000 f809 	bl	800081c <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	; 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <UB_VGA_Screen_Init+0x84>)
 8000832:	2200      	movs	r2, #0
 8000834:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <UB_VGA_Screen_Init+0x84>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <UB_VGA_Screen_Init+0x84>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <UB_VGA_Screen_Init+0x88>)
 8000844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000848:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800084a:	481b      	ldr	r0, [pc, #108]	; (80008b8 <UB_VGA_Screen_Init+0x8c>)
 800084c:	f002 f910 	bl	8002a70 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000850:	210c      	movs	r1, #12
 8000852:	4819      	ldr	r0, [pc, #100]	; (80008b8 <UB_VGA_Screen_Init+0x8c>)
 8000854:	f002 f9c4 	bl	8002be0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000858:	2108      	movs	r1, #8
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <UB_VGA_Screen_Init+0x8c>)
 800085c:	f002 fa88 	bl	8002d70 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <UB_VGA_Screen_Init+0x90>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <UB_VGA_Screen_Init+0x90>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800086e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <UB_VGA_Screen_Init+0x90>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <UB_VGA_Screen_Init+0x90>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0201 	orr.w	r2, r2, #1
 800087e:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8000880:	490f      	ldr	r1, [pc, #60]	; (80008c0 <UB_VGA_Screen_Init+0x94>)
 8000882:	f240 1341 	movw	r3, #321	; 0x141
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <UB_VGA_Screen_Init+0x98>)
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <UB_VGA_Screen_Init+0x9c>)
 800088a:	f000 ff23 	bl	80016d4 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <UB_VGA_Screen_Init+0x9c>)
 8000890:	f000 fe72 	bl	8001578 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <UB_VGA_Screen_Init+0x9c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <UB_VGA_Screen_Init+0x9c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f042 0210 	orr.w	r2, r2, #16
 80008a2:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <UB_VGA_Screen_Init+0xa0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a01      	ldr	r2, [pc, #4]	; (80008b0 <UB_VGA_Screen_Init+0x84>)
 80008aa:	6093      	str	r3, [r2, #8]
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000ac 	.word	0x200000ac
 80008b4:	40020400 	.word	0x40020400
 80008b8:	20012f50 	.word	0x20012f50
 80008bc:	20012ea8 	.word	0x20012ea8
 80008c0:	200000b8 	.word	0x200000b8
 80008c4:	40021015 	.word	0x40021015
 80008c8:	20012ef0 	.word	0x20012ef0
 80008cc:	40026488 	.word	0x40026488

080008d0 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	81bb      	strh	r3, [r7, #12]
 80008de:	e012      	b.n	8000906 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	81fb      	strh	r3, [r7, #14]
 80008e4:	e008      	b.n	80008f8 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	89b9      	ldrh	r1, [r7, #12]
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f813 	bl	8000918 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	3301      	adds	r3, #1
 80008f6:	81fb      	strh	r3, [r7, #14]
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80008fe:	d3f2      	bcc.n	80008e6 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	81bb      	strh	r3, [r7, #12]
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	2bef      	cmp	r3, #239	; 0xef
 800090a:	d9e9      	bls.n	80008e0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
 8000922:	460b      	mov	r3, r1
 8000924:	80bb      	strh	r3, [r7, #4]
 8000926:	4613      	mov	r3, r2
 8000928:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000930:	d301      	bcc.n	8000936 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	2bef      	cmp	r3, #239	; 0xef
 800093a:	d901      	bls.n	8000940 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8000940:	88ba      	ldrh	r2, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	441a      	add	r2, r3
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	4413      	add	r3, r2
 8000950:	4904      	ldr	r1, [pc, #16]	; (8000964 <UB_VGA_SetPixel+0x4c>)
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	54ca      	strb	r2, [r1, r3]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200000b8 	.word	0x200000b8

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0c:	f000 fc82 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <DMA1_Stream5_IRQHandler+0x10>)
 8000a1a:	f000 ff45 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20012f98 	.word	0x20012f98

08000a28 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <DMA1_Stream6_IRQHandler+0x10>)
 8000a2e:	f000 ff3b 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20012ff8 	.word	0x20012ff8

08000a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a40:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <TIM2_IRQHandler+0xa8>)
 8000a42:	f002 faa3 	bl	8002f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <TIM2_IRQHandler+0xa8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f06f 0208 	mvn.w	r2, #8
 8000a4e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	3301      	adds	r3, #1
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a5a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000a64:	d905      	bls.n	8000a72 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <TIM2_IRQHandler+0xb0>)
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a70:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d802      	bhi.n	8000a80 <TIM2_IRQHandler+0x44>
 8000a7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a7e:	e001      	b.n	8000a84 <TIM2_IRQHandler+0x48>
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <TIM2_IRQHandler+0xb4>)
 8000a86:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	2b23      	cmp	r3, #35	; 0x23
 8000a8e:	d927      	bls.n	8000ae0 <TIM2_IRQHandler+0xa4>
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	f240 2202 	movw	r2, #514	; 0x202
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d821      	bhi.n	8000ae0 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000a9c:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <TIM2_IRQHandler+0xb8>)
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <TIM2_IRQHandler+0xb8>)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <TIM2_IRQHandler+0xbc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <TIM2_IRQHandler+0xbc>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <TIM2_IRQHandler+0xc0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <TIM2_IRQHandler+0xc0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0201 	orr.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d005      	beq.n	8000ae0 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000adc:	4a02      	ldr	r2, [pc, #8]	; (8000ae8 <TIM2_IRQHandler+0xac>)
 8000ade:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20012f50 	.word	0x20012f50
 8000ae8:	200000ac 	.word	0x200000ac
 8000aec:	200000b8 	.word	0x200000b8
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40026488 	.word	0x40026488
 8000af8:	40010000 	.word	0x40010000
 8000afc:	20012ef0 	.word	0x20012ef0

08000b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <USART2_IRQHandler+0x24>)
 8000b06:	f003 fa19 	bl	8003f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <USART2_IRQHandler+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f003 0310 	and.w	r3, r3, #16
 8000b14:	2b10      	cmp	r3, #16
 8000b16:	d102      	bne.n	8000b1e <USART2_IRQHandler+0x1e>
  {
	  HAL_UART_RxCpltCallback(&huart2);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <USART2_IRQHandler+0x24>)
 8000b1a:	f000 fab9 	bl	8001090 <HAL_UART_RxCpltCallback>
  }

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20013158 	.word	0x20013158

08000b28 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  // if (__HAL_DMA_GET_IT_SOURCE(&hdma_tim1_up, DMA_IT_TC)) // not needed?
  // {
    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <DMA2_Stream5_IRQHandler+0x48>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6a1a      	ldr	r2, [r3, #32]
 8000b32:	f241 1311 	movw	r3, #4369	; 0x1111
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10f      	bne.n	8000b5c <DMA2_Stream5_IRQHandler+0x34>
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <DMA2_Stream5_IRQHandler+0x48>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6a1a      	ldr	r2, [r3, #32]
 8000b42:	f240 4344 	movw	r3, #1092	; 0x444
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d107      	bne.n	8000b5c <DMA2_Stream5_IRQHandler+0x34>
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <DMA2_Stream5_IRQHandler+0x48>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <DMA2_Stream5_IRQHandler+0x48>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 0201 	bic.w	r2, r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <DMA2_Stream5_IRQHandler+0x4c>)
 8000b5e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b62:	619a      	str	r2, [r3, #24]
  // }

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <DMA2_Stream5_IRQHandler+0x50>)
 8000b66:	f000 fe9f 	bl	80018a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20012ea8 	.word	0x20012ea8
 8000b74:	40021000 	.word	0x40021000
 8000b78:	20012ef0 	.word	0x20012ef0

08000b7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_sbrk+0x50>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x16>
		heap_end = &end;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <_sbrk+0x50>)
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <_sbrk+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <_sbrk+0x50>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <_sbrk+0x50>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d907      	bls.n	8000bb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ba6:	f004 f85d 	bl	8004c64 <__errno>
 8000baa:	4603      	mov	r3, r0
 8000bac:	220c      	movs	r2, #12
 8000bae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	e006      	b.n	8000bc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <_sbrk+0x50>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <_sbrk+0x50>)
 8000bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000009c 	.word	0x2000009c
 8000bd0:	200131b0 	.word	0x200131b0

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <SystemInit+0x28>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <SystemInit+0x28>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SystemInit+0x28>)
 8000bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bee:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <MX_TIM1_Init+0x9c>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c30:	220b      	movs	r2, #11
 8000c32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c46:	4814      	ldr	r0, [pc, #80]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c48:	f001 fec2 	bl	80029d0 <HAL_TIM_Base_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000c52:	f7ff fde3 	bl	800081c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c64:	f002 fb58 	bl	8003318 <HAL_TIM_ConfigClockSource>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c6e:	f7ff fdd5 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_TIM1_Init+0x98>)
 8000c80:	f002 ff50 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c8a:	f7ff fdc7 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20012ea8 	.word	0x20012ea8
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000cd8:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cea:	4820      	ldr	r0, [pc, #128]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000cec:	f001 ff28 	bl	8002b40 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cf6:	f7ff fd91 	bl	800081c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	4619      	mov	r1, r3
 8000d08:	4818      	ldr	r0, [pc, #96]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000d0a:	f002 ff0b 	bl	8003b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d14:	f7ff fd82 	bl	800081c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000d1c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d22:	2302      	movs	r3, #2
 8000d24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000d32:	f002 fa33 	bl	800319c <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d3c:	f7ff fd6e 	bl	800081c <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000d40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	220c      	movs	r2, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000d4e:	f002 fa25 	bl	800319c <HAL_TIM_PWM_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000d58:	f7ff fd60 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <MX_TIM2_Init+0xcc>)
 8000d5e:	f000 f87f 	bl	8000e60 <HAL_TIM_MspPostInit>

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20012f50 	.word	0x20012f50

08000d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_TIM_Base_MspInit+0x94>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d13c      	bne.n	8000dfc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_TIM_Base_MspInit+0x98>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_TIM_Base_MspInit+0x98>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_TIM_Base_MspInit+0x98>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_TIM_Base_MspInit+0xa0>)
 8000da2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000da6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000daa:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000dae:	2240      	movs	r2, #64	; 0x40
 8000db0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbe:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000dd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dd8:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000de2:	f000 fbc9 	bl	8001578 <HAL_DMA_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000dec:	f7ff fd16 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000df4:	621a      	str	r2, [r3, #32]
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <HAL_TIM_Base_MspInit+0x9c>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	20012ef0 	.word	0x20012ef0
 8000e10:	40026488 	.word	0x40026488

08000e14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d115      	bne.n	8000e52 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_TIM_PWM_MspInit+0x48>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_TIM_PWM_MspInit+0x48>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_TIM_PWM_MspInit+0x48>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	201c      	movs	r0, #28
 8000e48:	f000 fb5f 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f000 fb78 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e80:	d11e      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_TIM_MspPostInit+0x68>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_TIM_MspPostInit+0x68>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_TIM_MspPostInit+0x68>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <HAL_TIM_MspPostInit+0x6c>)
 8000ebc:	f000 ff5e 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <MX_USART2_UART_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f08:	f002 fe9c 	bl	8003c44 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f12:	f7ff fc83 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20013158 	.word	0x20013158
 8000f20:	40004400 	.word	0x40004400

08000f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_UART_MspInit+0x150>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 8091 	bne.w	800106a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b43      	ldr	r3, [pc, #268]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a42      	ldr	r2, [pc, #264]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <HAL_UART_MspInit+0x154>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f80:	230c      	movs	r3, #12
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f90:	2307      	movs	r3, #7
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4838      	ldr	r0, [pc, #224]	; (800107c <HAL_UART_MspInit+0x158>)
 8000f9c:	f000 feee 	bl	8001d7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fa2:	4a38      	ldr	r2, [pc, #224]	; (8001084 <HAL_UART_MspInit+0x160>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b34      	ldr	r3, [pc, #208]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fe2:	4827      	ldr	r0, [pc, #156]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000fe4:	f000 fac8 	bl	8001578 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000fee:	f7ff fc15 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <HAL_UART_MspInit+0x15c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001000:	4a22      	ldr	r2, [pc, #136]	; (800108c <HAL_UART_MspInit+0x168>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_UART_MspInit+0x164>)
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_UART_MspInit+0x164>)
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_UART_MspInit+0x164>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_UART_MspInit+0x164>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001040:	f000 fa9a 	bl	8001578 <HAL_DMA_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800104a:	f7ff fbe7 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
 8001054:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <HAL_UART_MspInit+0x164>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2026      	movs	r0, #38	; 0x26
 8001060:	f000 fa53 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f000 fa6c 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000
 8001080:	20012f98 	.word	0x20012f98
 8001084:	40026088 	.word	0x40026088
 8001088:	20012ff8 	.word	0x20012ff8
 800108c:	400260a0 	.word	0x400260a0

08001090 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	// idle detection needs at least one UART clock to detect the bus is idle. So
	// in the case, that the transmission length is one full buffer length
	// and the start buffer pointer is at 0, it will be also 0 at the end of the
	// transmission. In this case the DMA rollover will increment the RxRollover
	// variable first and len will not be zero.
	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {									// Check if it is an "Idle Interrupt"
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	f040 808d 	bne.w	80011c2 <HAL_UART_RxCpltCallback+0x132>
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);												// clear the interrupt
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <HAL_UART_RxCpltCallback+0x148>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <HAL_UART_RxCpltCallback+0x148>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
		RxCounter++;																	// increment the Rx Counter
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HAL_UART_RxCpltCallback+0x14c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b45      	ldr	r3, [pc, #276]	; (80011dc <HAL_UART_RxCpltCallback+0x14c>)
 80010c8:	701a      	strb	r2, [r3, #0]

		uint8_t TxSize = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
		uint16_t start = RxBfrPos;														// Rx bytes start position (=last buffer position)
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <HAL_UART_RxCpltCallback+0x150>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	823b      	strh	r3, [r7, #16]
		RxBfrPos = RX_BUFSIZE - (uint16_t)huart->hdmarx->Instance->NDTR;				// determine actual buffer position
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	425b      	negs	r3, r3
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <HAL_UART_RxCpltCallback+0x150>)
 80010e4:	701a      	strb	r2, [r3, #0]
		uint16_t len = RX_BUFSIZE;														// init len with max. size
 80010e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ea:	82bb      	strh	r3, [r7, #20]

		if(RxRollover < 2)  {
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_UART_RxCpltCallback+0x154>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d81e      	bhi.n	8001132 <HAL_UART_RxCpltCallback+0xa2>
			if(RxRollover) {															// rolled over once
 80010f4:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_UART_RxCpltCallback+0x154>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_UART_RxCpltCallback+0x94>
				if(RxBfrPos <= start) len = RxBfrPos + RX_BUFSIZE - start;				// no bytes overwritten
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <HAL_UART_RxCpltCallback+0x150>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b29b      	uxth	r3, r3
 8001102:	8a3a      	ldrh	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d309      	bcc.n	800111c <HAL_UART_RxCpltCallback+0x8c>
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <HAL_UART_RxCpltCallback+0x150>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b29a      	uxth	r2, r3
 800110e:	8a3b      	ldrh	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001118:	82bb      	strh	r3, [r7, #20]
 800111a:	e00d      	b.n	8001138 <HAL_UART_RxCpltCallback+0xa8>
				else len = RX_BUFSIZE + 1;												// bytes overwritten error
 800111c:	f240 1301 	movw	r3, #257	; 0x101
 8001120:	82bb      	strh	r3, [r7, #20]
 8001122:	e009      	b.n	8001138 <HAL_UART_RxCpltCallback+0xa8>
			} else {
				len = RxBfrPos - start;													// no bytes overwritten
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_UART_RxCpltCallback+0x150>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b29a      	uxth	r2, r3
 800112a:	8a3b      	ldrh	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	82bb      	strh	r3, [r7, #20]
 8001130:	e002      	b.n	8001138 <HAL_UART_RxCpltCallback+0xa8>
			}
		} else {
			len = RX_BUFSIZE + 2;														// dual rollover error
 8001132:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001136:	82bb      	strh	r3, [r7, #20]
		}

		if(len && (len <= RX_BUFSIZE)) {
 8001138:	8abb      	ldrh	r3, [r7, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d029      	beq.n	8001192 <HAL_UART_RxCpltCallback+0x102>
 800113e:	8abb      	ldrh	r3, [r7, #20]
 8001140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001144:	d825      	bhi.n	8001192 <HAL_UART_RxCpltCallback+0x102>
			// create response message
			#ifdef UART_DBG
				sprintf(UART2_txBuffer, "ACK RxC:%d S:%d L:%d RO:%d RXp:%d >>", RxCounter, start, len, RxRollover, RxBfrPos);

			#else
				sprintf(UART2_txBuffer, "U heeft ingevoerd:");
 8001146:	4928      	ldr	r1, [pc, #160]	; (80011e8 <HAL_UART_RxCpltCallback+0x158>)
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <HAL_UART_RxCpltCallback+0x15c>)
 800114a:	f003 fdbd 	bl	8004cc8 <siprintf>
			#endif
			TxSize = strlen(UART2_txBuffer);
 800114e:	4827      	ldr	r0, [pc, #156]	; (80011ec <HAL_UART_RxCpltCallback+0x15c>)
 8001150:	f7ff f83e 	bl	80001d0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	75fb      	strb	r3, [r7, #23]

			// add received bytes to UART2_txBuffer
			uint8_t i;
			for(i = 0; i < len; i++) *(UART2_txBuffer + TxSize + i) = *(UART2_rxBuffer + ((start + i) % RX_BUFSIZE));
 8001158:	2300      	movs	r3, #0
 800115a:	74fb      	strb	r3, [r7, #19]
 800115c:	e00f      	b.n	800117e <HAL_UART_RxCpltCallback+0xee>
 800115e:	8a3a      	ldrh	r2, [r7, #16]
 8001160:	7cfb      	ldrb	r3, [r7, #19]
 8001162:	4413      	add	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <HAL_UART_RxCpltCallback+0x160>)
 8001168:	441a      	add	r2, r3
 800116a:	7df9      	ldrb	r1, [r7, #23]
 800116c:	7cfb      	ldrb	r3, [r7, #19]
 800116e:	440b      	add	r3, r1
 8001170:	491e      	ldr	r1, [pc, #120]	; (80011ec <HAL_UART_RxCpltCallback+0x15c>)
 8001172:	440b      	add	r3, r1
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	7cfb      	ldrb	r3, [r7, #19]
 800117a:	3301      	adds	r3, #1
 800117c:	74fb      	strb	r3, [r7, #19]
 800117e:	7cfb      	ldrb	r3, [r7, #19]
 8001180:	b29b      	uxth	r3, r3
 8001182:	8aba      	ldrh	r2, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8ea      	bhi.n	800115e <HAL_UART_RxCpltCallback+0xce>
			TxSize += i;
 8001188:	7dfa      	ldrb	r2, [r7, #23]
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	4413      	add	r3, r2
 800118e:	75fb      	strb	r3, [r7, #23]
		if(len && (len <= RX_BUFSIZE)) {
 8001190:	e00c      	b.n	80011ac <HAL_UART_RxCpltCallback+0x11c>
		} else {
			// buffer overflow error:
			sprintf(UART2_txBuffer, "NAK RX BUFFER OVERFLOW ERROR %d\r\n", (len - RX_BUFSIZE));	// Change error message
 8001192:	8abb      	ldrh	r3, [r7, #20]
 8001194:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001198:	461a      	mov	r2, r3
 800119a:	4916      	ldr	r1, [pc, #88]	; (80011f4 <HAL_UART_RxCpltCallback+0x164>)
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <HAL_UART_RxCpltCallback+0x15c>)
 800119e:	f003 fd93 	bl	8004cc8 <siprintf>
			TxSize = strlen(UART2_txBuffer);
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <HAL_UART_RxCpltCallback+0x15c>)
 80011a4:	f7ff f814 	bl	80001d0 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	75fb      	strb	r3, [r7, #23]
		}

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)UART2_txBuffer, TxSize);						// send a response
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <HAL_UART_RxCpltCallback+0x15c>)
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <HAL_UART_RxCpltCallback+0x148>)
 80011b6:	f002 fe25 	bl	8003e04 <HAL_UART_Transmit_DMA>

		RxRollover = 0;																	// reset the Rollover variable
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_UART_RxCpltCallback+0x154>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
	} else {
		// no idle flag? --> DMA rollover occurred
		RxRollover++;		// increment Rollover Counter
	}
}
 80011c0:	e005      	b.n	80011ce <HAL_UART_RxCpltCallback+0x13e>
		RxRollover++;		// increment Rollover Counter
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_UART_RxCpltCallback+0x154>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_UART_RxCpltCallback+0x154>)
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20013158 	.word	0x20013158
 80011dc:	200000a1 	.word	0x200000a1
 80011e0:	200000a2 	.word	0x200000a2
 80011e4:	200000a0 	.word	0x200000a0
 80011e8:	0800553c 	.word	0x0800553c
 80011ec:	20013058 	.word	0x20013058
 80011f0:	20012da8 	.word	0x20012da8
 80011f4:	08005550 	.word	0x08005550

080011f8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	// UART Tx Complete Callback;
	TxCounter++;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_UART_TxCpltCallback+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_UART_TxCpltCallback+0x20>)
 800120a:	701a      	strb	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	200000a3 	.word	0x200000a3

0800121c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001254 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001220:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001222:	e003      	b.n	800122c <LoopCopyDataInit>

08001224 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001226:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001228:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800122a:	3104      	adds	r1, #4

0800122c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001230:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001234:	d3f6      	bcc.n	8001224 <CopyDataInit>
  ldr  r2, =_sbss
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001238:	e002      	b.n	8001240 <LoopFillZerobss>

0800123a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800123a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800123c:	f842 3b04 	str.w	r3, [r2], #4

08001240 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001244:	d3f9      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001246:	f7ff fcc5 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124a:	f003 fd11 	bl	8004c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124e:	f7ff fa49 	bl	80006e4 <main>
  bx  lr    
 8001252:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001254:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001258:	080055d8 	.word	0x080055d8
  ldr  r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001260:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001264:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001268:	200131b0 	.word	0x200131b0

0800126c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC_IRQHandler>
	...

08001270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_Init+0x40>)
 800127a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_Init+0x40>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x40>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f92b 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fb60 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f943 	bl	800155e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f90b 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000010 	.word	0x20000010
 800130c:	20000018 	.word	0x20000018
 8001310:	20000014 	.word	0x20000014

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000018 	.word	0x20000018
 8001338:	2001319c 	.word	0x2001319c

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	2001319c 	.word	0x2001319c

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff feda 	bl	800133c <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e099      	b.n	80016c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b4:	e00f      	b.n	80015d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015b6:	f7ff fec1 	bl	800133c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d908      	bls.n	80015d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2220      	movs	r2, #32
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2203      	movs	r2, #3
 80015ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e078      	b.n	80016c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e8      	bne.n	80015b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_DMA_Init+0x158>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2b04      	cmp	r3, #4
 800162e:	d107      	bne.n	8001640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4313      	orrs	r3, r2
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f023 0307 	bic.w	r3, r3, #7
 8001656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	2b04      	cmp	r3, #4
 8001668:	d117      	bne.n	800169a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00e      	beq.n	800169a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fb01 	bl	8001c84 <DMA_CheckFifoParam>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2240      	movs	r2, #64	; 0x40
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001696:	2301      	movs	r3, #1
 8001698:	e016      	b.n	80016c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fab8 	bl	8001c18 <DMA_CalcBaseAndBitshift>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	f010803f 	.word	0xf010803f

080016d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d101      	bne.n	80016fa <HAL_DMA_Start_IT+0x26>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e040      	b.n	800177c <HAL_DMA_Start_IT+0xa8>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d12f      	bne.n	800176e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2202      	movs	r2, #2
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 fa4a 	bl	8001bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	223f      	movs	r2, #63	; 0x3f
 800172e:	409a      	lsls	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0216 	orr.w	r2, r2, #22
 8001742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0208 	orr.w	r2, r2, #8
 800175a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e005      	b.n	800177a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001776:	2302      	movs	r3, #2
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001792:	f7ff fdd3 	bl	800133c <HAL_GetTick>
 8001796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e052      	b.n	800185c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0216 	bic.w	r2, r2, #22
 80017c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <HAL_DMA_Abort+0x62>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0208 	bic.w	r2, r2, #8
 80017f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001806:	e013      	b.n	8001830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001808:	f7ff fd98 	bl	800133c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b05      	cmp	r3, #5
 8001814:	d90c      	bls.n	8001830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e015      	b.n	800185c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1e4      	bne.n	8001808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	223f      	movs	r2, #63	; 0x3f
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d004      	beq.n	8001882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00c      	b.n	800189c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018b4:	4b92      	ldr	r3, [pc, #584]	; (8001b00 <HAL_DMA_IRQHandler+0x258>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <HAL_DMA_IRQHandler+0x25c>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0a9b      	lsrs	r3, r3, #10
 80018c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	2208      	movs	r2, #8
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d01a      	beq.n	8001914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0204 	bic.w	r2, r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2208      	movs	r2, #8
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2201      	movs	r2, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d012      	beq.n	800194a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2201      	movs	r2, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f043 0202 	orr.w	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	2204      	movs	r2, #4
 8001950:	409a      	lsls	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d012      	beq.n	8001980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00b      	beq.n	8001980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2204      	movs	r2, #4
 800196e:	409a      	lsls	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	f043 0204 	orr.w	r2, r3, #4
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	2210      	movs	r2, #16
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d043      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03c      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2210      	movs	r2, #16
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d018      	beq.n	80019ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d024      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
 80019d6:	e01f      	b.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
 80019e8:	e016      	b.n	8001a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0208 	bic.w	r2, r2, #8
 8001a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 808e 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8086 	beq.w	8001b46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	2220      	movs	r2, #32
 8001a40:	409a      	lsls	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d136      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0216 	bic.w	r2, r2, #22
 8001a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x1da>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0208 	bic.w	r2, r2, #8
 8001a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	223f      	movs	r2, #63	; 0x3f
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d07d      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
        }
        return;
 8001abe:	e078      	b.n	8001bb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01c      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d108      	bne.n	8001aee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d030      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
 8001aec:	e02b      	b.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d027      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	e022      	b.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
 8001b00:	20000010 	.word	0x20000010
 8001b04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0210 	bic.w	r2, r2, #16
 8001b24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d032      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d022      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d307      	bcc.n	8001b8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f2      	bne.n	8001b72 <HAL_DMA_IRQHandler+0x2ca>
 8001b8c:	e000      	b.n	8001b90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bb2:	bf00      	nop
    }
  }
}
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop

08001bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d108      	bne.n	8001bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bfa:	e007      	b.n	8001c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	3b10      	subs	r3, #16
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <DMA_CalcBaseAndBitshift+0x64>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <DMA_CalcBaseAndBitshift+0x68>)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d909      	bls.n	8001c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	1d1a      	adds	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58
 8001c58:	e007      	b.n	8001c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	aaaaaaab 	.word	0xaaaaaaab
 8001c80:	0800558c 	.word	0x0800558c

08001c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11f      	bne.n	8001cde <DMA_CheckFifoParam+0x5a>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d856      	bhi.n	8001d52 <DMA_CheckFifoParam+0xce>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <DMA_CheckFifoParam+0x28>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001ccf 	.word	0x08001ccf
 8001cb4:	08001cbd 	.word	0x08001cbd
 8001cb8:	08001d53 	.word	0x08001d53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d046      	beq.n	8001d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ccc:	e043      	b.n	8001d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cd6:	d140      	bne.n	8001d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cdc:	e03d      	b.n	8001d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce6:	d121      	bne.n	8001d2c <DMA_CheckFifoParam+0xa8>
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d837      	bhi.n	8001d5e <DMA_CheckFifoParam+0xda>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <DMA_CheckFifoParam+0x70>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d0b 	.word	0x08001d0b
 8001cfc:	08001d05 	.word	0x08001d05
 8001d00:	08001d1d 	.word	0x08001d1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
      break;
 8001d08:	e030      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d025      	beq.n	8001d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d1a:	e022      	b.n	8001d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d24:	d11f      	bne.n	8001d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d2a:	e01c      	b.n	8001d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d903      	bls.n	8001d3a <DMA_CheckFifoParam+0xb6>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d003      	beq.n	8001d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d38:	e018      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3e:	e015      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00e      	beq.n	8001d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d50:	e00b      	b.n	8001d6a <DMA_CheckFifoParam+0xe6>
      break;
 8001d52:	bf00      	nop
 8001d54:	e00a      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d56:	bf00      	nop
 8001d58:	e008      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5a:	bf00      	nop
 8001d5c:	e006      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d5e:	bf00      	nop
 8001d60:	e004      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d62:	bf00      	nop
 8001d64:	e002      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d66:	bf00      	nop
 8001d68:	e000      	b.n	8001d6c <DMA_CheckFifoParam+0xe8>
      break;
 8001d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e16b      	b.n	8002070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 815a 	bne.w	800206a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80b4 	beq.w	800206a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b60      	ldr	r3, [pc, #384]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a5f      	ldr	r2, [pc, #380]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_GPIO_Init+0x310>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a52      	ldr	r2, [pc, #328]	; (8002090 <HAL_GPIO_Init+0x314>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02b      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_GPIO_Init+0x318>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d025      	beq.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_GPIO_Init+0x31c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01f      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4f      	ldr	r2, [pc, #316]	; (800209c <HAL_GPIO_Init+0x320>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d019      	beq.n	8001f96 <HAL_GPIO_Init+0x21a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0x216>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <HAL_GPIO_Init+0x328>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00d      	beq.n	8001f8e <HAL_GPIO_Init+0x212>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x32c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d007      	beq.n	8001f8a <HAL_GPIO_Init+0x20e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d101      	bne.n	8001f86 <HAL_GPIO_Init+0x20a>
 8001f82:	2307      	movs	r3, #7
 8001f84:	e00e      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f86:	2308      	movs	r3, #8
 8001f88:	e00c      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	e00a      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f8e:	2305      	movs	r3, #5
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x228>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb4:	4935      	ldr	r1, [pc, #212]	; (800208c <HAL_GPIO_Init+0x310>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203a:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_GPIO_Init+0x334>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002064:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	f67f ae90 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40021c00 	.word	0x40021c00
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
 80020c0:	4613      	mov	r3, r2
 80020c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c4:	787b      	ldrb	r3, [r7, #1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d0:	e003      	b.n	80020da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e264      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d075      	beq.n	80021f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002106:	4ba3      	ldr	r3, [pc, #652]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d00c      	beq.n	800212c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4ba0      	ldr	r3, [pc, #640]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b9d      	ldr	r3, [pc, #628]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d10b      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b99      	ldr	r3, [pc, #612]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05b      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d157      	bne.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e23f      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x74>
 800214e:	4b91      	ldr	r3, [pc, #580]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a90      	ldr	r2, [pc, #576]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002166:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a8a      	ldr	r2, [pc, #552]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a87      	ldr	r2, [pc, #540]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a83      	ldr	r2, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a80      	ldr	r2, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff f8cc 	bl	800133c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a8:	f7ff f8c8 	bl	800133c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e204      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff f8b8 	bl	800133c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff f8b4 	bl	800133c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1f0      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1c4      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b56      	ldr	r3, [pc, #344]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4952      	ldr	r1, [pc, #328]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCC_OscConfig+0x2b0>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff f86d 	bl	800133c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff f869 	bl	800133c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1a5      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4940      	ldr	r1, [pc, #256]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x2b0>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff f84c 	bl	800133c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a8:	f7ff f848 	bl	800133c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e184      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d030      	beq.n	8002334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x2b4>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7ff f82c 	bl	800133c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff f828 	bl	800133c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e164      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x200>
 8002306:	e015      	b.n	8002334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x2b4>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff f815 	bl	800133c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002316:	f7ff f811 	bl	800133c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e14d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a0 	beq.w	8002482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d121      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7fe ffd7 	bl	800133c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e011      	b.n	80023b6 <HAL_RCC_OscConfig+0x2ce>
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	42470000 	.word	0x42470000
 800239c:	42470e80 	.word	0x42470e80
 80023a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a4:	f7fe ffca 	bl	800133c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e106      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b85      	ldr	r3, [pc, #532]	; (80025cc <HAL_RCC_OscConfig+0x4e4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a80      	ldr	r2, [pc, #512]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
 80023d6:	e01c      	b.n	8002412 <HAL_RCC_OscConfig+0x32a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x312>
 80023e0:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4a7a      	ldr	r2, [pc, #488]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6713      	str	r3, [r2, #112]	; 0x70
 80023ec:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a77      	ldr	r2, [pc, #476]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x32a>
 80023fa:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a74      	ldr	r2, [pc, #464]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a71      	ldr	r2, [pc, #452]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe ff8f 	bl	800133c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe ff8b 	bl	800133c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0c5      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ee      	beq.n	8002422 <HAL_RCC_OscConfig+0x33a>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe ff79 	bl	800133c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe ff75 	bl	800133c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0af      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 809b 	beq.w	80025c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d05c      	beq.n	8002552 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d141      	bne.n	8002524 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe ff49 	bl	800133c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fe ff45 	bl	800133c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e081      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	019b      	lsls	r3, r3, #6
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	4937      	ldr	r1, [pc, #220]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f6:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe ff1e 	bl	800133c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe ff1a 	bl	800133c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e056      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x41c>
 8002522:	e04e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe ff07 	bl	800133c <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe ff03 	bl	800133c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e03f      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x44a>
 8002550:	e037      	b.n	80025c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e032      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d028      	beq.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d121      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d11a      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258e:	4013      	ands	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002594:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002596:	4293      	cmp	r3, r2
 8002598:	d111      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	3b01      	subs	r3, #1
 80025a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40007000 	.word	0x40007000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	42470060 	.word	0x42470060

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0cc      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b68      	ldr	r3, [pc, #416]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d90c      	bls.n	8002614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800264e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d044      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d119      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d003      	beq.n	8002696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002692:	2b03      	cmp	r3, #3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e067      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4934      	ldr	r1, [pc, #208]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fe38 	bl	800133c <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7fe fe34 	bl	800133c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e04f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d20c      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fd98 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023c00 	.word	0x40023c00
 8002794:	40023800 	.word	0x40023800
 8002798:	08005574 	.word	0x08005574
 800279c:	20000010 	.word	0x20000010
 80027a0:	20000014 	.word	0x20000014

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	2300      	movs	r3, #0
 80027b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027bc:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d00d      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x40>
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	f200 80bd 	bhi.w	8002948 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x34>
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x3a>
 80027d6:	e0b7      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027da:	60bb      	str	r3, [r7, #8]
       break;
 80027dc:	e0b7      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027e0:	60bb      	str	r3, [r7, #8]
      break;
 80027e2:	e0b4      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e4:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ee:	4b5b      	ldr	r3, [pc, #364]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04d      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	461a      	mov	r2, r3
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	ea02 0800 	and.w	r8, r2, r0
 8002812:	ea03 0901 	and.w	r9, r3, r1
 8002816:	4640      	mov	r0, r8
 8002818:	4649      	mov	r1, r9
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	014b      	lsls	r3, r1, #5
 8002824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002828:	0142      	lsls	r2, r0, #5
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	ebb0 0008 	subs.w	r0, r0, r8
 8002832:	eb61 0109 	sbc.w	r1, r1, r9
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002844:	0182      	lsls	r2, r0, #6
 8002846:	1a12      	subs	r2, r2, r0
 8002848:	eb63 0301 	sbc.w	r3, r3, r1
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	00d9      	lsls	r1, r3, #3
 8002856:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800285a:	00d0      	lsls	r0, r2, #3
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	eb12 0208 	adds.w	r2, r2, r8
 8002864:	eb43 0309 	adc.w	r3, r3, r9
 8002868:	f04f 0000 	mov.w	r0, #0
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	0259      	lsls	r1, r3, #9
 8002872:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002876:	0250      	lsls	r0, r2, #9
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	f7fd fcfa 	bl	8000280 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e04a      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	461a      	mov	r2, r3
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	ea02 0400 	and.w	r4, r2, r0
 80028ae:	ea03 0501 	and.w	r5, r3, r1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	014b      	lsls	r3, r1, #5
 80028c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028c4:	0142      	lsls	r2, r0, #5
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	1b00      	subs	r0, r0, r4
 80028cc:	eb61 0105 	sbc.w	r1, r1, r5
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	018b      	lsls	r3, r1, #6
 80028da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028de:	0182      	lsls	r2, r0, #6
 80028e0:	1a12      	subs	r2, r2, r0
 80028e2:	eb63 0301 	sbc.w	r3, r3, r1
 80028e6:	f04f 0000 	mov.w	r0, #0
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	00d9      	lsls	r1, r3, #3
 80028f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f4:	00d0      	lsls	r0, r2, #3
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	1912      	adds	r2, r2, r4
 80028fc:	eb45 0303 	adc.w	r3, r5, r3
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0299      	lsls	r1, r3, #10
 800290a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800290e:	0290      	lsls	r0, r2, #10
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f7fd fcae 	bl	8000280 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	60bb      	str	r3, [r7, #8]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800294a:	60bb      	str	r3, [r7, #8]
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	68bb      	ldr	r3, [r7, #8]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	00f42400 	.word	0x00f42400
 8002964:	007a1200 	.word	0x007a1200

08002968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_GetHCLKFreq+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000010 	.word	0x20000010

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002984:	f7ff fff0 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0a9b      	lsrs	r3, r3, #10
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4903      	ldr	r1, [pc, #12]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08005584 	.word	0x08005584

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029ac:	f7ff ffdc 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0b5b      	lsrs	r3, r3, #13
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4903      	ldr	r1, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	08005584 	.word	0x08005584

080029d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e041      	b.n	8002a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe f9ba 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f000 fd78 	bl	8003504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d001      	beq.n	8002a88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e046      	b.n	8002b16 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <HAL_TIM_Base_Start+0xb4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x70>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x70>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <HAL_TIM_Base_Start+0xb8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x70>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <HAL_TIM_Base_Start+0xbc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x70>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_TIM_Base_Start+0xc0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x70>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_TIM_Base_Start+0xc4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x70>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_TIM_Base_Start+0xc8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x70>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_TIM_Base_Start+0xcc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d111      	bne.n	8002b04 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d010      	beq.n	8002b14 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	e007      	b.n	8002b14 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40010400 	.word	0x40010400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40001800 	.word	0x40001800

08002b40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e041      	b.n	8002bd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe f954 	bl	8000e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f000 fcc0 	bl	8003504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_TIM_PWM_Start+0x24>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e022      	b.n	8002c4a <HAL_TIM_PWM_Start+0x6a>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d109      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x3e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e015      	b.n	8002c4a <HAL_TIM_PWM_Start+0x6a>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d109      	bne.n	8002c38 <HAL_TIM_PWM_Start+0x58>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e008      	b.n	8002c4a <HAL_TIM_PWM_Start+0x6a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07c      	b.n	8002d4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x82>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	e013      	b.n	8002c8a <HAL_TIM_PWM_Start+0xaa>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x92>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c70:	e00b      	b.n	8002c8a <HAL_TIM_PWM_Start+0xaa>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xa2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c80:	e003      	b.n	8002c8a <HAL_TIM_PWM_Start+0xaa>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	6839      	ldr	r1, [r7, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 ff20 	bl	8003ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2d      	ldr	r2, [pc, #180]	; (8002d54 <HAL_TIM_PWM_Start+0x174>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_TIM_PWM_Start+0xcc>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2c      	ldr	r2, [pc, #176]	; (8002d58 <HAL_TIM_PWM_Start+0x178>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIM_PWM_Start+0xd0>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_PWM_Start+0xd2>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <HAL_TIM_PWM_Start+0x174>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d022      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x136>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d01d      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x136>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_TIM_PWM_Start+0x17c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d018      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x136>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	; (8002d60 <HAL_TIM_PWM_Start+0x180>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x136>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <HAL_TIM_PWM_Start+0x184>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x136>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a16      	ldr	r2, [pc, #88]	; (8002d58 <HAL_TIM_PWM_Start+0x178>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d009      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x136>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <HAL_TIM_PWM_Start+0x188>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_TIM_PWM_Start+0x136>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <HAL_TIM_PWM_Start+0x18c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d111      	bne.n	8002d3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d010      	beq.n	8002d4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	e007      	b.n	8002d4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800
 8002d64:	40000c00 	.word	0x40000c00
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40001800 	.word	0x40001800

08002d70 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_TIM_PWM_Start_IT+0x24>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e022      	b.n	8002dda <HAL_TIM_PWM_Start_IT+0x6a>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d109      	bne.n	8002dae <HAL_TIM_PWM_Start_IT+0x3e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e015      	b.n	8002dda <HAL_TIM_PWM_Start_IT+0x6a>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d109      	bne.n	8002dc8 <HAL_TIM_PWM_Start_IT+0x58>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e008      	b.n	8002dda <HAL_TIM_PWM_Start_IT+0x6a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0c2      	b.n	8002f68 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_PWM_Start_IT+0x82>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df0:	e013      	b.n	8002e1a <HAL_TIM_PWM_Start_IT+0xaa>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Start_IT+0x92>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e00:	e00b      	b.n	8002e1a <HAL_TIM_PWM_Start_IT+0xaa>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start_IT+0xa2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	e003      	b.n	8002e1a <HAL_TIM_PWM_Start_IT+0xaa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d841      	bhi.n	8002ea4 <HAL_TIM_PWM_Start_IT+0x134>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_TIM_PWM_Start_IT+0xb8>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e5d 	.word	0x08002e5d
 8002e2c:	08002ea5 	.word	0x08002ea5
 8002e30:	08002ea5 	.word	0x08002ea5
 8002e34:	08002ea5 	.word	0x08002ea5
 8002e38:	08002e6f 	.word	0x08002e6f
 8002e3c:	08002ea5 	.word	0x08002ea5
 8002e40:	08002ea5 	.word	0x08002ea5
 8002e44:	08002ea5 	.word	0x08002ea5
 8002e48:	08002e81 	.word	0x08002e81
 8002e4c:	08002ea5 	.word	0x08002ea5
 8002e50:	08002ea5 	.word	0x08002ea5
 8002e54:	08002ea5 	.word	0x08002ea5
 8002e58:	08002e93 	.word	0x08002e93
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0202 	orr.w	r2, r2, #2
 8002e6a:	60da      	str	r2, [r3, #12]
      break;
 8002e6c:	e01b      	b.n	8002ea6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0204 	orr.w	r2, r2, #4
 8002e7c:	60da      	str	r2, [r3, #12]
      break;
 8002e7e:	e012      	b.n	8002ea6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0208 	orr.w	r2, r2, #8
 8002e8e:	60da      	str	r2, [r3, #12]
      break;
 8002e90:	e009      	b.n	8002ea6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0210 	orr.w	r2, r2, #16
 8002ea0:	60da      	str	r2, [r3, #12]
      break;
 8002ea2:	e000      	b.n	8002ea6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8002ea4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fe12 	bl	8003ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a2d      	ldr	r2, [pc, #180]	; (8002f70 <HAL_TIM_PWM_Start_IT+0x200>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIM_PWM_Start_IT+0x158>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <HAL_TIM_PWM_Start_IT+0x204>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIM_PWM_Start_IT+0x15c>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_TIM_PWM_Start_IT+0x15e>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_TIM_PWM_Start_IT+0x200>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d022      	beq.n	8002f32 <HAL_TIM_PWM_Start_IT+0x1c2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d01d      	beq.n	8002f32 <HAL_TIM_PWM_Start_IT+0x1c2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_TIM_PWM_Start_IT+0x208>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d018      	beq.n	8002f32 <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_TIM_PWM_Start_IT+0x20c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <HAL_TIM_PWM_Start_IT+0x210>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d00e      	beq.n	8002f32 <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_TIM_PWM_Start_IT+0x204>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d009      	beq.n	8002f32 <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_TIM_PWM_Start_IT+0x214>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d004      	beq.n	8002f32 <HAL_TIM_PWM_Start_IT+0x1c2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <HAL_TIM_PWM_Start_IT+0x218>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d010      	beq.n	8002f66 <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	e007      	b.n	8002f66 <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40010400 	.word	0x40010400
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40001800 	.word	0x40001800

08002f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0202 	mvn.w	r2, #2
 8002fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa7a 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa6c 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fa7d 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0204 	mvn.w	r2, #4
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa50 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa42 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa53 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b08      	cmp	r3, #8
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b08      	cmp	r3, #8
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0208 	mvn.w	r2, #8
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2204      	movs	r2, #4
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa26 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa18 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa29 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b10      	cmp	r3, #16
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2208      	movs	r2, #8
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9fc 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f9ee 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f9ff 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0201 	mvn.w	r2, #1
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9c8 	bl	80034a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fd7a 	bl	8003c30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f9c4 	bl	80034f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b20      	cmp	r3, #32
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b20      	cmp	r3, #32
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0220 	mvn.w	r2, #32
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fd44 	bl	8003c1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ac      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x174>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f200 809f 	bhi.w	8003304 <HAL_TIM_PWM_ConfigChannel+0x168>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003305 	.word	0x08003305
 80031d4:	08003305 	.word	0x08003305
 80031d8:	08003305 	.word	0x08003305
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003305 	.word	0x08003305
 80031e4:	08003305 	.word	0x08003305
 80031e8:	08003305 	.word	0x08003305
 80031ec:	08003283 	.word	0x08003283
 80031f0:	08003305 	.word	0x08003305
 80031f4:	08003305 	.word	0x08003305
 80031f8:	08003305 	.word	0x08003305
 80031fc:	080032c3 	.word	0x080032c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fa1c 	bl	8003644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6999      	ldr	r1, [r3, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	619a      	str	r2, [r3, #24]
      break;
 800323e:	e062      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa6c 	bl	8003724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	619a      	str	r2, [r3, #24]
      break;
 8003280:	e041      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fac1 	bl	8003810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0208 	orr.w	r2, r2, #8
 800329c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0204 	bic.w	r2, r2, #4
 80032ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
      break;
 80032c0:	e021      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fb15 	bl	80038f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]
      break;
 8003302:	e000      	b.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIM_ConfigClockSource+0x18>
 800332c:	2302      	movs	r3, #2
 800332e:	e0b3      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x180>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800334e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d03e      	beq.n	80033e8 <HAL_TIM_ConfigClockSource+0xd0>
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336e:	f200 8087 	bhi.w	8003480 <HAL_TIM_ConfigClockSource+0x168>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	f000 8085 	beq.w	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d87f      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
 8003380:	2b70      	cmp	r3, #112	; 0x70
 8003382:	d01a      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0xa2>
 8003384:	2b70      	cmp	r3, #112	; 0x70
 8003386:	d87b      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
 8003388:	2b60      	cmp	r3, #96	; 0x60
 800338a:	d050      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x116>
 800338c:	2b60      	cmp	r3, #96	; 0x60
 800338e:	d877      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
 8003390:	2b50      	cmp	r3, #80	; 0x50
 8003392:	d03c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0xf6>
 8003394:	2b50      	cmp	r3, #80	; 0x50
 8003396:	d873      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d058      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x136>
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d86f      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
 80033a0:	2b30      	cmp	r3, #48	; 0x30
 80033a2:	d064      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x156>
 80033a4:	2b30      	cmp	r3, #48	; 0x30
 80033a6:	d86b      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d060      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x156>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d867      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x156>
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d05a      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033b8:	e062      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6899      	ldr	r1, [r3, #8]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f000 fb65 	bl	8003a98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	609a      	str	r2, [r3, #8]
      break;
 80033e6:	e04e      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f000 fb4e 	bl	8003a98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800340a:	609a      	str	r2, [r3, #8]
      break;
 800340c:	e03b      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f000 fac2 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2150      	movs	r1, #80	; 0x50
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fb1b 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800342c:	e02b      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	461a      	mov	r2, r3
 800343c:	f000 fae1 	bl	8003a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2160      	movs	r1, #96	; 0x60
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fb0b 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800344c:	e01b      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	461a      	mov	r2, r3
 800345c:	f000 faa2 	bl	80039a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fafb 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800346c:	e00b      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f000 faf2 	bl	8003a62 <TIM_ITRx_SetConfig>
        break;
 800347e:	e002      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a40      	ldr	r2, [pc, #256]	; (8003618 <TIM_Base_SetConfig+0x114>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d00f      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3d      	ldr	r2, [pc, #244]	; (800361c <TIM_Base_SetConfig+0x118>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00b      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3c      	ldr	r2, [pc, #240]	; (8003620 <TIM_Base_SetConfig+0x11c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d007      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <TIM_Base_SetConfig+0x120>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3a      	ldr	r2, [pc, #232]	; (8003628 <TIM_Base_SetConfig+0x124>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d108      	bne.n	8003556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <TIM_Base_SetConfig+0x114>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d027      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2c      	ldr	r2, [pc, #176]	; (800361c <TIM_Base_SetConfig+0x118>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d023      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <TIM_Base_SetConfig+0x11c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01f      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <TIM_Base_SetConfig+0x120>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01b      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a29      	ldr	r2, [pc, #164]	; (8003628 <TIM_Base_SetConfig+0x124>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d017      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a28      	ldr	r2, [pc, #160]	; (800362c <TIM_Base_SetConfig+0x128>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <TIM_Base_SetConfig+0x12c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00f      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <TIM_Base_SetConfig+0x130>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00b      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0x134>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a24      	ldr	r2, [pc, #144]	; (800363c <TIM_Base_SetConfig+0x138>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a23      	ldr	r2, [pc, #140]	; (8003640 <TIM_Base_SetConfig+0x13c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d108      	bne.n	80035c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <TIM_Base_SetConfig+0x114>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0xf8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0c      	ldr	r2, [pc, #48]	; (8003628 <TIM_Base_SetConfig+0x124>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	615a      	str	r2, [r3, #20]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40010400 	.word	0x40010400
 800362c:	40014000 	.word	0x40014000
 8003630:	40014400 	.word	0x40014400
 8003634:	40014800 	.word	0x40014800
 8003638:	40001800 	.word	0x40001800
 800363c:	40001c00 	.word	0x40001c00
 8003640:	40002000 	.word	0x40002000

08003644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0302 	bic.w	r3, r3, #2
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a20      	ldr	r2, [pc, #128]	; (800371c <TIM_OC1_SetConfig+0xd8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC1_SetConfig+0x64>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <TIM_OC1_SetConfig+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10c      	bne.n	80036c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0308 	bic.w	r3, r3, #8
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <TIM_OC1_SetConfig+0xd8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_OC1_SetConfig+0x8e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <TIM_OC1_SetConfig+0xdc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d111      	bne.n	80036f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	621a      	str	r2, [r3, #32]
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40010000 	.word	0x40010000
 8003720:	40010400 	.word	0x40010400

08003724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0210 	bic.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0320 	bic.w	r3, r3, #32
 800376e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <TIM_OC2_SetConfig+0xe4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_OC2_SetConfig+0x68>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a21      	ldr	r2, [pc, #132]	; (800380c <TIM_OC2_SetConfig+0xe8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d10d      	bne.n	80037a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <TIM_OC2_SetConfig+0xe4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_OC2_SetConfig+0x94>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <TIM_OC2_SetConfig+0xe8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d113      	bne.n	80037e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40010400 	.word	0x40010400

08003810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <TIM_OC3_SetConfig+0xe0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d003      	beq.n	8003876 <TIM_OC3_SetConfig+0x66>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <TIM_OC3_SetConfig+0xe4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d10d      	bne.n	8003892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800387c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <TIM_OC3_SetConfig+0xe0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_OC3_SetConfig+0x92>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <TIM_OC3_SetConfig+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d113      	bne.n	80038ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40010000 	.word	0x40010000
 80038f4:	40010400 	.word	0x40010400

080038f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <TIM_OC4_SetConfig+0xa4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_OC4_SetConfig+0x68>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <TIM_OC4_SetConfig+0xa8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d109      	bne.n	8003974 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40010000 	.word	0x40010000
 80039a0:	40010400 	.word	0x40010400

080039a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f023 0201 	bic.w	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 030a 	bic.w	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b087      	sub	sp, #28
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f043 0307 	orr.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	021a      	lsls	r2, r3, #8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2201      	movs	r2, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	401a      	ands	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1a      	ldr	r2, [r3, #32]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 031f 	and.w	r3, r3, #31
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e05a      	b.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d022      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d01d      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d018      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10c      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	40000c00 	.word	0x40000c00
 8003c10:	40010400 	.word	0x40010400
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40001800 	.word	0x40001800

08003c1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e03f      	b.n	8003cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd f95a 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fe19 	bl	80048c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d17c      	bne.n	8003df8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_Transmit+0x2c>
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e075      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x3e>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e06e      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fb03 	bl	800133c <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d70:	e02a      	b.n	8003dc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb9a 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e036      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	3302      	adds	r3, #2
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e007      	b.n	8003dba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1cf      	bne.n	8003d72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fb6a 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e006      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d153      	bne.n	8003ec6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <HAL_UART_Transmit_DMA+0x26>
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e04c      	b.n	8003ec8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_UART_Transmit_DMA+0x38>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e045      	b.n	8003ec8 <HAL_UART_Transmit_DMA+0xc4>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2221      	movs	r2, #33	; 0x21
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <HAL_UART_Transmit_DMA+0xcc>)
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_UART_Transmit_DMA+0xd0>)
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_UART_Transmit_DMA+0xd4>)
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	2200      	movs	r2, #0
 8003e82:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003e84:	f107 0308 	add.w	r3, r7, #8
 8003e88:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3304      	adds	r3, #4
 8003e98:	461a      	mov	r2, r3
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	f7fd fc1a 	bl	80016d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ec0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	080042e9 	.word	0x080042e9
 8003ed4:	0800433b 	.word	0x0800433b
 8003ed8:	08004423 	.word	0x08004423

08003edc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	d11d      	bne.n	8003f32 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_UART_Receive_DMA+0x26>
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e016      	b.n	8003f34 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Receive_DMA+0x38>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e00f      	b.n	8003f34 <HAL_UART_Receive_DMA+0x58>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	461a      	mov	r2, r3
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fb0f 	bl	800454c <UART_Start_Receive_DMA>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	e000      	b.n	8003f34 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10d      	bne.n	8003f8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_UART_IRQHandler+0x52>
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fc03 	bl	8004792 <UART_Receive_IT>
      return;
 8003f8c:	e17c      	b.n	8004288 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80b1 	beq.w	80040f8 <HAL_UART_IRQHandler+0x1bc>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d105      	bne.n	8003fac <HAL_UART_IRQHandler+0x70>
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80a6 	beq.w	80040f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_UART_IRQHandler+0x90>
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_UART_IRQHandler+0xb0>
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f043 0202 	orr.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_UART_IRQHandler+0xd0>
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00f      	beq.n	8004036 <HAL_UART_IRQHandler+0xfa>
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <HAL_UART_IRQHandler+0xee>
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f043 0208 	orr.w	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 811f 	beq.w	800427e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <HAL_UART_IRQHandler+0x11e>
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb9c 	bl	8004792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <HAL_UART_IRQHandler+0x146>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d031      	beq.n	80040e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fadc 	bl	8004640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d123      	bne.n	80040de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d013      	beq.n	80040d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	4a77      	ldr	r2, [pc, #476]	; (8004290 <HAL_UART_IRQHandler+0x354>)
 80040b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd fbd2 	bl	8001864 <HAL_DMA_Abort_IT>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040d0:	4610      	mov	r0, r2
 80040d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	e00e      	b.n	80040f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8f0 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	e00a      	b.n	80040f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f8ec 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e006      	b.n	80040f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8e8 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040f2:	e0c4      	b.n	800427e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	bf00      	nop
    return;
 80040f6:	e0c2      	b.n	800427e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	f040 80a2 	bne.w	8004246 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 809c 	beq.w	8004246 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8096 	beq.w	8004246 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d14f      	bne.n	80041de <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004148:	8a3b      	ldrh	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8099 	beq.w	8004282 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004154:	8a3a      	ldrh	r2, [r7, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	f080 8093 	bcs.w	8004282 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8a3a      	ldrh	r2, [r7, #16]
 8004160:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416c:	d02b      	beq.n	80041c6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0210 	bic.w	r2, r2, #16
 80041ba:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd fadf 	bl	8001784 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f87a 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041dc:	e051      	b.n	8004282 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d047      	beq.n	8004286 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80041f6:	8a7b      	ldrh	r3, [r7, #18]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d044      	beq.n	8004286 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800420a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0210 	bic.w	r2, r2, #16
 8004238:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800423a:	8a7b      	ldrh	r3, [r7, #18]
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f846 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004244:	e01f      	b.n	8004286 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_UART_IRQHandler+0x326>
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fa31 	bl	80046c2 <UART_Transmit_IT>
    return;
 8004260:	e012      	b.n	8004288 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <HAL_UART_IRQHandler+0x34c>
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa73 	bl	8004762 <UART_EndTransmit_IT>
    return;
 800427c:	e004      	b.n	8004288 <HAL_UART_IRQHandler+0x34c>
    return;
 800427e:	bf00      	nop
 8004280:	e002      	b.n	8004288 <HAL_UART_IRQHandler+0x34c>
      return;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <HAL_UART_IRQHandler+0x34c>
      return;
 8004286:	bf00      	nop
  }
}
 8004288:	3728      	adds	r7, #40	; 0x28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	0800469b 	.word	0x0800469b

08004294 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d113      	bne.n	800432c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004318:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004328:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800432a:	e002      	b.n	8004332 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f7fc ff63 	bl	80011f8 <HAL_UART_TxCpltCallback>
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ffa3 	bl	8004294 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d12a      	bne.n	80043c8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004386:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0210 	bic.w	r2, r2, #16
 80043c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043d4:	4619      	mov	r1, r3
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ff7a 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043dc:	e002      	b.n	80043e4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7fc fe56 	bl	8001090 <HAL_UART_RxCpltCallback>
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d108      	bne.n	8004414 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	b29b      	uxth	r3, r3
 800440a:	4619      	mov	r1, r3
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ff5f 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004412:	e002      	b.n	800441a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff ff47 	bl	80042a8 <HAL_UART_RxHalfCpltCallback>
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b21      	cmp	r3, #33	; 0x21
 8004454:	d108      	bne.n	8004468 <UART_DMAError+0x46>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004462:	68b8      	ldr	r0, [r7, #8]
 8004464:	f000 f8d6 	bl	8004614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b22      	cmp	r3, #34	; 0x22
 8004488:	d108      	bne.n	800449c <UART_DMAError+0x7a>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f000 f8d2 	bl	8004640 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0210 	orr.w	r2, r3, #16
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044a8:	68b8      	ldr	r0, [r7, #8]
 80044aa:	f7ff ff07 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c6:	e02c      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d028      	beq.n	8004522 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044d6:	f7fc ff31 	bl	800133c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d21d      	bcs.n	8004522 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e00f      	b.n	8004542 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4013      	ands	r3, r2
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	429a      	cmp	r2, r3
 800453e:	d0c3      	beq.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2222      	movs	r2, #34	; 0x22
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	4a23      	ldr	r2, [pc, #140]	; (8004608 <UART_Start_Receive_DMA+0xbc>)
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	4a22      	ldr	r2, [pc, #136]	; (800460c <UART_Start_Receive_DMA+0xc0>)
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	4a21      	ldr	r2, [pc, #132]	; (8004610 <UART_Start_Receive_DMA+0xc4>)
 800458a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	2200      	movs	r2, #0
 8004592:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004594:	f107 0308 	add.w	r3, r7, #8
 8004598:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	f7fd f892 	bl	80016d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	08004357 	.word	0x08004357
 800460c:	080043ed 	.word	0x080043ed
 8004610:	08004423 	.word	0x08004423

08004614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800462a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004656:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	2b01      	cmp	r3, #1
 800466e:	d107      	bne.n	8004680 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0210 	bic.w	r2, r2, #16
 800467e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff fe01 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b21      	cmp	r3, #33	; 0x21
 80046d4:	d13e      	bne.n	8004754 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d114      	bne.n	800470a <UART_Transmit_IT+0x48>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d110      	bne.n	800470a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	621a      	str	r2, [r3, #32]
 8004708:	e008      	b.n	800471c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	1c59      	adds	r1, r3, #1
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6211      	str	r1, [r2, #32]
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29b      	uxth	r3, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4619      	mov	r1, r3
 800472a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10f      	bne.n	8004750 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fd38 	bl	80011f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b22      	cmp	r3, #34	; 0x22
 80047a4:	f040 8087 	bne.w	80048b6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d117      	bne.n	80047e2 <UART_Receive_IT+0x50>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d113      	bne.n	80047e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	1c9a      	adds	r2, r3, #2
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
 80047e0:	e026      	b.n	8004830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d007      	beq.n	8004806 <UART_Receive_IT+0x74>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <UART_Receive_IT+0x82>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e008      	b.n	8004826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29b      	uxth	r3, r3
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4619      	mov	r1, r3
 800483e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004840:	2b00      	cmp	r3, #0
 8004842:	d136      	bne.n	80048b2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0220 	bic.w	r2, r2, #32
 8004852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	2b01      	cmp	r3, #1
 8004882:	d10e      	bne.n	80048a2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0210 	bic.w	r2, r2, #16
 8004892:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff fd18 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
 80048a0:	e002      	b.n	80048a8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fc fbf4 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e002      	b.n	80048b8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
  }
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	b09f      	sub	sp, #124	; 0x7c
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	68d9      	ldr	r1, [r3, #12]
 80048d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	ea40 0301 	orr.w	r3, r0, r1
 80048e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004904:	f021 010c 	bic.w	r1, r1, #12
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800490e:	430b      	orrs	r3, r1
 8004910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	6999      	ldr	r1, [r3, #24]
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	ea40 0301 	orr.w	r3, r0, r1
 8004928:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800492a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4bc5      	ldr	r3, [pc, #788]	; (8004c44 <UART_SetConfig+0x384>)
 8004930:	429a      	cmp	r2, r3
 8004932:	d004      	beq.n	800493e <UART_SetConfig+0x7e>
 8004934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4bc3      	ldr	r3, [pc, #780]	; (8004c48 <UART_SetConfig+0x388>)
 800493a:	429a      	cmp	r2, r3
 800493c:	d103      	bne.n	8004946 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800493e:	f7fe f833 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8004942:	6778      	str	r0, [r7, #116]	; 0x74
 8004944:	e002      	b.n	800494c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004946:	f7fe f81b 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 800494a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800494c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004954:	f040 80b6 	bne.w	8004ac4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800495a:	461c      	mov	r4, r3
 800495c:	f04f 0500 	mov.w	r5, #0
 8004960:	4622      	mov	r2, r4
 8004962:	462b      	mov	r3, r5
 8004964:	1891      	adds	r1, r2, r2
 8004966:	6439      	str	r1, [r7, #64]	; 0x40
 8004968:	415b      	adcs	r3, r3
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
 800496c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004970:	1912      	adds	r2, r2, r4
 8004972:	eb45 0303 	adc.w	r3, r5, r3
 8004976:	f04f 0000 	mov.w	r0, #0
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	00d9      	lsls	r1, r3, #3
 8004980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004984:	00d0      	lsls	r0, r2, #3
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	1911      	adds	r1, r2, r4
 800498c:	6639      	str	r1, [r7, #96]	; 0x60
 800498e:	416b      	adcs	r3, r5
 8004990:	667b      	str	r3, [r7, #100]	; 0x64
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	1891      	adds	r1, r2, r2
 800499e:	63b9      	str	r1, [r7, #56]	; 0x38
 80049a0:	415b      	adcs	r3, r3
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049ac:	f7fb fc68 	bl	8000280 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4ba5      	ldr	r3, [pc, #660]	; (8004c4c <UART_SetConfig+0x38c>)
 80049b6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	011e      	lsls	r6, r3, #4
 80049be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c0:	461c      	mov	r4, r3
 80049c2:	f04f 0500 	mov.w	r5, #0
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	6339      	str	r1, [r7, #48]	; 0x30
 80049ce:	415b      	adcs	r3, r3
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
 80049d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049d6:	1912      	adds	r2, r2, r4
 80049d8:	eb45 0303 	adc.w	r3, r5, r3
 80049dc:	f04f 0000 	mov.w	r0, #0
 80049e0:	f04f 0100 	mov.w	r1, #0
 80049e4:	00d9      	lsls	r1, r3, #3
 80049e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049ea:	00d0      	lsls	r0, r2, #3
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	1911      	adds	r1, r2, r4
 80049f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80049f4:	416b      	adcs	r3, r5
 80049f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	461a      	mov	r2, r3
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	1891      	adds	r1, r2, r2
 8004a04:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a06:	415b      	adcs	r3, r3
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a12:	f7fb fc35 	bl	8000280 <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4b8c      	ldr	r3, [pc, #560]	; (8004c4c <UART_SetConfig+0x38c>)
 8004a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	2164      	movs	r1, #100	; 0x64
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	3332      	adds	r3, #50	; 0x32
 8004a2e:	4a87      	ldr	r2, [pc, #540]	; (8004c4c <UART_SetConfig+0x38c>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a3c:	441e      	add	r6, r3
 8004a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a40:	4618      	mov	r0, r3
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	1894      	adds	r4, r2, r2
 8004a4c:	623c      	str	r4, [r7, #32]
 8004a4e:	415b      	adcs	r3, r3
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
 8004a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a56:	1812      	adds	r2, r2, r0
 8004a58:	eb41 0303 	adc.w	r3, r1, r3
 8004a5c:	f04f 0400 	mov.w	r4, #0
 8004a60:	f04f 0500 	mov.w	r5, #0
 8004a64:	00dd      	lsls	r5, r3, #3
 8004a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a6a:	00d4      	lsls	r4, r2, #3
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	462b      	mov	r3, r5
 8004a70:	1814      	adds	r4, r2, r0
 8004a72:	653c      	str	r4, [r7, #80]	; 0x50
 8004a74:	414b      	adcs	r3, r1
 8004a76:	657b      	str	r3, [r7, #84]	; 0x54
 8004a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	1891      	adds	r1, r2, r2
 8004a84:	61b9      	str	r1, [r7, #24]
 8004a86:	415b      	adcs	r3, r3
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a92:	f7fb fbf5 	bl	8000280 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	; (8004c4c <UART_SetConfig+0x38c>)
 8004a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	2164      	movs	r1, #100	; 0x64
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	3332      	adds	r3, #50	; 0x32
 8004aae:	4a67      	ldr	r2, [pc, #412]	; (8004c4c <UART_SetConfig+0x38c>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f003 0207 	and.w	r2, r3, #7
 8004aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4432      	add	r2, r6
 8004ac0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ac2:	e0b9      	b.n	8004c38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac6:	461c      	mov	r4, r3
 8004ac8:	f04f 0500 	mov.w	r5, #0
 8004acc:	4622      	mov	r2, r4
 8004ace:	462b      	mov	r3, r5
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	6139      	str	r1, [r7, #16]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004adc:	1912      	adds	r2, r2, r4
 8004ade:	eb45 0303 	adc.w	r3, r5, r3
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004af0:	00d0      	lsls	r0, r2, #3
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	eb12 0804 	adds.w	r8, r2, r4
 8004afa:	eb43 0905 	adc.w	r9, r3, r5
 8004afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	008b      	lsls	r3, r1, #2
 8004b12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b16:	0082      	lsls	r2, r0, #2
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	f7fb fbb0 	bl	8000280 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4b49      	ldr	r3, [pc, #292]	; (8004c4c <UART_SetConfig+0x38c>)
 8004b26:	fba3 2302 	umull	r2, r3, r3, r2
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	011e      	lsls	r6, r3, #4
 8004b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b30:	4618      	mov	r0, r3
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	1894      	adds	r4, r2, r2
 8004b3c:	60bc      	str	r4, [r7, #8]
 8004b3e:	415b      	adcs	r3, r3
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b46:	1812      	adds	r2, r2, r0
 8004b48:	eb41 0303 	adc.w	r3, r1, r3
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	f04f 0500 	mov.w	r5, #0
 8004b54:	00dd      	lsls	r5, r3, #3
 8004b56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b5a:	00d4      	lsls	r4, r2, #3
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	462b      	mov	r3, r5
 8004b60:	1814      	adds	r4, r2, r0
 8004b62:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b64:	414b      	adcs	r3, r1
 8004b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	008b      	lsls	r3, r1, #2
 8004b7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b80:	0082      	lsls	r2, r0, #2
 8004b82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b86:	f7fb fb7b 	bl	8000280 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4b2f      	ldr	r3, [pc, #188]	; (8004c4c <UART_SetConfig+0x38c>)
 8004b90:	fba3 1302 	umull	r1, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2164      	movs	r1, #100	; 0x64
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	3332      	adds	r3, #50	; 0x32
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <UART_SetConfig+0x38c>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bae:	441e      	add	r6, r3
 8004bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	1894      	adds	r4, r2, r2
 8004bbe:	603c      	str	r4, [r7, #0]
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	607b      	str	r3, [r7, #4]
 8004bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc8:	1812      	adds	r2, r2, r0
 8004bca:	eb41 0303 	adc.w	r3, r1, r3
 8004bce:	f04f 0400 	mov.w	r4, #0
 8004bd2:	f04f 0500 	mov.w	r5, #0
 8004bd6:	00dd      	lsls	r5, r3, #3
 8004bd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bdc:	00d4      	lsls	r4, r2, #3
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	eb12 0a00 	adds.w	sl, r2, r0
 8004be6:	eb43 0b01 	adc.w	fp, r3, r1
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c02:	0082      	lsls	r2, r0, #2
 8004c04:	4650      	mov	r0, sl
 8004c06:	4659      	mov	r1, fp
 8004c08:	f7fb fb3a 	bl	8000280 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <UART_SetConfig+0x38c>)
 8004c12:	fba3 1302 	umull	r1, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2164      	movs	r1, #100	; 0x64
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <UART_SetConfig+0x38c>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 020f 	and.w	r2, r3, #15
 8004c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4432      	add	r2, r6
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	377c      	adds	r7, #124	; 0x7c
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c42:	bf00      	nop
 8004c44:	40011000 	.word	0x40011000
 8004c48:	40011400 	.word	0x40011400
 8004c4c:	51eb851f 	.word	0x51eb851f

08004c50 <API_init_IO>:
 *      Author: secve
 */
#include "API.h"

void API_init_IO(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
	// Initialize VGA screen timers/registers
	UB_VGA_Screen_Init();
 8004c54:	f7fb fdea 	bl	800082c <UB_VGA_Screen_Init>

	// Fill the screen with white
	UB_VGA_FillScreen(VGA_COL_WHITE);
 8004c58:	20ff      	movs	r0, #255	; 0xff
 8004c5a:	f7fb fe39 	bl	80008d0 <UB_VGA_FillScreen>
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <__errno>:
 8004c64:	4b01      	ldr	r3, [pc, #4]	; (8004c6c <__errno+0x8>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000001c 	.word	0x2000001c

08004c70 <__libc_init_array>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	4d0d      	ldr	r5, [pc, #52]	; (8004ca8 <__libc_init_array+0x38>)
 8004c74:	4c0d      	ldr	r4, [pc, #52]	; (8004cac <__libc_init_array+0x3c>)
 8004c76:	1b64      	subs	r4, r4, r5
 8004c78:	10a4      	asrs	r4, r4, #2
 8004c7a:	2600      	movs	r6, #0
 8004c7c:	42a6      	cmp	r6, r4
 8004c7e:	d109      	bne.n	8004c94 <__libc_init_array+0x24>
 8004c80:	4d0b      	ldr	r5, [pc, #44]	; (8004cb0 <__libc_init_array+0x40>)
 8004c82:	4c0c      	ldr	r4, [pc, #48]	; (8004cb4 <__libc_init_array+0x44>)
 8004c84:	f000 fc4e 	bl	8005524 <_init>
 8004c88:	1b64      	subs	r4, r4, r5
 8004c8a:	10a4      	asrs	r4, r4, #2
 8004c8c:	2600      	movs	r6, #0
 8004c8e:	42a6      	cmp	r6, r4
 8004c90:	d105      	bne.n	8004c9e <__libc_init_array+0x2e>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c98:	4798      	blx	r3
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	e7ee      	b.n	8004c7c <__libc_init_array+0xc>
 8004c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ca2:	4798      	blx	r3
 8004ca4:	3601      	adds	r6, #1
 8004ca6:	e7f2      	b.n	8004c8e <__libc_init_array+0x1e>
 8004ca8:	080055d0 	.word	0x080055d0
 8004cac:	080055d0 	.word	0x080055d0
 8004cb0:	080055d0 	.word	0x080055d0
 8004cb4:	080055d4 	.word	0x080055d4

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <siprintf>:
 8004cc8:	b40e      	push	{r1, r2, r3}
 8004cca:	b500      	push	{lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cd8:	4809      	ldr	r0, [pc, #36]	; (8004d00 <siprintf+0x38>)
 8004cda:	9107      	str	r1, [sp, #28]
 8004cdc:	9104      	str	r1, [sp, #16]
 8004cde:	4909      	ldr	r1, [pc, #36]	; (8004d04 <siprintf+0x3c>)
 8004ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce4:	9105      	str	r1, [sp, #20]
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	a902      	add	r1, sp, #8
 8004cec:	f000 f868 	bl	8004dc0 <_svfiprintf_r>
 8004cf0:	9b02      	ldr	r3, [sp, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	b01c      	add	sp, #112	; 0x70
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	b003      	add	sp, #12
 8004cfe:	4770      	bx	lr
 8004d00:	2000001c 	.word	0x2000001c
 8004d04:	ffff0208 	.word	0xffff0208

08004d08 <__ssputs_r>:
 8004d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d0c:	688e      	ldr	r6, [r1, #8]
 8004d0e:	429e      	cmp	r6, r3
 8004d10:	4682      	mov	sl, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	4690      	mov	r8, r2
 8004d16:	461f      	mov	r7, r3
 8004d18:	d838      	bhi.n	8004d8c <__ssputs_r+0x84>
 8004d1a:	898a      	ldrh	r2, [r1, #12]
 8004d1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d20:	d032      	beq.n	8004d88 <__ssputs_r+0x80>
 8004d22:	6825      	ldr	r5, [r4, #0]
 8004d24:	6909      	ldr	r1, [r1, #16]
 8004d26:	eba5 0901 	sub.w	r9, r5, r1
 8004d2a:	6965      	ldr	r5, [r4, #20]
 8004d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d34:	3301      	adds	r3, #1
 8004d36:	444b      	add	r3, r9
 8004d38:	106d      	asrs	r5, r5, #1
 8004d3a:	429d      	cmp	r5, r3
 8004d3c:	bf38      	it	cc
 8004d3e:	461d      	movcc	r5, r3
 8004d40:	0553      	lsls	r3, r2, #21
 8004d42:	d531      	bpl.n	8004da8 <__ssputs_r+0xa0>
 8004d44:	4629      	mov	r1, r5
 8004d46:	f000 fb47 	bl	80053d8 <_malloc_r>
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	b950      	cbnz	r0, 8004d64 <__ssputs_r+0x5c>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	f8ca 3000 	str.w	r3, [sl]
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5a:	81a3      	strh	r3, [r4, #12]
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d64:	6921      	ldr	r1, [r4, #16]
 8004d66:	464a      	mov	r2, r9
 8004d68:	f000 fabe 	bl	80052e8 <memcpy>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	6126      	str	r6, [r4, #16]
 8004d7a:	6165      	str	r5, [r4, #20]
 8004d7c:	444e      	add	r6, r9
 8004d7e:	eba5 0509 	sub.w	r5, r5, r9
 8004d82:	6026      	str	r6, [r4, #0]
 8004d84:	60a5      	str	r5, [r4, #8]
 8004d86:	463e      	mov	r6, r7
 8004d88:	42be      	cmp	r6, r7
 8004d8a:	d900      	bls.n	8004d8e <__ssputs_r+0x86>
 8004d8c:	463e      	mov	r6, r7
 8004d8e:	4632      	mov	r2, r6
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	4641      	mov	r1, r8
 8004d94:	f000 fab6 	bl	8005304 <memmove>
 8004d98:	68a3      	ldr	r3, [r4, #8]
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	1b9b      	subs	r3, r3, r6
 8004d9e:	4432      	add	r2, r6
 8004da0:	60a3      	str	r3, [r4, #8]
 8004da2:	6022      	str	r2, [r4, #0]
 8004da4:	2000      	movs	r0, #0
 8004da6:	e7db      	b.n	8004d60 <__ssputs_r+0x58>
 8004da8:	462a      	mov	r2, r5
 8004daa:	f000 fb6f 	bl	800548c <_realloc_r>
 8004dae:	4606      	mov	r6, r0
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d1e1      	bne.n	8004d78 <__ssputs_r+0x70>
 8004db4:	6921      	ldr	r1, [r4, #16]
 8004db6:	4650      	mov	r0, sl
 8004db8:	f000 fabe 	bl	8005338 <_free_r>
 8004dbc:	e7c7      	b.n	8004d4e <__ssputs_r+0x46>
	...

08004dc0 <_svfiprintf_r>:
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	4698      	mov	r8, r3
 8004dc6:	898b      	ldrh	r3, [r1, #12]
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	b09d      	sub	sp, #116	; 0x74
 8004dcc:	4607      	mov	r7, r0
 8004dce:	460d      	mov	r5, r1
 8004dd0:	4614      	mov	r4, r2
 8004dd2:	d50e      	bpl.n	8004df2 <_svfiprintf_r+0x32>
 8004dd4:	690b      	ldr	r3, [r1, #16]
 8004dd6:	b963      	cbnz	r3, 8004df2 <_svfiprintf_r+0x32>
 8004dd8:	2140      	movs	r1, #64	; 0x40
 8004dda:	f000 fafd 	bl	80053d8 <_malloc_r>
 8004dde:	6028      	str	r0, [r5, #0]
 8004de0:	6128      	str	r0, [r5, #16]
 8004de2:	b920      	cbnz	r0, 8004dee <_svfiprintf_r+0x2e>
 8004de4:	230c      	movs	r3, #12
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	e0d1      	b.n	8004f92 <_svfiprintf_r+0x1d2>
 8004dee:	2340      	movs	r3, #64	; 0x40
 8004df0:	616b      	str	r3, [r5, #20]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9309      	str	r3, [sp, #36]	; 0x24
 8004df6:	2320      	movs	r3, #32
 8004df8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e00:	2330      	movs	r3, #48	; 0x30
 8004e02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004fac <_svfiprintf_r+0x1ec>
 8004e06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e0a:	f04f 0901 	mov.w	r9, #1
 8004e0e:	4623      	mov	r3, r4
 8004e10:	469a      	mov	sl, r3
 8004e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e16:	b10a      	cbz	r2, 8004e1c <_svfiprintf_r+0x5c>
 8004e18:	2a25      	cmp	r2, #37	; 0x25
 8004e1a:	d1f9      	bne.n	8004e10 <_svfiprintf_r+0x50>
 8004e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8004e20:	d00b      	beq.n	8004e3a <_svfiprintf_r+0x7a>
 8004e22:	465b      	mov	r3, fp
 8004e24:	4622      	mov	r2, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	4638      	mov	r0, r7
 8004e2a:	f7ff ff6d 	bl	8004d08 <__ssputs_r>
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f000 80aa 	beq.w	8004f88 <_svfiprintf_r+0x1c8>
 8004e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e36:	445a      	add	r2, fp
 8004e38:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80a2 	beq.w	8004f88 <_svfiprintf_r+0x1c8>
 8004e44:	2300      	movs	r3, #0
 8004e46:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e4e:	f10a 0a01 	add.w	sl, sl, #1
 8004e52:	9304      	str	r3, [sp, #16]
 8004e54:	9307      	str	r3, [sp, #28]
 8004e56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e5a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e5c:	4654      	mov	r4, sl
 8004e5e:	2205      	movs	r2, #5
 8004e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e64:	4851      	ldr	r0, [pc, #324]	; (8004fac <_svfiprintf_r+0x1ec>)
 8004e66:	f7fb f9bb 	bl	80001e0 <memchr>
 8004e6a:	9a04      	ldr	r2, [sp, #16]
 8004e6c:	b9d8      	cbnz	r0, 8004ea6 <_svfiprintf_r+0xe6>
 8004e6e:	06d0      	lsls	r0, r2, #27
 8004e70:	bf44      	itt	mi
 8004e72:	2320      	movmi	r3, #32
 8004e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e78:	0711      	lsls	r1, r2, #28
 8004e7a:	bf44      	itt	mi
 8004e7c:	232b      	movmi	r3, #43	; 0x2b
 8004e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e82:	f89a 3000 	ldrb.w	r3, [sl]
 8004e86:	2b2a      	cmp	r3, #42	; 0x2a
 8004e88:	d015      	beq.n	8004eb6 <_svfiprintf_r+0xf6>
 8004e8a:	9a07      	ldr	r2, [sp, #28]
 8004e8c:	4654      	mov	r4, sl
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f04f 0c0a 	mov.w	ip, #10
 8004e94:	4621      	mov	r1, r4
 8004e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9a:	3b30      	subs	r3, #48	; 0x30
 8004e9c:	2b09      	cmp	r3, #9
 8004e9e:	d94e      	bls.n	8004f3e <_svfiprintf_r+0x17e>
 8004ea0:	b1b0      	cbz	r0, 8004ed0 <_svfiprintf_r+0x110>
 8004ea2:	9207      	str	r2, [sp, #28]
 8004ea4:	e014      	b.n	8004ed0 <_svfiprintf_r+0x110>
 8004ea6:	eba0 0308 	sub.w	r3, r0, r8
 8004eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	9304      	str	r3, [sp, #16]
 8004eb2:	46a2      	mov	sl, r4
 8004eb4:	e7d2      	b.n	8004e5c <_svfiprintf_r+0x9c>
 8004eb6:	9b03      	ldr	r3, [sp, #12]
 8004eb8:	1d19      	adds	r1, r3, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	9103      	str	r1, [sp, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfbb      	ittet	lt
 8004ec2:	425b      	neglt	r3, r3
 8004ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ec8:	9307      	strge	r3, [sp, #28]
 8004eca:	9307      	strlt	r3, [sp, #28]
 8004ecc:	bfb8      	it	lt
 8004ece:	9204      	strlt	r2, [sp, #16]
 8004ed0:	7823      	ldrb	r3, [r4, #0]
 8004ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed4:	d10c      	bne.n	8004ef0 <_svfiprintf_r+0x130>
 8004ed6:	7863      	ldrb	r3, [r4, #1]
 8004ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eda:	d135      	bne.n	8004f48 <_svfiprintf_r+0x188>
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	9203      	str	r2, [sp, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bfb8      	it	lt
 8004ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eec:	3402      	adds	r4, #2
 8004eee:	9305      	str	r3, [sp, #20]
 8004ef0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004fbc <_svfiprintf_r+0x1fc>
 8004ef4:	7821      	ldrb	r1, [r4, #0]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	4650      	mov	r0, sl
 8004efa:	f7fb f971 	bl	80001e0 <memchr>
 8004efe:	b140      	cbz	r0, 8004f12 <_svfiprintf_r+0x152>
 8004f00:	2340      	movs	r3, #64	; 0x40
 8004f02:	eba0 000a 	sub.w	r0, r0, sl
 8004f06:	fa03 f000 	lsl.w	r0, r3, r0
 8004f0a:	9b04      	ldr	r3, [sp, #16]
 8004f0c:	4303      	orrs	r3, r0
 8004f0e:	3401      	adds	r4, #1
 8004f10:	9304      	str	r3, [sp, #16]
 8004f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f16:	4826      	ldr	r0, [pc, #152]	; (8004fb0 <_svfiprintf_r+0x1f0>)
 8004f18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f1c:	2206      	movs	r2, #6
 8004f1e:	f7fb f95f 	bl	80001e0 <memchr>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d038      	beq.n	8004f98 <_svfiprintf_r+0x1d8>
 8004f26:	4b23      	ldr	r3, [pc, #140]	; (8004fb4 <_svfiprintf_r+0x1f4>)
 8004f28:	bb1b      	cbnz	r3, 8004f72 <_svfiprintf_r+0x1b2>
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	3307      	adds	r3, #7
 8004f2e:	f023 0307 	bic.w	r3, r3, #7
 8004f32:	3308      	adds	r3, #8
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f38:	4433      	add	r3, r6
 8004f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3c:	e767      	b.n	8004e0e <_svfiprintf_r+0x4e>
 8004f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f42:	460c      	mov	r4, r1
 8004f44:	2001      	movs	r0, #1
 8004f46:	e7a5      	b.n	8004e94 <_svfiprintf_r+0xd4>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	3401      	adds	r4, #1
 8004f4c:	9305      	str	r3, [sp, #20]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	f04f 0c0a 	mov.w	ip, #10
 8004f54:	4620      	mov	r0, r4
 8004f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5a:	3a30      	subs	r2, #48	; 0x30
 8004f5c:	2a09      	cmp	r2, #9
 8004f5e:	d903      	bls.n	8004f68 <_svfiprintf_r+0x1a8>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0c5      	beq.n	8004ef0 <_svfiprintf_r+0x130>
 8004f64:	9105      	str	r1, [sp, #20]
 8004f66:	e7c3      	b.n	8004ef0 <_svfiprintf_r+0x130>
 8004f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e7f0      	b.n	8004f54 <_svfiprintf_r+0x194>
 8004f72:	ab03      	add	r3, sp, #12
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	462a      	mov	r2, r5
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <_svfiprintf_r+0x1f8>)
 8004f7a:	a904      	add	r1, sp, #16
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f3af 8000 	nop.w
 8004f82:	1c42      	adds	r2, r0, #1
 8004f84:	4606      	mov	r6, r0
 8004f86:	d1d6      	bne.n	8004f36 <_svfiprintf_r+0x176>
 8004f88:	89ab      	ldrh	r3, [r5, #12]
 8004f8a:	065b      	lsls	r3, r3, #25
 8004f8c:	f53f af2c 	bmi.w	8004de8 <_svfiprintf_r+0x28>
 8004f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f92:	b01d      	add	sp, #116	; 0x74
 8004f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f98:	ab03      	add	r3, sp, #12
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <_svfiprintf_r+0x1f8>)
 8004fa0:	a904      	add	r1, sp, #16
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f000 f87a 	bl	800509c <_printf_i>
 8004fa8:	e7eb      	b.n	8004f82 <_svfiprintf_r+0x1c2>
 8004faa:	bf00      	nop
 8004fac:	08005594 	.word	0x08005594
 8004fb0:	0800559e 	.word	0x0800559e
 8004fb4:	00000000 	.word	0x00000000
 8004fb8:	08004d09 	.word	0x08004d09
 8004fbc:	0800559a 	.word	0x0800559a

08004fc0 <_printf_common>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	4699      	mov	r9, r3
 8004fc8:	688a      	ldr	r2, [r1, #8]
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	bfb8      	it	lt
 8004fd4:	4613      	movlt	r3, r2
 8004fd6:	6033      	str	r3, [r6, #0]
 8004fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fdc:	4607      	mov	r7, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	b10a      	cbz	r2, 8004fe6 <_printf_common+0x26>
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	0699      	lsls	r1, r3, #26
 8004fea:	bf42      	ittt	mi
 8004fec:	6833      	ldrmi	r3, [r6, #0]
 8004fee:	3302      	addmi	r3, #2
 8004ff0:	6033      	strmi	r3, [r6, #0]
 8004ff2:	6825      	ldr	r5, [r4, #0]
 8004ff4:	f015 0506 	ands.w	r5, r5, #6
 8004ff8:	d106      	bne.n	8005008 <_printf_common+0x48>
 8004ffa:	f104 0a19 	add.w	sl, r4, #25
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	6832      	ldr	r2, [r6, #0]
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	42ab      	cmp	r3, r5
 8005006:	dc26      	bgt.n	8005056 <_printf_common+0x96>
 8005008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800500c:	1e13      	subs	r3, r2, #0
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	bf18      	it	ne
 8005012:	2301      	movne	r3, #1
 8005014:	0692      	lsls	r2, r2, #26
 8005016:	d42b      	bmi.n	8005070 <_printf_common+0xb0>
 8005018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800501c:	4649      	mov	r1, r9
 800501e:	4638      	mov	r0, r7
 8005020:	47c0      	blx	r8
 8005022:	3001      	adds	r0, #1
 8005024:	d01e      	beq.n	8005064 <_printf_common+0xa4>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	68e5      	ldr	r5, [r4, #12]
 800502a:	6832      	ldr	r2, [r6, #0]
 800502c:	f003 0306 	and.w	r3, r3, #6
 8005030:	2b04      	cmp	r3, #4
 8005032:	bf08      	it	eq
 8005034:	1aad      	subeq	r5, r5, r2
 8005036:	68a3      	ldr	r3, [r4, #8]
 8005038:	6922      	ldr	r2, [r4, #16]
 800503a:	bf0c      	ite	eq
 800503c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005040:	2500      	movne	r5, #0
 8005042:	4293      	cmp	r3, r2
 8005044:	bfc4      	itt	gt
 8005046:	1a9b      	subgt	r3, r3, r2
 8005048:	18ed      	addgt	r5, r5, r3
 800504a:	2600      	movs	r6, #0
 800504c:	341a      	adds	r4, #26
 800504e:	42b5      	cmp	r5, r6
 8005050:	d11a      	bne.n	8005088 <_printf_common+0xc8>
 8005052:	2000      	movs	r0, #0
 8005054:	e008      	b.n	8005068 <_printf_common+0xa8>
 8005056:	2301      	movs	r3, #1
 8005058:	4652      	mov	r2, sl
 800505a:	4649      	mov	r1, r9
 800505c:	4638      	mov	r0, r7
 800505e:	47c0      	blx	r8
 8005060:	3001      	adds	r0, #1
 8005062:	d103      	bne.n	800506c <_printf_common+0xac>
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506c:	3501      	adds	r5, #1
 800506e:	e7c6      	b.n	8004ffe <_printf_common+0x3e>
 8005070:	18e1      	adds	r1, r4, r3
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	2030      	movs	r0, #48	; 0x30
 8005076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800507a:	4422      	add	r2, r4
 800507c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005084:	3302      	adds	r3, #2
 8005086:	e7c7      	b.n	8005018 <_printf_common+0x58>
 8005088:	2301      	movs	r3, #1
 800508a:	4622      	mov	r2, r4
 800508c:	4649      	mov	r1, r9
 800508e:	4638      	mov	r0, r7
 8005090:	47c0      	blx	r8
 8005092:	3001      	adds	r0, #1
 8005094:	d0e6      	beq.n	8005064 <_printf_common+0xa4>
 8005096:	3601      	adds	r6, #1
 8005098:	e7d9      	b.n	800504e <_printf_common+0x8e>
	...

0800509c <_printf_i>:
 800509c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	460c      	mov	r4, r1
 80050a2:	4691      	mov	r9, r2
 80050a4:	7e27      	ldrb	r7, [r4, #24]
 80050a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050a8:	2f78      	cmp	r7, #120	; 0x78
 80050aa:	4680      	mov	r8, r0
 80050ac:	469a      	mov	sl, r3
 80050ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b2:	d807      	bhi.n	80050c4 <_printf_i+0x28>
 80050b4:	2f62      	cmp	r7, #98	; 0x62
 80050b6:	d80a      	bhi.n	80050ce <_printf_i+0x32>
 80050b8:	2f00      	cmp	r7, #0
 80050ba:	f000 80d8 	beq.w	800526e <_printf_i+0x1d2>
 80050be:	2f58      	cmp	r7, #88	; 0x58
 80050c0:	f000 80a3 	beq.w	800520a <_printf_i+0x16e>
 80050c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050cc:	e03a      	b.n	8005144 <_printf_i+0xa8>
 80050ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050d2:	2b15      	cmp	r3, #21
 80050d4:	d8f6      	bhi.n	80050c4 <_printf_i+0x28>
 80050d6:	a001      	add	r0, pc, #4	; (adr r0, 80050dc <_printf_i+0x40>)
 80050d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005149 	.word	0x08005149
 80050e4:	080050c5 	.word	0x080050c5
 80050e8:	080050c5 	.word	0x080050c5
 80050ec:	080050c5 	.word	0x080050c5
 80050f0:	080050c5 	.word	0x080050c5
 80050f4:	08005149 	.word	0x08005149
 80050f8:	080050c5 	.word	0x080050c5
 80050fc:	080050c5 	.word	0x080050c5
 8005100:	080050c5 	.word	0x080050c5
 8005104:	080050c5 	.word	0x080050c5
 8005108:	08005255 	.word	0x08005255
 800510c:	08005179 	.word	0x08005179
 8005110:	08005237 	.word	0x08005237
 8005114:	080050c5 	.word	0x080050c5
 8005118:	080050c5 	.word	0x080050c5
 800511c:	08005277 	.word	0x08005277
 8005120:	080050c5 	.word	0x080050c5
 8005124:	08005179 	.word	0x08005179
 8005128:	080050c5 	.word	0x080050c5
 800512c:	080050c5 	.word	0x080050c5
 8005130:	0800523f 	.word	0x0800523f
 8005134:	680b      	ldr	r3, [r1, #0]
 8005136:	1d1a      	adds	r2, r3, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	600a      	str	r2, [r1, #0]
 800513c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005144:	2301      	movs	r3, #1
 8005146:	e0a3      	b.n	8005290 <_printf_i+0x1f4>
 8005148:	6825      	ldr	r5, [r4, #0]
 800514a:	6808      	ldr	r0, [r1, #0]
 800514c:	062e      	lsls	r6, r5, #24
 800514e:	f100 0304 	add.w	r3, r0, #4
 8005152:	d50a      	bpl.n	800516a <_printf_i+0xce>
 8005154:	6805      	ldr	r5, [r0, #0]
 8005156:	600b      	str	r3, [r1, #0]
 8005158:	2d00      	cmp	r5, #0
 800515a:	da03      	bge.n	8005164 <_printf_i+0xc8>
 800515c:	232d      	movs	r3, #45	; 0x2d
 800515e:	426d      	negs	r5, r5
 8005160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005164:	485e      	ldr	r0, [pc, #376]	; (80052e0 <_printf_i+0x244>)
 8005166:	230a      	movs	r3, #10
 8005168:	e019      	b.n	800519e <_printf_i+0x102>
 800516a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800516e:	6805      	ldr	r5, [r0, #0]
 8005170:	600b      	str	r3, [r1, #0]
 8005172:	bf18      	it	ne
 8005174:	b22d      	sxthne	r5, r5
 8005176:	e7ef      	b.n	8005158 <_printf_i+0xbc>
 8005178:	680b      	ldr	r3, [r1, #0]
 800517a:	6825      	ldr	r5, [r4, #0]
 800517c:	1d18      	adds	r0, r3, #4
 800517e:	6008      	str	r0, [r1, #0]
 8005180:	0628      	lsls	r0, r5, #24
 8005182:	d501      	bpl.n	8005188 <_printf_i+0xec>
 8005184:	681d      	ldr	r5, [r3, #0]
 8005186:	e002      	b.n	800518e <_printf_i+0xf2>
 8005188:	0669      	lsls	r1, r5, #25
 800518a:	d5fb      	bpl.n	8005184 <_printf_i+0xe8>
 800518c:	881d      	ldrh	r5, [r3, #0]
 800518e:	4854      	ldr	r0, [pc, #336]	; (80052e0 <_printf_i+0x244>)
 8005190:	2f6f      	cmp	r7, #111	; 0x6f
 8005192:	bf0c      	ite	eq
 8005194:	2308      	moveq	r3, #8
 8005196:	230a      	movne	r3, #10
 8005198:	2100      	movs	r1, #0
 800519a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800519e:	6866      	ldr	r6, [r4, #4]
 80051a0:	60a6      	str	r6, [r4, #8]
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	bfa2      	ittt	ge
 80051a6:	6821      	ldrge	r1, [r4, #0]
 80051a8:	f021 0104 	bicge.w	r1, r1, #4
 80051ac:	6021      	strge	r1, [r4, #0]
 80051ae:	b90d      	cbnz	r5, 80051b4 <_printf_i+0x118>
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	d04d      	beq.n	8005250 <_printf_i+0x1b4>
 80051b4:	4616      	mov	r6, r2
 80051b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ba:	fb03 5711 	mls	r7, r3, r1, r5
 80051be:	5dc7      	ldrb	r7, [r0, r7]
 80051c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051c4:	462f      	mov	r7, r5
 80051c6:	42bb      	cmp	r3, r7
 80051c8:	460d      	mov	r5, r1
 80051ca:	d9f4      	bls.n	80051b6 <_printf_i+0x11a>
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d10b      	bne.n	80051e8 <_printf_i+0x14c>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	07df      	lsls	r7, r3, #31
 80051d4:	d508      	bpl.n	80051e8 <_printf_i+0x14c>
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	6861      	ldr	r1, [r4, #4]
 80051da:	4299      	cmp	r1, r3
 80051dc:	bfde      	ittt	le
 80051de:	2330      	movle	r3, #48	; 0x30
 80051e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051e8:	1b92      	subs	r2, r2, r6
 80051ea:	6122      	str	r2, [r4, #16]
 80051ec:	f8cd a000 	str.w	sl, [sp]
 80051f0:	464b      	mov	r3, r9
 80051f2:	aa03      	add	r2, sp, #12
 80051f4:	4621      	mov	r1, r4
 80051f6:	4640      	mov	r0, r8
 80051f8:	f7ff fee2 	bl	8004fc0 <_printf_common>
 80051fc:	3001      	adds	r0, #1
 80051fe:	d14c      	bne.n	800529a <_printf_i+0x1fe>
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	b004      	add	sp, #16
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	4835      	ldr	r0, [pc, #212]	; (80052e0 <_printf_i+0x244>)
 800520c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	680e      	ldr	r6, [r1, #0]
 8005214:	061f      	lsls	r7, r3, #24
 8005216:	f856 5b04 	ldr.w	r5, [r6], #4
 800521a:	600e      	str	r6, [r1, #0]
 800521c:	d514      	bpl.n	8005248 <_printf_i+0x1ac>
 800521e:	07d9      	lsls	r1, r3, #31
 8005220:	bf44      	itt	mi
 8005222:	f043 0320 	orrmi.w	r3, r3, #32
 8005226:	6023      	strmi	r3, [r4, #0]
 8005228:	b91d      	cbnz	r5, 8005232 <_printf_i+0x196>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	f023 0320 	bic.w	r3, r3, #32
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	2310      	movs	r3, #16
 8005234:	e7b0      	b.n	8005198 <_printf_i+0xfc>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	f043 0320 	orr.w	r3, r3, #32
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	2378      	movs	r3, #120	; 0x78
 8005240:	4828      	ldr	r0, [pc, #160]	; (80052e4 <_printf_i+0x248>)
 8005242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005246:	e7e3      	b.n	8005210 <_printf_i+0x174>
 8005248:	065e      	lsls	r6, r3, #25
 800524a:	bf48      	it	mi
 800524c:	b2ad      	uxthmi	r5, r5
 800524e:	e7e6      	b.n	800521e <_printf_i+0x182>
 8005250:	4616      	mov	r6, r2
 8005252:	e7bb      	b.n	80051cc <_printf_i+0x130>
 8005254:	680b      	ldr	r3, [r1, #0]
 8005256:	6826      	ldr	r6, [r4, #0]
 8005258:	6960      	ldr	r0, [r4, #20]
 800525a:	1d1d      	adds	r5, r3, #4
 800525c:	600d      	str	r5, [r1, #0]
 800525e:	0635      	lsls	r5, r6, #24
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	d501      	bpl.n	8005268 <_printf_i+0x1cc>
 8005264:	6018      	str	r0, [r3, #0]
 8005266:	e002      	b.n	800526e <_printf_i+0x1d2>
 8005268:	0671      	lsls	r1, r6, #25
 800526a:	d5fb      	bpl.n	8005264 <_printf_i+0x1c8>
 800526c:	8018      	strh	r0, [r3, #0]
 800526e:	2300      	movs	r3, #0
 8005270:	6123      	str	r3, [r4, #16]
 8005272:	4616      	mov	r6, r2
 8005274:	e7ba      	b.n	80051ec <_printf_i+0x150>
 8005276:	680b      	ldr	r3, [r1, #0]
 8005278:	1d1a      	adds	r2, r3, #4
 800527a:	600a      	str	r2, [r1, #0]
 800527c:	681e      	ldr	r6, [r3, #0]
 800527e:	6862      	ldr	r2, [r4, #4]
 8005280:	2100      	movs	r1, #0
 8005282:	4630      	mov	r0, r6
 8005284:	f7fa ffac 	bl	80001e0 <memchr>
 8005288:	b108      	cbz	r0, 800528e <_printf_i+0x1f2>
 800528a:	1b80      	subs	r0, r0, r6
 800528c:	6060      	str	r0, [r4, #4]
 800528e:	6863      	ldr	r3, [r4, #4]
 8005290:	6123      	str	r3, [r4, #16]
 8005292:	2300      	movs	r3, #0
 8005294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005298:	e7a8      	b.n	80051ec <_printf_i+0x150>
 800529a:	6923      	ldr	r3, [r4, #16]
 800529c:	4632      	mov	r2, r6
 800529e:	4649      	mov	r1, r9
 80052a0:	4640      	mov	r0, r8
 80052a2:	47d0      	blx	sl
 80052a4:	3001      	adds	r0, #1
 80052a6:	d0ab      	beq.n	8005200 <_printf_i+0x164>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	079b      	lsls	r3, r3, #30
 80052ac:	d413      	bmi.n	80052d6 <_printf_i+0x23a>
 80052ae:	68e0      	ldr	r0, [r4, #12]
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	4298      	cmp	r0, r3
 80052b4:	bfb8      	it	lt
 80052b6:	4618      	movlt	r0, r3
 80052b8:	e7a4      	b.n	8005204 <_printf_i+0x168>
 80052ba:	2301      	movs	r3, #1
 80052bc:	4632      	mov	r2, r6
 80052be:	4649      	mov	r1, r9
 80052c0:	4640      	mov	r0, r8
 80052c2:	47d0      	blx	sl
 80052c4:	3001      	adds	r0, #1
 80052c6:	d09b      	beq.n	8005200 <_printf_i+0x164>
 80052c8:	3501      	adds	r5, #1
 80052ca:	68e3      	ldr	r3, [r4, #12]
 80052cc:	9903      	ldr	r1, [sp, #12]
 80052ce:	1a5b      	subs	r3, r3, r1
 80052d0:	42ab      	cmp	r3, r5
 80052d2:	dcf2      	bgt.n	80052ba <_printf_i+0x21e>
 80052d4:	e7eb      	b.n	80052ae <_printf_i+0x212>
 80052d6:	2500      	movs	r5, #0
 80052d8:	f104 0619 	add.w	r6, r4, #25
 80052dc:	e7f5      	b.n	80052ca <_printf_i+0x22e>
 80052de:	bf00      	nop
 80052e0:	080055a5 	.word	0x080055a5
 80052e4:	080055b6 	.word	0x080055b6

080052e8 <memcpy>:
 80052e8:	440a      	add	r2, r1
 80052ea:	4291      	cmp	r1, r2
 80052ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80052f0:	d100      	bne.n	80052f4 <memcpy+0xc>
 80052f2:	4770      	bx	lr
 80052f4:	b510      	push	{r4, lr}
 80052f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052fe:	4291      	cmp	r1, r2
 8005300:	d1f9      	bne.n	80052f6 <memcpy+0xe>
 8005302:	bd10      	pop	{r4, pc}

08005304 <memmove>:
 8005304:	4288      	cmp	r0, r1
 8005306:	b510      	push	{r4, lr}
 8005308:	eb01 0402 	add.w	r4, r1, r2
 800530c:	d902      	bls.n	8005314 <memmove+0x10>
 800530e:	4284      	cmp	r4, r0
 8005310:	4623      	mov	r3, r4
 8005312:	d807      	bhi.n	8005324 <memmove+0x20>
 8005314:	1e43      	subs	r3, r0, #1
 8005316:	42a1      	cmp	r1, r4
 8005318:	d008      	beq.n	800532c <memmove+0x28>
 800531a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800531e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005322:	e7f8      	b.n	8005316 <memmove+0x12>
 8005324:	4402      	add	r2, r0
 8005326:	4601      	mov	r1, r0
 8005328:	428a      	cmp	r2, r1
 800532a:	d100      	bne.n	800532e <memmove+0x2a>
 800532c:	bd10      	pop	{r4, pc}
 800532e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005336:	e7f7      	b.n	8005328 <memmove+0x24>

08005338 <_free_r>:
 8005338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800533a:	2900      	cmp	r1, #0
 800533c:	d048      	beq.n	80053d0 <_free_r+0x98>
 800533e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005342:	9001      	str	r0, [sp, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f1a1 0404 	sub.w	r4, r1, #4
 800534a:	bfb8      	it	lt
 800534c:	18e4      	addlt	r4, r4, r3
 800534e:	f000 f8d3 	bl	80054f8 <__malloc_lock>
 8005352:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <_free_r+0x9c>)
 8005354:	9801      	ldr	r0, [sp, #4]
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	4615      	mov	r5, r2
 800535a:	b933      	cbnz	r3, 800536a <_free_r+0x32>
 800535c:	6063      	str	r3, [r4, #4]
 800535e:	6014      	str	r4, [r2, #0]
 8005360:	b003      	add	sp, #12
 8005362:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005366:	f000 b8cd 	b.w	8005504 <__malloc_unlock>
 800536a:	42a3      	cmp	r3, r4
 800536c:	d90b      	bls.n	8005386 <_free_r+0x4e>
 800536e:	6821      	ldr	r1, [r4, #0]
 8005370:	1862      	adds	r2, r4, r1
 8005372:	4293      	cmp	r3, r2
 8005374:	bf04      	itt	eq
 8005376:	681a      	ldreq	r2, [r3, #0]
 8005378:	685b      	ldreq	r3, [r3, #4]
 800537a:	6063      	str	r3, [r4, #4]
 800537c:	bf04      	itt	eq
 800537e:	1852      	addeq	r2, r2, r1
 8005380:	6022      	streq	r2, [r4, #0]
 8005382:	602c      	str	r4, [r5, #0]
 8005384:	e7ec      	b.n	8005360 <_free_r+0x28>
 8005386:	461a      	mov	r2, r3
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b10b      	cbz	r3, 8005390 <_free_r+0x58>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d9fa      	bls.n	8005386 <_free_r+0x4e>
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	1855      	adds	r5, r2, r1
 8005394:	42a5      	cmp	r5, r4
 8005396:	d10b      	bne.n	80053b0 <_free_r+0x78>
 8005398:	6824      	ldr	r4, [r4, #0]
 800539a:	4421      	add	r1, r4
 800539c:	1854      	adds	r4, r2, r1
 800539e:	42a3      	cmp	r3, r4
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	d1dd      	bne.n	8005360 <_free_r+0x28>
 80053a4:	681c      	ldr	r4, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	6053      	str	r3, [r2, #4]
 80053aa:	4421      	add	r1, r4
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	e7d7      	b.n	8005360 <_free_r+0x28>
 80053b0:	d902      	bls.n	80053b8 <_free_r+0x80>
 80053b2:	230c      	movs	r3, #12
 80053b4:	6003      	str	r3, [r0, #0]
 80053b6:	e7d3      	b.n	8005360 <_free_r+0x28>
 80053b8:	6825      	ldr	r5, [r4, #0]
 80053ba:	1961      	adds	r1, r4, r5
 80053bc:	428b      	cmp	r3, r1
 80053be:	bf04      	itt	eq
 80053c0:	6819      	ldreq	r1, [r3, #0]
 80053c2:	685b      	ldreq	r3, [r3, #4]
 80053c4:	6063      	str	r3, [r4, #4]
 80053c6:	bf04      	itt	eq
 80053c8:	1949      	addeq	r1, r1, r5
 80053ca:	6021      	streq	r1, [r4, #0]
 80053cc:	6054      	str	r4, [r2, #4]
 80053ce:	e7c7      	b.n	8005360 <_free_r+0x28>
 80053d0:	b003      	add	sp, #12
 80053d2:	bd30      	pop	{r4, r5, pc}
 80053d4:	200000a4 	.word	0x200000a4

080053d8 <_malloc_r>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	1ccd      	adds	r5, r1, #3
 80053dc:	f025 0503 	bic.w	r5, r5, #3
 80053e0:	3508      	adds	r5, #8
 80053e2:	2d0c      	cmp	r5, #12
 80053e4:	bf38      	it	cc
 80053e6:	250c      	movcc	r5, #12
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	4606      	mov	r6, r0
 80053ec:	db01      	blt.n	80053f2 <_malloc_r+0x1a>
 80053ee:	42a9      	cmp	r1, r5
 80053f0:	d903      	bls.n	80053fa <_malloc_r+0x22>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6033      	str	r3, [r6, #0]
 80053f6:	2000      	movs	r0, #0
 80053f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fa:	f000 f87d 	bl	80054f8 <__malloc_lock>
 80053fe:	4921      	ldr	r1, [pc, #132]	; (8005484 <_malloc_r+0xac>)
 8005400:	680a      	ldr	r2, [r1, #0]
 8005402:	4614      	mov	r4, r2
 8005404:	b99c      	cbnz	r4, 800542e <_malloc_r+0x56>
 8005406:	4f20      	ldr	r7, [pc, #128]	; (8005488 <_malloc_r+0xb0>)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	b923      	cbnz	r3, 8005416 <_malloc_r+0x3e>
 800540c:	4621      	mov	r1, r4
 800540e:	4630      	mov	r0, r6
 8005410:	f000 f862 	bl	80054d8 <_sbrk_r>
 8005414:	6038      	str	r0, [r7, #0]
 8005416:	4629      	mov	r1, r5
 8005418:	4630      	mov	r0, r6
 800541a:	f000 f85d 	bl	80054d8 <_sbrk_r>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	d123      	bne.n	800546a <_malloc_r+0x92>
 8005422:	230c      	movs	r3, #12
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	4630      	mov	r0, r6
 8005428:	f000 f86c 	bl	8005504 <__malloc_unlock>
 800542c:	e7e3      	b.n	80053f6 <_malloc_r+0x1e>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	1b5b      	subs	r3, r3, r5
 8005432:	d417      	bmi.n	8005464 <_malloc_r+0x8c>
 8005434:	2b0b      	cmp	r3, #11
 8005436:	d903      	bls.n	8005440 <_malloc_r+0x68>
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	441c      	add	r4, r3
 800543c:	6025      	str	r5, [r4, #0]
 800543e:	e004      	b.n	800544a <_malloc_r+0x72>
 8005440:	6863      	ldr	r3, [r4, #4]
 8005442:	42a2      	cmp	r2, r4
 8005444:	bf0c      	ite	eq
 8005446:	600b      	streq	r3, [r1, #0]
 8005448:	6053      	strne	r3, [r2, #4]
 800544a:	4630      	mov	r0, r6
 800544c:	f000 f85a 	bl	8005504 <__malloc_unlock>
 8005450:	f104 000b 	add.w	r0, r4, #11
 8005454:	1d23      	adds	r3, r4, #4
 8005456:	f020 0007 	bic.w	r0, r0, #7
 800545a:	1ac2      	subs	r2, r0, r3
 800545c:	d0cc      	beq.n	80053f8 <_malloc_r+0x20>
 800545e:	1a1b      	subs	r3, r3, r0
 8005460:	50a3      	str	r3, [r4, r2]
 8005462:	e7c9      	b.n	80053f8 <_malloc_r+0x20>
 8005464:	4622      	mov	r2, r4
 8005466:	6864      	ldr	r4, [r4, #4]
 8005468:	e7cc      	b.n	8005404 <_malloc_r+0x2c>
 800546a:	1cc4      	adds	r4, r0, #3
 800546c:	f024 0403 	bic.w	r4, r4, #3
 8005470:	42a0      	cmp	r0, r4
 8005472:	d0e3      	beq.n	800543c <_malloc_r+0x64>
 8005474:	1a21      	subs	r1, r4, r0
 8005476:	4630      	mov	r0, r6
 8005478:	f000 f82e 	bl	80054d8 <_sbrk_r>
 800547c:	3001      	adds	r0, #1
 800547e:	d1dd      	bne.n	800543c <_malloc_r+0x64>
 8005480:	e7cf      	b.n	8005422 <_malloc_r+0x4a>
 8005482:	bf00      	nop
 8005484:	200000a4 	.word	0x200000a4
 8005488:	200000a8 	.word	0x200000a8

0800548c <_realloc_r>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	4607      	mov	r7, r0
 8005490:	4614      	mov	r4, r2
 8005492:	460e      	mov	r6, r1
 8005494:	b921      	cbnz	r1, 80054a0 <_realloc_r+0x14>
 8005496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800549a:	4611      	mov	r1, r2
 800549c:	f7ff bf9c 	b.w	80053d8 <_malloc_r>
 80054a0:	b922      	cbnz	r2, 80054ac <_realloc_r+0x20>
 80054a2:	f7ff ff49 	bl	8005338 <_free_r>
 80054a6:	4625      	mov	r5, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ac:	f000 f830 	bl	8005510 <_malloc_usable_size_r>
 80054b0:	42a0      	cmp	r0, r4
 80054b2:	d20f      	bcs.n	80054d4 <_realloc_r+0x48>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4638      	mov	r0, r7
 80054b8:	f7ff ff8e 	bl	80053d8 <_malloc_r>
 80054bc:	4605      	mov	r5, r0
 80054be:	2800      	cmp	r0, #0
 80054c0:	d0f2      	beq.n	80054a8 <_realloc_r+0x1c>
 80054c2:	4631      	mov	r1, r6
 80054c4:	4622      	mov	r2, r4
 80054c6:	f7ff ff0f 	bl	80052e8 <memcpy>
 80054ca:	4631      	mov	r1, r6
 80054cc:	4638      	mov	r0, r7
 80054ce:	f7ff ff33 	bl	8005338 <_free_r>
 80054d2:	e7e9      	b.n	80054a8 <_realloc_r+0x1c>
 80054d4:	4635      	mov	r5, r6
 80054d6:	e7e7      	b.n	80054a8 <_realloc_r+0x1c>

080054d8 <_sbrk_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d06      	ldr	r5, [pc, #24]	; (80054f4 <_sbrk_r+0x1c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fb fb4a 	bl	8000b7c <_sbrk>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_sbrk_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_sbrk_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	200131a0 	.word	0x200131a0

080054f8 <__malloc_lock>:
 80054f8:	4801      	ldr	r0, [pc, #4]	; (8005500 <__malloc_lock+0x8>)
 80054fa:	f000 b811 	b.w	8005520 <__retarget_lock_acquire_recursive>
 80054fe:	bf00      	nop
 8005500:	200131a8 	.word	0x200131a8

08005504 <__malloc_unlock>:
 8005504:	4801      	ldr	r0, [pc, #4]	; (800550c <__malloc_unlock+0x8>)
 8005506:	f000 b80c 	b.w	8005522 <__retarget_lock_release_recursive>
 800550a:	bf00      	nop
 800550c:	200131a8 	.word	0x200131a8

08005510 <_malloc_usable_size_r>:
 8005510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005514:	1f18      	subs	r0, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfbc      	itt	lt
 800551a:	580b      	ldrlt	r3, [r1, r0]
 800551c:	18c0      	addlt	r0, r0, r3
 800551e:	4770      	bx	lr

08005520 <__retarget_lock_acquire_recursive>:
 8005520:	4770      	bx	lr

08005522 <__retarget_lock_release_recursive>:
 8005522:	4770      	bx	lr

08005524 <_init>:
 8005524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005526:	bf00      	nop
 8005528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552a:	bc08      	pop	{r3}
 800552c:	469e      	mov	lr, r3
 800552e:	4770      	bx	lr

08005530 <_fini>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr
